[{"path":"https://rfhb.github.io/ctrdata/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Ralf Herold Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_install.html","id":"install-package-ctrdata-on-an-r-system","dir":"Articles","previous_headings":"","what":"Install package ctrdata on an R system","title":"Install R package ctrdata","text":"R Project website (https://www.r-project.org/) provides installers R system. can used software products graphical user interfaces R Studio, Microsoft R Open, Visual Studio Code. General information ctrdata package available : https://rfhb.github.io/ctrdata/. R, execute: using development version package ctrdata, install GitHub: Either install package ctrdata user’s library.","code":"install.packages(\"ctrdata\") # install package under development install.packages(c(\"remotes\")) remotes::install_github(\"rfhb/ctrdata\", dependencies = TRUE, build_vignettes = TRUE)"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_install.html","id":"internet-access-via-proxy","dir":"Articles","previous_headings":"Install package ctrdata on an R system","what":"Internet access via proxy","title":"Install R package ctrdata","text":"Functions package ctrdata start ctr... require access trial registers internet via https protocol. Many organisations use transparent proxies may require users configurations. However, necessary, package ctrdata can use proxy settings set users R session follows:","code":"Sys.setenv(https_proxy = \"your_proxy.server.domain:8080\") # if needed Sys.setenv(https_proxy_user = \"your_userid:your_password\") # if needed"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_install.html","id":"databases-to-use","dir":"Articles","previous_headings":"Install package ctrdata on an R system","what":"Databases to use","title":"Install R package ctrdata","text":"time, PostgreSQL, DuckDB, SQLite MongoDB (local remote) database can used package ctrdata. full SQLite database provided R package RSQLite. Suggested installation instructions PostgreSQL local MongoDB server ; remote MongoDB database server accessible . See speed comparison databases; recommended: DuckDB, PostgreSQL MongoDB local server.","code":""},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_install.html","id":"attach-package-ctrdata","dir":"Articles","previous_headings":"Install package ctrdata on an R system","what":"Attach package ctrdata","title":"Install R package ctrdata","text":"completing installation, attach package user’s library. also check availability additional installation requirements mentioned : Remember respect registers’ terms conditions (see ctrOpenSearchPagesInBrowser(copyright = TRUE)). Please cite package publication follows: Ralf Herold (2024). ctrdata: Retrieve Analyze Clinical Trials Public Registers. R package version 1.16.0. https://cran.r-project.org/package=ctrdata","code":"library(ctrdata)"},{"path":[]},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_retrieve.html","id":"attach-package-ctrdata","dir":"Articles","previous_headings":"Get started","what":"Attach package ctrdata","title":"Retrieve clinical trial information","text":"Remember respect registers’ terms conditions (see ctrOpenSearchPagesInBrowser(copyright = TRUE)). Please cite package publication follows: Ralf Herold (2024). ctrdata: Retrieve Analyze Clinical Trials Public Registers. R package version 1.16.0. https://cran.r-project.org/package=ctrdata","code":"library(ctrdata) citation(\"ctrdata\")"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_retrieve.html","id":"open-registers-advanced-search-page-in-browser","dir":"Articles","previous_headings":"Get started","what":"Open register’s advanced search page in browser","title":"Retrieve clinical trial information","text":"functions open browser, user can start searching trials interest.","code":"# Please review and respect register copyrights: ctrOpenSearchPagesInBrowser(   copyright = TRUE ) # Open browser with example search: ctrOpenSearchPagesInBrowser(   url = \"cancer&age=under-18\",   register = \"EUCTR\" )"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_retrieve.html","id":"adjust-search-parameters-and-execute-search-in-browser","dir":"Articles","previous_headings":"Get started","what":"Adjust search parameters and execute search in browser","title":"Retrieve clinical trial information","text":"Refine search trials interest listed browser. total number trials can retrieved package ctrdata intentionally limited queries 10000 result records.","code":""},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_retrieve.html","id":"copy-address-from-browser-address-bar-to-clipboard","dir":"Articles","previous_headings":"Get started","what":"Copy address from browser address bar to clipboard","title":"Retrieve clinical trial information","text":"Use functions keyboard shortcuts according operating system. See automation copy URLs user’s queries supported clinical trial registers.","code":""},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_retrieve.html","id":"get-address-from-clipboard","dir":"Articles","previous_headings":"Get started","what":"Get address from clipboard","title":"Retrieve clinical trial information","text":"next steps executed R environment:","code":"q <- ctrGetQueryUrl() # * Using clipboard content as register query URL: https://www.clinicaltrialsregister.eu/ctr-search/search?query=cancer&age=under-18&status=completed&phase=phase-one # * Found search query from EUCTR: query=cancer&age=under-18&status=completed&phase=phase-one  q #                                                   query-term  query-register # 1 query=cancer&age=under-18&status=completed&phase=phase-one           EUCTR  # To check, this opens a browser with the query ctrOpenSearchPagesInBrowser(url = q)"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_retrieve.html","id":"retrieve-protocol-related-information-transform-save-to-database-check","dir":"Articles","previous_headings":"Get started","what":"Retrieve protocol-related information, transform, save to database, check","title":"Retrieve clinical trial information","text":"file-base SQLite database, takes 20 seconds 300 records, time needed internet-retrieval slow register. Speed higher registers, using MongoDB memory-based SQLite.","code":"# Count number of trial records ctrLoadQueryIntoDb(   queryterm = q,   only.count = TRUE )$n # * Found search query from EUCTR: query=cancer&age=under-18&status=completed&phase=phase-one # * Checking trials in EUCTR... # Retrieved overview, multiple records of 97 trial(s) from 5 page(s) to be downloaded (estimate: 5 MB) # [1] 97  # Connect to a database and chose a table / collection db <- nodbi::src_sqlite(   dbname = \"sqlite_file.sql\",   collection = \"test\" )  # Retrieve records, download into database ctrLoadQueryIntoDb(   queryterm = q,   con = db ) # * Found search query from EUCTR: query=cancer&age=under-18&status=completed&phase=phase-one # * Checking trials in EUCTR... # Retrieved overview, multiple records of 97 trial(s) from 5 page(s) to be downloaded (estimate: 5 MB) # (1/3) Downloading trials... # Note: register server cannot compress data, transfer takes longer (estimate: 20 s) # Download status: 5 done; 0 in progress. Total size: 7.91 Mb (100%)... done!              # (2/3) Converting to NDJSON (estimate: 2 s)... # (3/3) Importing records into database... # = Imported or updated 377 records on 97 trial(s)  # No history found in expected format. # Updated history (\"meta-info\" in \"test\") # $n # [1] 377  # Show which queries have been downloaded into database dbQueryHistory(con = db) #       query-timestamp query-register query-records # 1 2024-01-14 12:40:16          EUCTR           377 #                                                   query-term # 1 query=cancer&age=under-18&status=completed&phase=phase-one"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_retrieve.html","id":"repeat-and-update-a-previous-query","dir":"Articles","previous_headings":"","what":"Repeat and update a previous query","title":"Retrieve clinical trial information","text":"Instead “last”, integer number can specified querytoupdate corresponds number using dbQueryHistory(). Depending register, update (differential update) possible original query executed fully .","code":"ctrLoadQueryIntoDb(   querytoupdate = \"last\",   con = db )"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_retrieve.html","id":"retrieve-results","dir":"Articles","previous_headings":"","what":"Retrieve results","title":"Retrieve clinical trial information","text":"EUCTR, result-related trial information requested retrieved, take longer download store. CTGOV, results always included retrieval. Note trial documents, including results reports, can downloaded specifying parameter documents.path, see help(ctrLoadQueryIntoDb). file-base SQLite database, takes 4 minutes 300 records, time needed merging result- protocol-related information SQLite; much faster MongoDB PostgreSQL. download presence results recorded dbQueryHistory() availability results increases time.","code":"ctrLoadQueryIntoDb(   queryterm = q,   euctrresults = TRUE,   con = db ) # * Found search query from EUCTR: query=cancer&age=under-18&status=completed&phase=phase-one # * Checking trials in EUCTR... # Retrieved overview, multiple records of 97 trial(s) from 5 page(s) to be downloaded (estimate: 5 MB) # (1/3) Downloading trials... # Note: register server cannot compress data, transfer takes longer (estimate: 20 s) # Download status: 5 done; 0 in progress. Total size: 7.91 Mb (100%)... done!              # (2/3) Converting to NDJSON (estimate: 2 s)... # (3/3) Importing records into database... # = Imported or updated 377 records on 97 trial(s)  # * Checking results if available from EUCTR for 97 trials:  # (1/4) Downloading and extracting results (. = data, F = file[s] and data, x = none): # Download status: 97 done; 0 in progress. Total size: 48.64 Mb (100%)... done!              # Download status: 21 done; 0 in progress. Total size: 84.53 Kb (308%)... done!              # Download status: 21 done; 0 in progress. Total size: 84.53 Kb (308%)... done!              # Download status: 21 done; 0 in progress. Total size: 84.53 Kb (308%)... done!              # F . . . . F . . F . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  # (2/4) Converting to NDJSON (estimate: 8 s)... # (3/4) Importing results into database (may take some time)... # (4/4) Results history: not retrieved (euctrresultshistory = FALSE) # = Imported or updated results for 76 trials # Updated history (\"meta-info\" in \"test\")"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_retrieve.html","id":"add-information-from-another-register","dir":"Articles","previous_headings":"","what":"Add information from another register","title":"Retrieve clinical trial information","text":"collection can used store (analyse) trial information different registers. Example: file-base SQLite database, takes 10 seconds 200 records. Note example, warning message may issued importing NDJSON file trial records. warning arises high level complexity XML content trial records. issue can resolved increasing operating system stack size available R, see: https://github.com/rfhb/ctrdata/issues/22","code":"ctrLoadQueryIntoDb(   queryterm = \"https://classic.clinicaltrials.gov/ct2/results?cond=neuroblastoma&recrs=e&age=0&intr=Drug\",   con = db ) # * Appears specific for CTGOV CLASSIC # * Found search query from CTGOV: cond=neuroblastoma&recrs=e&age=0&intr=Drug # * Checking trials in CTGOV classic... # Retrieved overview, records of 216 trial(s) are to be downloaded (estimate: 1.7 MB) # (1/3) Downloading trial file... # Download status: 1 done; 0 in progress. Total size: 1.52 Mb (100%)... done!              # (2/3) Converting to NDJSON (estimate: 10 s)... # (3/3) Importing records into database... # = Imported or updated 216 trial(s)                # Updated history (\"meta-info\" in \"test\")"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_retrieve.html","id":"add-records-from-ctis-register-into-the-same-collection","dir":"Articles","previous_headings":"","what":"Add records from CTIS register into the same collection","title":"Retrieve clinical trial information","text":"April 2023, 160 trials publicly accessible CTIS, used since January 2023 new clinical trials EU. Queries CTIS search interface can automatically copied clipboard user can paste queryterm, see .","code":"# Retrieve trials from another register: ctrLoadQueryIntoDb(   queryterm = \"ageGroupCode=3\",   register = \"CTIS\",   con = db )"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_retrieve.html","id":"add-personal-annotations","dir":"Articles","previous_headings":"","what":"Add personal annotations","title":"Retrieve clinical trial information","text":"downloading trial information, user can specify annotation records downloaded. default, annotations accumulated trial records loaded updated; alternatively, annotations can replaced. Annotations useful analyses, example specially identify subsets records database.","code":"ctrLoadQueryIntoDb(   queryterm = \"https://classic.clinicaltrials.gov/ct2/results?cond=neuroblastoma&recrs=e&age=0&intr=Drug&cntry=DE\",   annotation.text = \"site_DE \",   annotation.mode = \"append\",   con = db ) # * Found search query from CTIS: ageGroupCode=3 # * Checking trials in CTIS... # (1/5) Downloading trials list . . found 392 trials # (2/5) Downloading and processing part I and parts II... (estimate: 80 Mb) # Download status: 392 done; 0 in progress. Total size: 62.56 Mb (100%)... done!              # Download status: 2 done; 0 in progress. Total size: 30 b (100%)... done!              # Download status: 2 done; 0 in progress. Total size: 30 b (100%)... done!              # Download status: 2 done; 0 in progress. Total size: 30 b (100%)... doneownloading and processing additional data: # publicevents, summary, layperson, csr, cm, inspections, publicevaluation (estimate: 20 Mb) # Download status: 680 done; 0 in progress. Total size: 17.83 Mb (100%)... done!              # 390 # (4/5) Importing records into database... # (5/5) Updating with additional data: . . . . .    # = Imported / updated 392 / 390 / 390 / 4 / 1 / 3 records on 392 trial(s) # Updated history (\"meta-info\" in \"test\") # $n # [1] 392"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_retrieve.html","id":"add-information-using-trial-identifiers","dir":"Articles","previous_headings":"","what":"Add information using trial identifiers","title":"Retrieve clinical trial information","text":"identifiers clinical trials interest already known, example shows can processed import trial information database collection. involves constructing query combines identifiers iterating sets identifiers. Note combine identifiers using “++” queryterm, register specified. Note CTIS, trial information identified trial identifiers can retrieved one--one, repeating queries trial https://euclinicaltrials.eu/app/#/search?number=2023-503994-39-00.","code":"# ids of trials of interest ctIds <- c(   \"NCT00001209\", \"NCT00001436\", \"NCT00187109\", \"NCT01516567\", \"NCT01471782\", \"NCT03042429\",   \"NCT00357084\", \"NCT00357500\", \"NCT00365755\", \"NCT00407433\", \"NCT00410657\", \"NCT00436657\",   \"NCT00436852\", \"NCT00445965\", \"NCT00450307\", \"NCT00450827\", \"NCT00471679\", \"NCT00486564\",   \"NCT00492167\", \"NCT00499616\", \"NCT00503724\", \"NCT00509353\", \"NCT00520936\", \"NCT00536601\",   \"NCT00567567\", \"NCT00578864\", \"NCT00601003\", \"NCT00644696\", \"NCT00646230\", \"NCT00659984\",   \"NCT00716976\", \"NCT00743496\", \"NCT00793845\", \"NCT00806182\", \"NCT00831844\", \"NCT00867568\",   \"NCT00877110\", \"NCT00885326\", \"NCT00918320\", \"NCT00923351\", \"NCT00939770\", \"NCT00960739\" )  # split into sets of each 25 trial ids  # (larger sets e.g. 50 may still work) idSets <- split(ctIds, ceiling(seq_along(ctIds) / 25))  # variable to collect import results result <- NULL  # iterate over sets of trial ids for (idSet in idSets) {      # import   setResult <- ctrLoadQueryIntoDb(      # for CTGOV classic, EUCTR, ISRCTN use:     # queryterm = paste0(idSet, collapse = \"+OR+\"),          # for CTGOV use:      queryterm = paste0(\"https://www.clinicaltrials.gov/search?term=\",                         paste0(idSet, collapse = \" \")),          # specify register that holds the information     # register = \"CTGOV\",     con = db   )      # append results   result <- c(result, list(setResult)) }  # inspect results  as.data.frame(do.call(rbind, result))[, c(\"n\", \"failed\")] #    n failed # 1 25   NULL # 2 17   NULL"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_retrieve.html","id":"find-synonyms-of-active-substance-names","dir":"Articles","previous_headings":"","what":"Find synonyms of active substance names","title":"Retrieve clinical trial information","text":"registers automatically expand search terms include alternative terms, codes names active substances. obtain character vector synonyms active substance name, use: names can used queries register.","code":"ctrFindActiveSubstanceSynonyms(   activesubstance = \"imatinib\" ) # [1] \"imatinib\"  \"gleevec\" \"sti 571\" \"glivec\" \"CGP 57148\" \"st1571\""},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_retrieve.html","id":"using-a-mongodb-database","dir":"Articles","previous_headings":"","what":"Using a MongoDB database","title":"Retrieve clinical trial information","text":"example works free service . Note user name password need encoded. format connection string documented https://docs.mongodb.com/manual/reference/connection-string/. recommended databases, see vignette Install R package ctrdata.","code":"# Specify base uri for remote MongoDB server, #  as part of the encoded connection string db <- nodbi::src_mongo(   # Note: this provides read-only access   url = \"mongodb+srv://DWbJ7Wh:bdTHh5cS@cluster0-b9wpw.mongodb.net\",   db = \"dbperm\",   collection = \"dbperm\")  # Since the above access is read-only, # just obtain fields of interest: dbGetFieldsIntoDf(   fields = c(\"a2_eudract_number\",              \"e71_human_pharmacology_phase_i\"),   con = db) #                  _id a2_eudract_number e71_human_pharmacology_phase_i # 1 2010-024264-18-3RD    2010-024264-18                           TRUE # 2  2010-024264-18-AT    2010-024264-18                           TRUE # 3  2010-024264-18-DE    2010-024264-18                           TRUE # 4  2010-024264-18-GB    2010-024264-18                           TRUE # 5  2010-024264-18-IT    2010-024264-18                           TRUE # 6  2010-024264-18-NL    2010-024264-18                           TRUE"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_summarise.html","id":"preparations","dir":"Articles","previous_headings":"","what":"Preparations","title":"Summarise and analyse clinical trial information","text":"using MongoDB, faster SQLite, can handle credentials, provides access remote servers can directly retrieve nested elements paths. See README.md Retrieve clinical trial information examples using SQLite. Also PostgreSQL can used database, see Install R package ctrdata. See Retrieve clinical trial information details.","code":"db <- nodbi::src_mongo(   url = \"mongodb://localhost\",   db = \"my_database_name\",   collection = \"my_collection_name\" ) db # MongoDB 7.0.2 (uptime: 739522s) # URL: mongodb://localhost # Database: my_database_name # Collection: my_collection_name # library(ctrdata)  # These two queries are similar, for completed interventional (drug) # trials with children with a neuroblastoma from either register ctrLoadQueryIntoDb(   # using queryterm and register...   queryterm = \"query=neuroblastoma&age=under-18&status=completed\",   register = \"EUCTR\",   euctrresults = TRUE,   con = db ) ctrLoadQueryIntoDb(   # or using full URL of search results   queryterm =     \"https://classic.clinicaltrials.gov/ct2/results?cond=neuroblastoma&recrs=e&age=0&intr=Drug\",   con = db ) dbQueryHistory(con = db) #       query-timestamp query-register query-records                                        query-term # 1 2024-01-14 12:53:02          EUCTR           199 query=neuroblastoma&age=under-18&status=completed # 2 2024-01-14 12:53:13          CTGOV           216        cond=neuroblastoma&recrs=e&age=0&intr=Drug"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_summarise.html","id":"find-fields-variables-of-interest","dir":"Articles","previous_headings":"","what":"Find fields / variables of interest","title":"Summarise and analyse clinical trial information","text":"Specify part name variable interest; variables including deeply nested variable names searched. search fields cached thus accelerated R session, long new ctrLoadQueryIntoDb() executed.","code":"# dbFindFields(namepart = \"date\", con = db) # Finding fields in database collection (may take some time) # Field names cached for this session. #                                                                               EUCTR  #    \"e231_full_title_date_and_version_of_each_substudy_and_their_related_objectives\"  #                                                                               EUCTR  # \"e231_full_title_date_and_version_of_each_substudy_and_their_related_objectives_es\"  #                                                                               EUCTR  # \"e231_full_title_date_and_version_of_each_substudy_and_their_related_objectives_it\"  #                                                                               EUCTR  #                                            \"n_date_of_competent_authority_decision\"  #                                                                               EUCTR  #                                                \"n_date_of_ethics_committee_opinion\"  #                                                                               EUCTR  #                                             \"p_date_of_the_global_end_of_the_trial\"  #                                                                               EUCTR  #                                \"trialChanges.globalAmendments.globalAmendment.date\"  #                                                                               EUCTR  #                          \"trialChanges.globalInterruptions.globalInterruption.date\"  #                                                                               EUCTR  #                   \"trialChanges.globalInterruptions.globalInterruption.restartDate\"  #                                                                               EUCTR  #                                                \"trialInformation.analysisStageDate\"  #                                                                               EUCTR  #                                             \"trialInformation.globalEndOfTrialDate\"  #                                                                               EUCTR  #                                            \"trialInformation.primaryCompletionDate\"  #                                                                               EUCTR  #                                             \"trialInformation.recruitmentStartDate\"  #                                                                               EUCTR  #            \"x6_date_on_which_this_record_was_first_entered_in_the_eudract_database\"  #                                                                               CTGOV  #                                                                   \"completion_date\"  #                                                                               CTGOV  #                                                                \"last_update_posted\"  #                                                                               CTGOV  #                                                             \"last_update_submitted\"  #                                                                               CTGOV  #                                                          \"last_update_submitted_qc\"  #                                                                               CTGOV  #                                                           \"primary_completion_date\"  #                                                                               CTGOV  #                         \"provided_document_section.provided_document.document_date\"  #                                                                               CTGOV  #                                                     \"required_header.download_date\"  #                                                                               CTGOV  #                                                                        \"start_date\"  #                                                                               CTGOV  #                                                                 \"verification_date\""},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_summarise.html","id":"data-frame-from-database","dir":"Articles","previous_headings":"","what":"Data frame from database","title":"Summarise and analyse clinical trial information","text":"fields interest can obtained database represented R data.frame:","code":"result <- dbGetFieldsIntoDf(   c(     \"f41_in_the_member_state\",     \"f422_in_the_whole_clinical_trial\",     \"a1_member_state_concerned\",     \"p_end_of_trial_status\",     \"n_date_of_competent_authority_decision\",     \"a2_eudract_number\",     \"overall_status\",     \"start_date\",     \"primary_completion_date\"   ),   con = db )"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_summarise.html","id":"metadata-from-data-frame","dir":"Articles","previous_headings":"","what":"Metadata from data frame","title":"Summarise and analyse clinical trial information","text":"objects returned functions package include attributes metadata indicate database, table / collection query details. Metadata can reused R. database, variable “_id” unique index record. “_id” NCT number CTGOV records (e.g., “NCT00002560”), EudraCT number EUCTR records including postfix identifying EU Member State (e.g., “2008-001436-12-NL”). relevant de-duplicate records trial can registered CTGOV EUCTR, can records involved country EUCTR. De-duplication done analysis stage enables select trial record taken one register, one EU Member State. basis de-duplication recording additional trial identifiers supplementary fields (variables), checked reported using function dbFindIdsUniqueTrials(): unique ids can used like de-duplicate data.frame created :","code":"attributes(result) # [...] # $`ctrdata-dbname` # [1] \"my_database_name\" #  # $`ctrdata-table` # [1] \"my_collection_name\" #  # $`ctrdata-dbqueryhistory` #       query-timestamp query-register query-records                                        query-term # 1 2024-01-14 12:53:02          EUCTR           199 query=neuroblastoma&age=under-18&status=completed # 2 2024-01-14 12:53:13          CTGOV           216        cond=neuroblastoma&recrs=e&age=0&intr=Drug # Obtain de-duplicated trial record ids ids <- dbFindIdsUniqueTrials(   preferregister = \"EUCTR\",   con = db ) # Searching for duplicate trials...  #  - Getting all trial identifiers (may take some time), 415 found in collection #  - Finding duplicates among registers' and sponsor ids... #  - 150 EUCTR _id were not preferred EU Member State record for 51 trials #  - Keeping 49 / 201 / 0 / 0 / 0 records from EUCTR / CTGOV / ISRCTN / CTIS / CTGOV2 # = Returning keys (_id) of 250 records in collection \"my_collection_name\" # Eliminate duplicate trials records: result <- result[result[[\"_id\"]] %in% ids, ] # nrow(result) # [1] 250"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_summarise.html","id":"simple-analysis---dates","dir":"Articles","previous_headings":"","what":"Simple analysis - dates","title":"Summarise and analyse clinical trial information","text":"data.frame generated dbGetFieldsIntoDf(), fields typed dates, logical, character numbers. typing facilitates using respective type data analysis, example dates base R graphics:","code":"# str(result) # 'data.frame': 250 obs. of  10 variables: #  $ _id                                   : chr  \"2004-004386-15-DE\" \"2005-000915-80-IT\" \"2005-001267-63-IT\" \"2005-002089-13-GB\" ... #  $ a1_member_state_concerned             : chr  \"Germany - BfArM\" \"Italy - Italian Medicines Agency\" \"Italy - Italian Medicines Agency\" \"UK - MHRA\" ... #  $ a2_eudract_number                     : chr  \"2004-004386-15\" \"2005-000915-80\" \"2005-001267-63\" \"2005-002089-13\" ... #  $ f41_in_the_member_state               : int  NA NA 5 37 70 24 100 35 10 24 ... #  $ f422_in_the_whole_clinical_trial      : int  230 NA 12 67 70 NA 100 156 2230 NA ... #  $ n_date_of_competent_authority_decision: Date, format: \"2005-07-08\" \"2005-04-21\" \"2005-07-08\" ... #  $ p_end_of_trial_status                 : chr  \"Completed\" \"Completed\" \"Completed\" \"Completed\" ... #  $ overall_status                        : chr  NA NA NA NA ... #  $ start_date                            : Date, format: NA NA NA ... #  $ primary_completion_date               : Date, format: NA NA NA ... #  - attr(*, \"ctrdata-dbname\")= chr \"my_database_name\" #  - attr(*, \"ctrdata-table\")= chr \"my_collection_name\" #  - attr(*, \"ctrdata-dbqueryhistory\")='data.frame':    2 obs. of  4 variables: #   ..$ query-timestamp: chr [1:2] \"2024-01-14 12:53:02\" \"2024-01-14 12:53:13\" #   ..$ query-register : chr [1:2] \"EUCTR\" \"CTGOV\" #   ..$ query-records  : int [1:2] 199 216 #   ..$ query-term     : chr [1:2] \"query=neuroblastoma&age=under-18&status=completed\" \"cond=neuroblastoma&recrs=e&age=0&intr=Drug\" # Open file for saving png(\"vignettes/nb1.png\") # Visualise trial start date hist(   result[[\"n_date_of_competent_authority_decision\"]],   breaks = \"years\" ) box() dev.off()"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_summarise.html","id":"merge-corresponding-fields-from-registers","dir":"Articles","previous_headings":"","what":"Merge corresponding fields from registers","title":"Summarise and analyse clinical trial information","text":"field “n_date_of_competent_authority_decision” used exists EUCTR, yet corresponds field “start_date” CTGOV. Thus, give start trial, two fields can merged analysis, using convenience function dfMergeVariablesRelevel() ctrdata package: sophisticated use dfMergeVariablesRelevel(), values original variables can mapped new values merged variable, follows:","code":"# Merge two variables into a new variable: result$trialstart <- dfMergeVariablesRelevel(   result,   colnames = c(     \"n_date_of_competent_authority_decision\",     \"start_date\"   ) )  # Plot from both registers png(\"vignettes/nb2.png\") hist(   result[[\"trialstart\"]],   breaks = \"years\" ) box() dev.off() # First, define how values of the new, merged variable # (e.g., \"ongoing\") will result from values of the # original variable (e.g, \"Recruiting): mapped_values <- list(   \"ongoing\" = c(     \"Recruiting\", \"Active\", \"Ongoing\",     \"Active, not recruiting\",     \"Enrolling by invitation\", \"Restarted\"   ),   \"completed\" = c(\"Completed\", \"Prematurely Ended\", \"Terminated\"),   \"other\" = c(     \"Withdrawn\", \"Suspended\", \"No longer available\",     \"Not yet recruiting\", \"Temporarily Halted\",     \"Unknown status\", \"GB - no longer in EU/EEA\"   ) )  # Secondly, use the list of mapped # values when merging two variable: tmp <- dfMergeVariablesRelevel(   result,   colnames = c(     \"overall_status\",     \"p_end_of_trial_status\"   ),   levelslist = mapped_values )  table(tmp) #   completed   ongoing     other #         245         4         1"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_summarise.html","id":"annotations-made-by-user","dir":"Articles","previous_headings":"","what":"Annotations made by user","title":"Summarise and analyse clinical trial information","text":"using ctrLoadQueryIntoDb(), ctrdata adds record fields annotation record_last_import. annotation field single string user specifies retrieving trials (Retrieve clinical trial information). user can specify append, prefix replace existing annotations trial record loaded , see example . last date time trial record imported updated automatically using ctrLoadQueryIntoDb(). fields can also used analysis. example, string functions can used annotations, e.g. split components. Since annotations specified retrieving trials steps , far annotation fields stopifnodata set FALSE avoid function raises error alert users:","code":"# ctrLoadQueryIntoDb(   queryterm = \"query=neuroblastoma&resultsstatus=trials-with-results\",   register = \"EUCTR\",   euctrresults = TRUE,   annotation.text = \"test annotation\",   annotation.mode = \"append\",   con = db )  result <- dbGetFieldsIntoDf(   fields = c(     \"annotation\",     \"record_last_import\"   ),   con = db )  str(result) # 'data.frame': 457 obs. of  3 variables: #  $ _id               : chr  \"2004-004386-15-DE\" \"2004-004386-15-ES\" \"2004-004386-15-GB\" \"2004-004386-15-IT\" ... #  $ record_last_import: Date, format: \"2024-01-14\" \"2024-01-14\" \"2024-01-14\" ... #  $ annotation        : chr  \"test annotation\" \"test annotation\" \"test annotation\" \"test annotation\" ..."},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_summarise.html","id":"analysing-nested-fields-such-as-trial-results","dir":"Articles","previous_headings":"","what":"Analysing nested fields such as trial results","title":"Summarise and analyse clinical trial information","text":"registers represent clinical trial information nesting fields (e.g., several reporting groups within several measures within one several endpoints). visualisation hierarchical representation CTGOV : analysis nested information highlighted duration response facilitated ctrdata follows. main steps : transform nested information long, name-value data frame identify measures interest (e.g. duration response, blue circles ) located information hierarchy specifying name value fields (wherename, wherevalue) finally obtain value specifying name(s) value field(s) (valuename, red circles figure ).","code":"# dbFindFields(\"outcome\", db)  # remotes::install_github(\"https://github.com/hrbrmstr/jsonview\") result <- dbGetFieldsIntoDf(\"clinical_results.outcome_list.outcome\", db) jsonview::json_tree_view(result[[\"clinical_results.outcome_list.outcome\"]][   result[[\"_id\"]] == \"NCT00520936\" ]) # 1. Create data frame from results fields. # These are the key results fields from # CTGOV and from EUCTR: result <- dbGetFieldsIntoDf(   fields = c(     # CTGOV     \"clinical_results.baseline.analyzed_list.analyzed.count_list.count\",     \"clinical_results.baseline.group_list.group\",     \"clinical_results.baseline.analyzed_list.analyzed.units\",     \"clinical_results.outcome_list.outcome\",     \"study_design_info.allocation\",     # EUCTR     \"@attributes.eudractNumber\",     \"trialInformation.populationAgeGroup\",     \"subjectDisposition.recruitmentDetails\",     \"baselineCharacteristics.baselineReportingGroups.baselineReportingGroup\",     \"endPoints.endPoint\",     \"trialChanges.hasGlobalInterruptions\",     \"subjectAnalysisSets\",     \"adverseEvents.seriousAdverseEvents.seriousAdverseEvent\"   ),   con = db )  # Keep only unique trial records result <- result[result[[\"_id\"]] %in% dbFindIdsUniqueTrials(con = db), ] # Searching for duplicate trials...  #  - Getting all trial identifiers (may take some time), 457 found in collection #  - Finding duplicates among registers' and sponsor ids... #  - 175 EUCTR _id were not preferred EU Member State record for 68 trials #  - Keeping 66 / 197 / 0 / 0 / 0 records from EUCTR / CTGOV / CTGOV2 / ISRCTN / CTIS # = Returning keys (_id) of 263 records in collection \"my_collection_name\"  # 2. The columns of the results data frame # contain nested lists of fields, example: str(result[[\"endPoints.endPoint\"]][1]) # List of 1 #  $ :List of 12 #   ..$ title                            : chr \"Primary\" #   ..$ readyForValues                   : chr \"false\" #   ..$ countable                        : chr \"false\" #   ..$ unit                             : chr \"TBC\" #   ..$ timeFrame                        : chr \"TBC\" #   ..$ type                             :List of 1 #   .. ..$ value: chr \"ENDPOINT_TYPE.primary\" #   ..$ centralTendencyType              :List of 1 #   .. ..$ value: chr \"MEASURE_TYPE.arithmetic\" #   ..$ dispersionType                   :List of 1 #   .. ..$ value: chr \"ENDPOINT_DISPERSION.standardDeviation\" #   ..$ categories                       : chr \"\" #   ..$ armReportingGroups               : chr \"\" #   ..$ subjectAnalysisSetReportingGroups: chr \"\" #   ..$ statisticalAnalyses              : chr \"\"    # All nested data are transformed to a long, # name-value data.frame (resulting in several # hundred rows per trial record): long_result <- dfTrials2Long(df = result) # Total 160875 rows, 154 unique names of variables  # 3. Obtain values for fields of interest where # they related to measures of interest. The # parameters can be regular expressions. dor <- dfName2Value(   df = long_result,   wherename = paste0(     \"clinical_results.outcome_list.outcome.measure.title|\",     \"endPoints.endPoint.title\"   ),   wherevalue = \"duration of response\",   valuename = paste0(     \"clinical_results.*category_list.category.measurement_list.measurement.value|\",     \"endPoints.*armReportingGroup.tendencyValues.tendencyValue.value\"   ) ) # Returning values for 6 out of 124 trials  # Duration of response has been reported variably in # months and days. Here, just select trials reporting # duration of response in months: dor <- dor[   grepl(\"months\",     dfName2Value(       df = long_result,       wherename = paste0(         \"clinical_results.*outcome.measure.title|\",         \"endPoints.endPoint.title\"       ),       wherevalue = \"duration of response\",       valuename = paste0(         \"clinical_results.*measure.units|\",         \"endPoints.endPoint.unit\"       )     )[[\"value\"]],     ignore.case = TRUE   ), ] # Returning values for 11 out of 124 trials  # the identifier is generated to identify repeated and # nested elements in a trial, so that it permits to # find the valuename that corresponds to the item # for which wherename has wherevalue) dor[, c(\"_id\", \"identifier\", \"value\")] #                   _id identifier   value # 1   2010-019348-37-IT        8.2     7.0 # 2   2010-019348-37-IT        8.3     8.1 # 5   2013-003595-12-SK        6.2   999.0 # 6   2013-003595-12-SK        6.3   999.0 # 7   2013-003595-12-SK        6.4   999.0 # 8   2013-003595-12-SK        6.5   999.0 # 9   2013-003595-12-SK        6.6   999.0 # 12 2014-005674-11-3RD        3.4 99999.0 # 13  2015-000230-29-DE      5.1.1 99999.0 # 16  2015-000230-29-DE      5.1.4 99999.0 # 17  2015-000230-29-DE      5.1.5 99999.0 # 18  2015-000230-29-DE      5.1.6 99999.0 # 19  2015-000230-29-DE      5.1.7     5.0 # 20  2015-000230-29-DE      5.1.8    60.6 # 23  2015-000230-29-DE      5.2.2    34.5 # 24  2015-000230-29-DE      5.2.3    18.2"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_summarise.html","id":"analysing-primary-endpoints","dir":"Articles","previous_headings":"","what":"Analysing primary endpoints","title":"Summarise and analyse clinical trial information","text":"Text analysis used many fields trial information registers. example simply categorise type primary endpoint. addition, number subjects extracted compared type primary endpoint.","code":"# Several \"measure\" entries are in \"primary_outcome\". # They are concatenated into a list when specifying # the JSON path \"primary_outcome.measure\" result <- dbGetFieldsIntoDf(   c(     # CTGOV     \"primary_outcome.measure\",     \"enrollment\",     # EUCTR     \"e51_primary_end_points\",     # \"f11_trial_has_subjects_under_18\"     \"f11_number_of_subjects_for_this_age_range\"   ),   con = db )  # De-duplicate result <- result[   result[[\"_id\"]] %in%     dbFindIdsUniqueTrials(con = db), ]  # Merge primary endpoint (pep) result$pep <- dfMergeVariablesRelevel(   df = result,   colnames =     c(       \"primary_outcome.measure\",       \"e51_primary_end_points\"     ) )  # Merge number of subjects result$nsubj <- dfMergeVariablesRelevel(   df = result,   colnames =     c(       \"enrollment\",       \"f11_number_of_subjects_for_this_age_range\"     ) )  # For primary endpoint of interest, # use regular expression on text: result$pep_is_efs <- grepl(   pattern = \"((progression|event|relapse|recurrence|disease)[- ]free)|pfs|dfs|efs)\",   x = result$pep,   ignore.case = TRUE )  # Tabulate table(result$pep_is_efs) # FALSE  TRUE #   208    26  # Plot library(ggplot2) ggplot(   data = result,   aes(     x = nsubj,     y = pep_is_efs   ) ) +   geom_boxplot() +   scale_x_log10() # Warning message: # Removed 24 rows containing non-finite values (`stat_boxplot()`).   ggsave(\"vignettes/boxpep.png\", width = 6, height = 4)"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_summarise.html","id":"analysis-methods-and-p-values","dir":"Articles","previous_headings":"","what":"Analysis methods and p values","title":"Summarise and analyse clinical trial information","text":"","code":"# helper  normalise_string <- function(x) {      x <- gsub(\",\", \"\",  x)   x <- gsub(\"-\", \" \", x)   x <- tolower(x)   x <- tools::toTitleCase(x)   x <- gsub(\"[ ]+\", \" \", x)   x <- trimws(x)   x    }  # get trials into database ctrLoadQueryIntoDb(   queryterm = paste0(\"https://clinicaltrials.gov/ct2/results?rslt=With&age=0&intr=Drug&\",                       \"phase=1&phase=2&strd_s=01%2F01%2F2010&strd_e=12%2F31%2F2012\"),    con = db)  # get result set result <- dbGetFieldsIntoDf(   c(\"start_date\", \"detailed_description.textblock\", \"official_title\", \"eligibility.maximum_age\",     \"study_design_info.allocation\", \"primary_outcome.measure\", \"arm_group.arm_group_type\",      \"clinical_results.outcome_list.outcome.analysis_list.analysis.method\",     \"clinical_results.outcome_list.outcome.analysis_list.analysis.p_value\",     \"clinical_results.outcome_list.outcome.analysis_list.analysis.param_type\",     \"clinical_results.outcome_list.outcome.analysis_list.analysis.non_inferiority_type\",     \"clinical_results.baseline.analyzed_list.analyzed.units\",      \"clinical_results.baseline.analyzed_list.analyzed.count_list.count.value\"   ),    con = db)  # number of paticipants (last number is typically all groups summed up) # also see README.Rmd for alternative way, summing up non-total groups result$totalparticipants <- vapply(   result[[\"clinical_results.baseline.analyzed_list.analyzed.count_list.count.value\"]],   FUN = function(x) rev(x)[1], numeric(1L))  # first reported p value for primary endpoint analysis result$pvalueprimaryanalysis <- vapply(   result[[\"clinical_results.outcome_list.outcome.analysis_list.analysis.p_value\"]],   FUN = function(x) as.numeric(trimws(gsub(\"[<>=]\", \"\", strsplit(x, \" / \")[[1]][1]))), numeric(1))  # statistical method used for primary endpoint analysis result$methodprimaryanalysis <- vapply(     result[[\"clinical_results.outcome_list.outcome.analysis_list.analysis.method\"]],     FUN = function(x) normalise_string(strsplit(x, \" / \")[[1]][1]), character(1))    # based on allocation arms, keep trials that are likely to investigate safety and efficacy result$controlled <- grepl(   \"Placebo|No Intervention\",    result$arm_group.arm_group_type, ignore.case = TRUE) table(result$controlled) # FALSE  TRUE  #   676   323 result <- subset(result, controlled == TRUE)  # http://varianceexplained.org/statistics/interpreting-pvalue-histogram/ # http://www.pnas.org/content/100/16/9440.full # plot p values library(ggplot2) ggplot(result, aes(pvalueprimaryanalysis)) +    stat_ecdf(geom = \"step\") +   labs(title = \"Paediatric phase 2 or 3 interventional trials\\nwith randomisation to placebo or to no intervention\",         x = \"Range of p values\",         y = \"Empirical cumulative density of p values\\nof primary endpoint results\")  ggsave(\"vignettes/phase23_paed_p_values.png\", width = 6, height = 4)  # plot sample size v p value ggplot(result, aes(x = totalparticipants, y = pvalueprimaryanalysis)) +   geom_point() +    ylim(0, 1) +    xlim(0, 1000) +    scale_x_log10() ggsave(\"vignettes/phase23_paed_p_values_participants.png\", width = 6, height = 4)  # statistical method used for primary endpoint analysis tmp <- table(result$methodprimaryanalysis) tmp <- tmp[rev(order(tmp))] tmp <- data.frame(tmp) knitr::kable(tmp[1:10,])"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_summarise.html","id":"investigational-or-authorised-medicinal-product","dir":"Articles","previous_headings":"","what":"Investigational or authorised medicinal product?","title":"Summarise and analyse clinical trial information","text":"information status authorisation (licensing) medicine used trial recorded EUCTR field dimp.d21_imp_to_be_used_in_the_trial_has_a_marketing_authorisation. corresponding field CTGOV known. status tree starting dimp element.","code":"# library(dplyr)  # Get results result <- dbGetFieldsIntoDf(   fields =     c(       \"a1_member_state_concerned\",       \"n_date_of_competent_authority_decision\",       \"dimp.d21_imp_to_be_used_in_the_trial_has_a_marketing_authorisation\",       \"x6_date_on_which_this_record_was_first_entered_in_the_eudract_database\",       \"f422_in_the_whole_clinical_trial\",       \"a2_eudract_number\"     ),   con = db )  # Find first date of authorisation in EU member state tmp <- aggregate(   result[[\"n_date_of_competent_authority_decision\"]],   by = list(result[[\"a2_eudract_number\"]]),   FUN = function(x) min(x) ) result <- merge(   x = result,   y = tmp,   by.x = \"a2_eudract_number\",   by.y = \"Group.1\",   all.x = TRUE ) result %<>%    rowwise() %>%    mutate(startdatefirst = min(     x, x6_date_on_which_this_record_was_first_entered_in_the_eudract_database, na.rm = TRUE))  # Now de-duplicate result <- result[   result[[\"_id\"]] %in%     dbFindIdsUniqueTrials(       include3rdcountrytrials = FALSE,       con = db     ), ]  # How many of the investigational medicinal product(s) # used in the trial are authorised? number_authorised <- sapply(   result[[\"dimp.d21_imp_to_be_used_in_the_trial_has_a_marketing_authorisation\"]],   function(i) length(i[i]) ) table(number_authorised, exclude = \"\") # number_authorised #  0  1  2  3  4  6  8  # 22 12  5  2  1  1  1 result[[\"any_authorised\"]] <- number_authorised > 0L  # Plot library(ggplot2) library(scales) ggplot(   data = result,   aes(     x = startdatefirst,     fill = any_authorised   ) ) +   scale_x_date(     breaks = breaks_width(width = \"2 years\"),     labels = date_format(\"%Y\")   ) +   geom_histogram(binwidth = 2 * 365.25) +   labs(     title = \"Neuroblastoma trials in EU\",     x = \"Year of trial authorisation (or entered in EUCTR)\",     y = \"Number of trials\",     fill = \"Medicine\\nauthorised?\"   ) ggsave(\"vignettes/nbtrials.png\", width = 6, height = 4)"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_summarise.html","id":"analyses-using-aggregation-pipeline-and-mapreduce","dir":"Articles","previous_headings":"","what":"Analyses using aggregation pipeline and mapreduce","title":"Summarise and analyse clinical trial information","text":"example analysis functions can run directly MongoDB server, fast consume R resources.","code":"# Load library for database access library(mongolite)  # Create R object m to access the # collection db created above: m <- mongo(   url = paste0(db[[\"url\"]], \"/\", db[[\"db\"]]),   collection = db[[\"collection\"]] )  # Number of records in  collection: m$count() # [1] 458  # Number of EUCTR records, using JSON for query: m$count(query = '{\"_id\": {\"$regex\": \"[0-9]{4}-[0-9]{6}-[0-9]{2}\",                  \"$options\": \"i\"}}') # [1] 241  # Alternative: m$count(query = '{\"ctrname\": \"EUCTR\"}') # [1] 241  # Number of CTGOV records: m$count(query = '{\"_id\": {\"$regex\": \"NCT[0-9]{8}\",                  \"$options\": \"i\"}}') # [1] 216  # Alternative: m$count(query = '{\"ctrname\": \"CTGOV\"}') # [1] 216  # To best define regular expressions for analyses, # inspect the field (here, primary_outcome.measure): # Regular expressions (\"$regex\") are case insensitive (\"i\") head(   m$distinct(     key = \"primary_outcome.measure\",     query = '{\"ctrname\": \"CTGOV\"}'   ) ) # [1] \"- To demonstrate that 123I-mIBG planar scintigraphy is sensitive... # [2] \"1-year Progression-free Survival\"                                                                                                                               # [3] \"AUC0-24 Post-Dose of Venetoclax\"                                                                                                                                # [4] \"Abemaciclib Maximum Tolerated Dose (MTD) for Diffuse Intrinsic Pontine Glioma (DIPG)\"                                                                           # [5] \"Abemaciclib Maximum Tolerated Dose (MTD) for Recurrent/Refractory Solid Tumors\"                                                                                 # [6] \"Ability of iodine I 131 metaiodobenzylguanidine to provide palliative therapy\""},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_summarise.html","id":"aggregation","dir":"Articles","previous_headings":"Analyses using aggregation pipeline and mapreduce","what":"Aggregation","title":"Summarise and analyse clinical trial information","text":"following example uses aggregation pipeline MongoDB. See details mongo’s aggregation pipleline: https://docs.mongodb.org/manual/core/aggregation-pipeline/","code":"# # Total count of PFS, EFS, RFS or DFS out <- m$aggregate(   # Count number of documents in collection that   # matches in primary_outcome.measure the   # regular expression,   pipeline =     '[{\"$match\": {\"primary_outcome.measure\":       {\"$regex\": \"(progression|event|relapse|recurrence|disease)[- ]free\",                  \"$options\": \"i\"}}},       {\"$group\": {\"_id\": \"null\", \"count\": {\"$sum\": 1}}}]' ) out #    _id count # 1 null    18  # List records of trials with overall survival # as primary endpoint, and list start date out <- m$aggregate(   pipeline =     '[{\"$match\": {\"primary_outcome.measure\":       {\"$regex\": \"overall survival\", \"$options\": \"i\"}}},       {\"$project\": {\"_id\": 1, \"start_date\": 1}}]' ) head(out) #           _id      start_date # 1 NCT00445965    January 2006 # 2 NCT00499616 October 8, 2007 # 3 NCT00793845     August 2008 # 4 NCT00923351    June 2, 2007"},{"path":"https://rfhb.github.io/ctrdata/articles/ctrdata_summarise.html","id":"mapreduce","dir":"Articles","previous_headings":"Analyses using aggregation pipeline and mapreduce","what":"Mapreduce","title":"Summarise and analyse clinical trial information","text":"following examples uses map-reduce operation MongoDB. Note deprecated starting MongoDB 5. information: https://docs.mongodb.com/manual/core/map-reduce/ Thus, query expressed aggregation pipeline.","code":"# Count number of trials by number of study # participants in bins of hundreds of participants: hist <- m$mapreduce(   map = \"function() {emit(Math.floor(this.enrollment/100)*100, 1)}\",   reduce = \"function(id, counts) {return Array.sum(counts)}\" ) # read as: 141 trials had 0 to less than 100 participants hist[order(hist[[\"_id\"]]), ] #   _id value # 7   0   141 # 1 100    30 # 5 200     5 # 8 300     1 # 9 400     4 # 2 500     4 # 4 600     2 # 3 900     1 # 6 NaN   270  # same as aggregation pipeline, # which is more future proof  m$aggregate(pipeline = ' [   {     \"$project\": {       \"flooredNumber\": {         \"$multiply\": [           {             \"$floor\": {               \"$divide\": [                 {                   \"$toInt\": \"$enrollment\"                 },                 100               ]             }           },           100         ]       }     }   },   {     \"$group\": {       \"_id\": \"$flooredNumber\",       \"count\": {         \"$count\": {}       }     }   },   {     \"$sort\": {       \"_id\": 1     }   } ] ') #   _id count # 1  NA   270 # 2   0   141 # 3 100    30 # 4 200     5 # 5 300     1 # 6 400     4 # 7 500     4 # 8 600     2 # 9 900     1"},{"path":"https://rfhb.github.io/ctrdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ralf Herold. Author, maintainer.","code":""},{"path":"https://rfhb.github.io/ctrdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Herold R (2024). ctrdata: Retrieve Analyze Clinical Trials Public Registers. R package version 1.16.0.9000, https://cran.r-project.org/package=ctrdata.","code":"@Manual{,   title = {ctrdata: Retrieve and Analyze Clinical Trials in Public Registers},   author = {Ralf Herold},   year = {2024},   note = {R package version 1.16.0.9000},   url = {https://cran.r-project.org/package=ctrdata}, }"},{"path":"https://rfhb.github.io/ctrdata/index.html","id":"ctrdata-for-aggregating-and-analysing-clinical-trials","dir":"","previous_headings":"","what":"Retrieve and Analyze Clinical Trials in Public Registers","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"package ctrdata provides functions retrieving (downloading) information clinical trials public registers, aggregating analysing information; can used EU Clinical Trials Register (“EUCTR”, https://www.clinicaltrialsregister.eu/) ClinicalTrials.gov (“CTGOV” 🔔“CTGOV2”, see example) ISRCTN (https://www.isrctn.com/) EU Clinical Trials Information System (“CTIS”, https://euclinicaltrials.eu/ 🔔 example) motivation investigate understand trends design conduct trials, availability patients facilitate using detailed results research meta-analyses. ctrdata package R system, systems tools can used databases created package. README reviewed 2024-01-14 version 1.16.0.9000 (major improvement: remove dependencies external tools; development refactored dbGetFieldsIntoDf()).","code":""},{"path":"https://rfhb.github.io/ctrdata/index.html","id":"main-features","dir":"","previous_headings":"","what":"Main features","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Protocol- results-related trial information easily downloaded: Users define query register’s web interface, copy URL enter ctrdata retrieves one go trials found. script can automate copying query URL registers. Documents registers trials can also downloaded. Personal annotations can made downloading trials. Downloaded trial information transformed stored collection document-centric database, fast offline access. Information different registers can accumulated single collection. Uses DuckDB, PostgreSQL, RSQLite MongoDB, via R package nodbi: see section Databases . Re-run previous query collection retrieve update trial records. analyses, convenience functions ctrdata allow find synonyms active substance, identify unique (de-duplicated) trial records across registers, merge recode fields well easily access deeply-nested fields. Analysis can done R systems, using JSON-structured information database. Remember respect registers’ terms conditions (see ctrOpenSearchPagesInBrowser(copyright = TRUE)). Please cite package publication follows: “Ralf Herold (2024). ctrdata: Retrieve Analyze Clinical Trials Public Registers. R package version 1.16.0, https://cran.r-project.org/package=ctrdata”.","code":""},{"path":"https://rfhb.github.io/ctrdata/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Package ctrdata used : Lasch et al. (2022) Impact COVID‐19 Initiation Clinical Trials Europe United States. Clinical Pharmacology & Therapeutics, https://doi.org/10.1002/cpt.2534 Blogging Innovation coming paediatric research Cancer Research UK (2017) impact collaboration: value UK medical research EU science health","code":""},{"path":[]},{"path":"https://rfhb.github.io/ctrdata/index.html","id":"id_1-install-package-ctrdata-in-r","dir":"","previous_headings":"Installation","what":"1. Install package ctrdata in R","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Package ctrdata CRAN GitHub. Within R, use following commands install package ctrdata: commands also install package’s dependencies (jsonlite, httr, curl, clipr, xml2, nodbi, stringi, tibble, lubridate, jqr, dplyr, zip V8).","code":"# Install CRAN version: install.packages(\"ctrdata\")  # Alternatively, install development version: install.packages(\"devtools\") devtools::install_github(\"rfhb/ctrdata\", build_vignettes = TRUE)"},{"path":"https://rfhb.github.io/ctrdata/index.html","id":"id_2-script-to-automatically-copy-users-query-from-web-browser","dir":"","previous_headings":"Installation","what":"2. Script to automatically copy user’s query from web browser","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"optional; works registers supported ctrdata recommended CTIS URL web browser reflect parameters user specified querying register. web browser, install Tampermonkey browser extension, click “New user script” “Tools”, enter “Import URL” URL: https://raw.githubusercontent.com/rfhb/ctrdata/master/tools/ctrdataURLcopier.js last click “Install”. browser extension can disabled enabled user. enabled, URLs user’s queries registers automatically copied clipboard can pasted queryterm=... parameter function ctrLoadQueryIntoDb().","code":""},{"path":"https://rfhb.github.io/ctrdata/index.html","id":"overview-of-functions-in-ctrdata","dir":"","previous_headings":"","what":"Overview of functions in ctrdata","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"functions listed approximate order use user’s workflow (bold, main functions). See also package documentation overview.","code":""},{"path":"https://rfhb.github.io/ctrdata/index.html","id":"databases-for-use-with-ctrdata","dir":"","previous_headings":"","what":"Databases for use with ctrdata","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Package ctrdata retrieves trial information stores database collection, given connection object parameter con several ctrdata functions; connection object created slightly different ways four supported database backends can used ctrdata shown table. speed comparison, see nodbi documentation. Besides ctrdata functions , connection object can equally used functions packages, nodbi (last row table) , case MongoDB database backend, mongolite (see vignettes).","code":""},{"path":"https://rfhb.github.io/ctrdata/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Install R package ctrdata Retrieve clinical trial information Summarise analyse clinical trial information","code":""},{"path":"https://rfhb.github.io/ctrdata/index.html","id":"example-workflow","dir":"","previous_headings":"","what":"Example workflow","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"aim download protocol-related trial information tabulate trials’ status conduct. Attach package ctrdata: See help get started ctrdata: Information trial registers can used ctrdata: Open registers’ advanced search pages browser: Adjust search parameters execute search browser trials interest listed browser, copy address browser’s address bar clipboard Search used example: https://www.clinicaltrialsregister.eu/ctr-search/search?query=cancer&age=-18&phase=phase-one&status=completed Get address clipboard: 🔔 Queries trial registers can automatically copied clipboard (including “CTIS”, URL show query) using solution . Retrieve protocol-related information, transform save database: database collection specified first, using nodbi (see specify PostgreSQL, RSQlite, DuckDB MongoDB backend, see section Databases); , trial information retrieved loaded collection: hood, EUCTR plain text XML files EUCTR, CTGOV, ISRCTN converted using Javascript via V8 R NDJSON, imported database collection. Analyse Tabulate status trials part agreed paediatric development program (paediatric investigation plan, PIP). ctrdata functions return data.frame (tibble, package tibble loaded). Add records another register (CTGOV) collection 🔔current classic CTGOV website supported ctrdata since 2023-08-05. new website API introduced July 2023 (https://www.clinicaltrials.gov/) identified ctrdata CTGOV2. website API now called “classic” (https://classic.clinicaltrials.gov/) identified ctrdata CTGOV, backwards-compatible queries previously retrieved ctrdata. use trial identifier (e.g., NCT01234567) trial. consequence, queries trial retrieved using CTGOV CTGOV2 overwrite previous record trial, whether loaded CTGOV CTGOV2. Thus, single version (last retrieved) collection user’s database. Important differences exist field names contents information retrieved using CTGOV CTGOV2; see XML schemas CTGOV REST API CTGOV2. details, call help(\"ctrdata-registers\"). one reasons ctrdata handles situation two different registers. Search used example: https://www.clinicaltrials.gov/search?cond=Neuroblastoma&aggFilters=ages:child,results:,studyType:int Using example classic CTGOV: https://classic.clinicaltrials.gov/ct2/results?cond=neuroblastoma&rslt=&recrs=e&age=0&intr=Drug Add records third register (ISRCTN) collection Search used example: https://www.isrctn.com/search?q=neuroblastoma Add records fourth register (CTIS 🔔) collection Queries CTIS search interface can automatically copied clipboard user can paste queryterm, see . 2024-01-06, 410 trials publicly accessible CTIS. See download documents CTIS. Analysis across trials Show cumulative start trials time. Analysis across registers Result-related trial information Analyse simple result details (see vignette examples): Neuroblastoma trials Download documents: retrieve protocols, statistical analysis plans documents local folder ./files-.../","code":"library(ctrdata) help(\"ctrdata\") help(\"ctrdata-registers\") ctrOpenSearchPagesInBrowser()  # Please review and respect register copyrights: ctrOpenSearchPagesInBrowser(copyright = TRUE) q <- ctrGetQueryUrl() # * Using clipboard content as register query URL: https://www.clinicaltrialsregister.eu/ctr-search/search?query=cancer&age=under-18&phase=phase-one&status=completed # * Found search query from EUCTR: query=cancer&age=under-18&phase=phase-one&status=completed  q #                                                   query-term  query-register # 1 query=cancer&age=under-18&phase=phase-one&status=completed           EUCTR # Connect to (or newly create) an SQLite database # that is stored in a file on the local system: db <- nodbi::src_sqlite(   dbname = \"some_database_name.sqlite_file\",   collection = \"some_collection_name\" )  # Retrieve trials from public register: ctrLoadQueryIntoDb(   queryterm = q,   euctrresults = TRUE,   con = db ) # * Checking trials in EUCTR... # Retrieved overview, multiple records of 97 trial(s) from 5 page(s) to be downloaded (estimate: 5 MB) # (1/3) Downloading trials... # Note: register server cannot compress data, transfer takes longer (estimate: 30 s) # Download status: 5 done; 0 in progress. Total size: 7.91 Mb (100%)... done!              # (2/3) Converting to NDJSON (estimate: 2 s)... # (3/3) Importing records into database... # = Imported or updated 377 records on 97 trial(s)  # * Checking results if available from EUCTR for 97 trials:  # (1/4) Downloading and extracting results (. = data, F = file[s] and data, x = none): # Download status: 97 done; 0 in progress. Total size: 48.64 Mb (100%)... done!              # Download status: 21 done; 0 in progress. Total size: 84.53 Kb (308%)... done!              # Download status: 21 done; 0 in progress. Total size: 84.53 Kb (308%)... done!              # Download status: 21 done; 0 in progress. Total size: 84.53 Kb (308%)... done!              # F . . . . F . . F . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  # (2/4) Converting to NDJSON (estimate: 8 s)... # (3/4) Importing results into database (may take some time)... # (4/4) Results history: not retrieved (euctrresultshistory = FALSE) # = Imported or updated results for 76 trials # No history found in expected format. # Updated history (\"meta-info\" in \"some_collection_name\") # $n # [1] 377 # Get all records that have values in the fields of interest: result <- dbGetFieldsIntoDf(   fields = c(     \"a7_trial_is_part_of_a_paediatric_investigation_plan\",     \"p_end_of_trial_status\",     \"a2_eudract_number\"   ),   con = db )  # Find unique (deduplicated) trial identifiers for trials that have more than # one record, for example for several EU Member States or in several registers: uniqueids <- dbFindIdsUniqueTrials(con = db) # Searching for duplicate trials...  #  - Getting all trial identifiers (may take some time), 369 found in collection #  - Finding duplicates among registers' and sponsor ids... #  - 274 EUCTR _id were not preferred EU Member State record for 95 trials #  - Keeping 95 / 0 / 0 / 0 / 0 records from EUCTR / CTGOV / CTGOV2 / ISRCTN / CTIS # = Returning keys (_id) of 95 records in collection \"some_collection_name\"  # Keep only unique / de-duplicated records: result <- subset(   result,   subset = `_id` %in% uniqueids )  # Tabulate the selected clinical trial information: with(   result,   table(     p_end_of_trial_status,     a7_trial_is_part_of_a_paediatric_investigation_plan   ) ) #                           a7_trial_is_part_of_a_paediatric_investigation_plan # p_end_of_trial_status      FALSE TRUE #                                1    1 #   Completed                   48   21 #   GB - no longer in EU/EEA     1    1 #   Ongoing                      5    1 #   Prematurely Ended            2    2 #   Restarted                    0    1 #   Temporarily Halted           1    1 # Retrieve trials from another register: ctrLoadQueryIntoDb(   queryterm = \"cond=Neuroblastoma&aggFilters=ages:child,results:with,studyType:int\",   register = \"CTGOV2\",   con = db ) # * Appears specific for CTGOV REST API 2.0.0 # * Found search query from CTGOV2: cond=Neuroblastoma&aggFilters=ages:child,results:with,studyType:int # * Checking trials using CTGOV API 2.0.0.-test, found 91 trials # (1/3) Downloading in 1 batch(es) (max. 1000 trials each; estimate: 9.1 MB total) # Download status: 1 done; 0 in progress. Total size: 8.80 Mb (829%)... done!              # (2/3) Converting to NDJSON... # (3/3) Importing records into database... # JSON file #: 1 / 1                                # = Imported or updated 91 trial(s) # Updated history (\"meta-info\" in \"some_collection_name\") # Retrieve trials: ctrLoadQueryIntoDb(   queryterm = \"https://classic.clinicaltrials.gov/ct2/results?cond=neuroblastoma&rslt=With&recrs=e&age=0&intr=Drug\",   con = db ) # * Appears specific for CTGOV CLASSIC # * Found search query from CTGOV: cond=neuroblastoma&rslt=With&recrs=e&age=0&intr=Drug # * Checking trials in CTGOV classic... # (1/3) Downloading trial file... # Download status: 1 done; 0 in progress. Total size: 812.73 Kb (100%)... done!              # (2/3) Converting to NDJSON (estimate: 3 s)... # (3/3) Importing records into database... # = Imported or updated 58 trial(s)                 # Running dbCTRUpdateQueryHistory... # Running dbQueryHistory ... # Number of queries in history of \"some_collection_name\": 3 # Number of records in collection \"some_collection_name\": 469 # Updated history (\"meta-info\" in \"some_collection_name\") # Retrieve trials from another register: ctrLoadQueryIntoDb(   queryterm = \"https://www.isrctn.com/search?q=neuroblastoma\",   con = db ) # * Found search query from ISRCTN: q=neuroblastoma # * Checking trials in ISRCTN... # Retrieved overview, records of 9 trial(s) are to be downloaded (estimate: 0.2 MB) # (1/3) Downloading trial file...  # Download status: 1 done; 0 in progress. Total size: 93.12 Kb (100%)... done!              # (2/3) Converting to NDJSON (estimate: 0.05 s)... # (3/3) Importing records into database... # = Imported or updated 9 trial(s)                  # Updated history (\"meta-info\" in \"some_collection_name\") # See how many trials are in CTIS publicly accessible: ctrLoadQueryIntoDb(   queryterm = \"\",   register = \"CTIS\",   only.count = TRUE,   con = db ) # $n # [1] 464  # Retrieve trials from another register: ctrLoadQueryIntoDb(   queryterm = \"https://euclinicaltrials.eu/app/#/search?ageGroupCode=2\",   con = db ) # * Found search query from CTIS: ageGroupCode=2 # * Checking trials in CTIS... # (1/5) Downloading trials list . found 46 trials # (2/5) Downloading and processing part I and parts II... (estimate: 9 Mb) # Download status: 46 done; 0 in progress. Total size: 9.25 Mb (100%)... done!              # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  # (3/5) Downloading and processing additional data: # publicevents, summary, layperson, csr, cm, inspections, publicevaluation (estimate: 3 Mb) # Download status: 95 done; 0 in progress. Total size: 2.93 Mb (100%)... done!              # 46 # (4/5) Importing records into database... # (5/5) Updating with additional data: . .          # = Imported / updated 46 / 46 / 46 records on 46 trial(s) # Updated history (\"meta-info\" in \"some_collection_name\")  allFields <- dbFindFields(\".*\", db) # Finding fields in database collection (may take some time) . . . . . # Field names cached for this session. length(allFields[grepl(\"CTIS\", names(allFields))]) # [1] 3183  allFields[grepl(\"defer|consideration$\", allFields, ignore.case = TRUE)] #                                                                                            CTIS  #                                                                           \"hasDeferrallApplied\"  #                                                                                            CTIS  # \"publicEvaluation.partIIEvaluationList.partIIRfiConsiderations.rfiConsiderations.consideration\"  #                                                                                            CTIS  #                       \"publicEvaluation.partIRfiConsiderations.rfiConsiderations.consideration\"  #                                                                                            CTIS  #                  \"publicEvaluation.partIRfiConsiderations.rfiConsiderations.part1Consideration\"  #                                                                                            CTIS  #                  \"publicEvaluation.validationRfiConsiderations.rfiConsiderations.consideration\"  #                                                                                            CTIS  #             \"publicEvaluation.validationRfiConsiderations.rfiConsiderations.part1Consideration\"    dbGetFieldsIntoDf(\"publicEvaluation.partIRfiConsiderations.rfiConsiderations.consideration\", db)[1,2] # publicEvaluation.partIRfiConsiderations.rfiConsiderations.consideration # In(EX)clusion criteria: An adequate definition of WOCBP or postmenopausal woman  # is missing and should be added to the protocol. / The rationale for the treatment duration of 7 to  # 18 weeks cannot be followed. No data are available for this short time period and nivolumab treatment.  # The shortest duration tested so far in 1 year in adjuvant or maintenance treatment protocol.  # The sponsor is asked to justify and substantiate his assumption that this treatment duration is  # adequate with respective data. / E: Information regarding the special clinical conditions for  # conducting clinical trials with minors, \\nsee Article 32 Par. 1 lit e) to g) of Regulation (EU)  # 536/2014 is missing. Please revise the protocol accordingly. So it is indicated to include the  # patients older than 18 years first and in case of positive results the planned younger patients  # could follow.\\nStatistical Comment: The statistical analyses are missing in the trial protocol.  # Biometric adequate is a restriction to descriptive evaluations. A sequential evaluation is  # recommended (adults first and then children). The protocol has to be amended accordingly /  # Discontinuation criteria for study subjects and clinical trial termination criteria are missing  # and have to be added. Please amend. [...]  # use an alternative to dbGetFieldsIntoDf() allData <- nodbi::docdb_query(src = db, key = db$collection, query = '{\"ctrname\":\"CTIS\"}') # names of top-level data items sort(names(allData)) #  [1] \"_id\"                           \"ageGroup\"                      \"applications\"                  #  [4] \"authorizationDate\"             \"authorizedPartI\"               \"authorizedPartsII\"             #  [7] \"coSponsors\"                    \"ctNumber\"                      \"ctrname\"                       # [10] \"ctStatus\"                      \"decisionDate\"                  \"eeaEndDate\"                    # [13] \"eeaStartDate\"                  \"endDateEU\"                     \"eudraCtInfo\"                   # [16] \"gender\"                        \"hasAmendmentApplied\"           \"hasDeferrallApplied\"           # [19] \"id\"                            \"initialApplicationId\"          \"isRmsTacitAssignment\"          # [22] \"lastUpdated\"                   \"memberStatesConcerned\"         \"mscTrialNotificationsInfoList\" # [25] \"primarySponsor\"                \"publicEvaluation\"              \"record_last_import\"            # [28] \"recruitmentStatus\"             \"sponsorType\"                   \"startDateEU\"                   # [31] \"submissionDate\"                \"therapeuticAreas\"              \"title\"                         # [34] \"totalNumberEnrolled\"           \"totalPartIISubjectCount\"       \"trialCountries\"                # [37] \"trialEndDate\"                  \"trialGlobalEnd\"                \"trialPhase\"                    # [40] \"trialStartDate\"   format(object.size(allData), \"MB\") # [1] \"47.2 Mb\" # use helper library library(dplyr) library(magrittr) library(tibble) library(purrr) library(tidyr)  # get names of all fields / variables in the collaction length(dbFindFields(\".*\", con = db)) # [1] 4788  dbFindFields(\"(start.*date)|(date.*decision)\", con = db) # Using cache of fields.  # - Get trial data result <- dbGetFieldsIntoDf(   fields = c(     \"ctrname\",     \"record_last_import\",     # CTGOV     \"start_date\",     \"overall_status\",     # CTGOV2     \"protocolSection.statusModule.startDateStruct.date\",     \"protocolSection.statusModule.overallStatus\",     # EUCTR     \"n_date_of_competent_authority_decision\",     \"trialInformation.recruitmentStartDate\", # needs above: 'euctrresults = TRUE'     \"p_end_of_trial_status\",      # ISRCTN     \"trialDesign.overallStartDate\",     \"trialDesign.overallEndDate\",     # CTIS     \"authorizedPartI.trialDetails.trialInformation.trialDuration.estimatedRecruitmentStartDate\",     \"ctStatus\"   ),   con = db )  # - Deduplicate trials and obtain unique identifiers  #   for trials that have records in several registers # - Calculate trial start date # - Calculate simple status for ISRCTN result %<>%    filter(`_id` %in% dbFindIdsUniqueTrials(con = db)) %>%    rowwise() %>%    mutate(start = max(c_across(matches(\"(date.*decision)|(start.*date)\")), na.rm = TRUE)) %>%    mutate(isrctnStatus = if_else(trialDesign.overallEndDate < record_last_import, \"Ongoing\", \"Completed\")) %>%    ungroup()    # - Merge fields from different registers with re-leveling statusValues <- list(   \"ongoing\" = c(     # EUCTR     \"Recruiting\", \"Active\", \"Ongoing\",      \"Temporarily Halted\", \"Restarted\",     # CTGOV     \"Active, not recruiting\", \"Enrolling by invitation\",      \"Not yet recruiting\", \"ACTIVE_NOT_RECRUITING\",     # CTIS     \"Ongoing, recruiting\", \"Ongoing, recruitment ended\",      \"Ongoing, not yet recruiting\", \"Authorised, not started\"   ),   \"completed\" = c(\"Completed\", \"COMPLETED\"),   \"other\" = c(\"GB - no longer in EU/EEA\", \"Trial now transitioned\",               \"Withdrawn\", \"Suspended\", \"No longer available\",                \"Terminated\", \"TERMINATED\", \"Prematurely Ended\") ) result[[\"state\"]] <- dfMergeVariablesRelevel(   df = result,    colnames = c(     \"overall_status\",  \"p_end_of_trial_status\",                                 \"ctStatus\", \"isrctnStatus\"   ),   levelslist = statusValues )  # - Plot example library(ggplot2) ggplot(result) +    stat_ecdf(aes(x = start, colour = state)) ggsave(   filename = \"man/figures/README-ctrdata_across_registers.png\",   width = 5, height = 3, units = \"in\" ) # Get all records that have values in any of the specified fields: result <- dbGetFieldsIntoDf(   fields = c(     \"clinical_results.baseline.analyzed_list.analyzed.count_list.count.value\",     \"clinical_results.baseline.group_list.group.title\",     \"clinical_results.baseline.analyzed_list.analyzed.units\",     \"number_of_arms\",     \"study_design_info.allocation\",     \"location.facility.name\",     \"condition\"   ),   con = db )  # Mangle to calculate: # - which columns with values for group counts are not labelled Total # - what are the numbers in each of the groups etc.  result %<>%    rowwise() %>%    mutate(     is_randomised = case_when(       study_design_info.allocation == \"Randomized\" ~ TRUE,       study_design_info.allocation == \"Non-Randomized\" ~ FALSE,        number_of_arms == 1L ~ FALSE     ),     which_not_total = list(which(strsplit(       clinical_results.baseline.group_list.group.title, \" / \")[[1]] != \"Total\")),     num_sites = length(strsplit(location.facility.name, \" / \")[[1]]),     num_participants = sum(as.integer(clinical_results.baseline.analyzed_list.analyzed.count_list.count.value[which_not_total])),     num_arms_or_groups = max(number_of_arms, length(which_not_total))   )  # Inspect: # View(result)  # Example plot: library(ggplot2) ggplot(data = result) +   labs(     title = \"Trials including patients with a neuroblastoma\",     subtitle = \"ClinicalTrials.Gov, trials with results\"   ) +   geom_point(     mapping = aes(       x = num_sites,       y = num_participants,       size = num_arms_or_groups,       colour = is_randomised     )   ) +   scale_x_log10() +   scale_y_log10() +   labs(     x = \"Number of sites\",     y = \"Total number of participants\",     colour = \"Randomised?\",      size = \"# Arms / groups\") ggsave(   filename = \"man/figures/README-ctrdata_results_neuroblastoma.png\",   width = 5, height = 3, units = \"in\" ) ### EUCTR document files can be downloaded when results are requested # All files are downloaded and saved (documents.regexp is not used)  ctrLoadQueryIntoDb(   queryterm = \"query=cancer&age=under-18&phase=phase-one\",   register = \"EUCTR\",   euctrresults = TRUE,   documents.path = \"./files-euctr/\",   con = db ) # * Found search query from EUCTR: query=cancer&age=under-18&phase=phase-one # [...] # Created directory ./files-euctr/ # Downloading trials... # [...] # = Imported or updated results for 114 trials # = documents saved in './files-euctr'   ### CTGOV files are downloaded, here corresponding to the default of  # documents.regexp = \"prot|sample|statist|sap_|p1ar|p2ars|ctalett|lay|^[0-9]+ \" ctrLoadQueryIntoDb(   queryterm = \"cond=Neuroblastoma&type=Intr&recrs=e&phase=1&u_prot=Y&u_sap=Y&u_icf=Y\",   register = \"CTGOV\",   documents.path = \"./files-ctgov/\",   con = db ) # * Found search query from CTGOV: cond=Neuroblastoma&type=Intr&recrs=e&phase=1&u_prot=Y&u_sap=Y&u_icf=Y # [...] # Downloading documents into 'documents.path' = ./files-ctgov/ # - Created directory ./files-ctgov # Applying 'documents.regexp' to 14 documents # Downloading 10 documents: # Download status: 10 done; 0 in progress. Total size: 38.10 Mb (100%)... done!              # Newly saved 10 document(s) for 7 trial(s); 0 document(s) for 0 trial(s) already existed   ### CTGOV2 files are downloaded, here corresponding to the default of  # documents.regexp = \"prot|sample|statist|sap_|p1ar|p2ars|ctalett|lay|^[0-9]+ \" ctrLoadQueryIntoDb(   queryterm = \"https://clinicaltrials.gov/search?cond=neuroblastoma&aggFilters=phase:1,results:with\",   documents.path = \"./files-ctgov2/\",   con = db ) # * Found search query from CTGOV2: cond=neuroblastoma&aggFilters=phase:1,results:with # [...] # * Downloading documents into 'documents.path' = ./files-ctgov2/ # - Created directory ./files-ctgov2 # - Creating subfolder for each trial # - Applying 'documents.regexp' to 30 documents # - Downloading 26 missing documents # Download status: 26 done; 0 in progress. Total size: 70.12 Mb (100%)... done!              # = Newly saved 26 document(s) for 19 trial(s); 0 document(s) for 0 trial(s) already  # existed in ./files-ctgov2   ### ISRCTN files are downloaded, here corresponding to the default of  # documents.regexp = \"prot|sample|statist|sap_|p1ar|p2ars|ctalett|lay|^[0-9]+ \" ctrLoadQueryIntoDb(   queryterm = \"https://www.isrctn.com/search?q=alzheimer\",   documents.path = \"./files-isrctn/\",   con = db ) # * Found search query from ISRCTN: q=alzheimer # [...] # * Downloading documents into 'documents.path' = ./files-isrctn/ # - Created directory /Users/ralfherold/Daten/mak/r/emea/ctrdata/files-isrctn # - Creating subfolder for each trial # - Applying 'documents.regexp' to 34 documents # - Downloading 23 missing documents # Download status: 23 done; 0 in progress. Total size: 10.42 Mb (100%)... done!              # Download status: 2 done; 0 in progress. Total size: 6.53 Kb (100%)... done!              # Download status: 2 done; 0 in progress. Total size: 6.53 Kb (100%)... done!              # Download status: 2 done; 0 in progress. Total size: 6.53 Kb (100%)... done!              # = Newly saved 21 document(s) for 9 trial(s); 0 document(s) for 0 trial(s) already  # existed in ./files-isrctn   ### CTIS files are downloaded, here corresponding to the default of  # documents.regexp = \"prot|sample|statist|sap_|p1ar|p2ars|ctalett|lay|^[0-9]+ \" ctrLoadQueryIntoDb(   queryterm = \"https://euclinicaltrials.eu/app/#/search?ageGroupCode=2\",   documents.path = \"./files-ctis/\",   con = db ) # * Found search query from CTIS: ageGroupCode=2 # [...] # * Downloading documents into 'documents.path' = ./files-ctis/ # - Created directory ./files-ctis # - Getting ids of lists with document information # - Downloading 939 lists with document information (estimate: 18.78 Mb) # Download status: 939 done; 0 in progress. Total size: 12.82 Mb (100%)... done!              # Download status: 294 done; 0 in progress. Total size: 2.16 Mb (100%)... done!              # - Processing document information in 939 lists # - Creating subfolder for each trial # - Applying 'documents.regexp' to 4733 documents # - Downloading 440 missing documents # Download status: 440 done; 0 in progress. Total size: 115.61 Mb (100%)... done!              # Download status: 211 done; 0 in progress. Total size: 148.06 Mb (100%)... done!              # Download status: 81 done; 0 in progress. Total size: 130.86 Mb (100%)... done!              # Download status: 47 done; 0 in progress. Total size: 690 b (100%)... done!              # = Newly saved 393 document(s) for 39 trial(s) (latest versions only, deduplicated  # if e.g. in application and authorised part); 0 document(s) for 0 trial(s) already  # existed in./files-ctis"},{"path":"https://rfhb.github.io/ctrdata/index.html","id":"tests","dir":"","previous_headings":"","what":"Tests","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"See also https://app.codecov.io/gh/rfhb/ctrdata/tree/master/R","code":"tinytest::test_all() # test_ctrdata_ctrfindactivesubstance.R    4 tests OK 2.9s # test_ctrdata_mongo_local_ctgov.R   55 tests OK 43.5s # test_ctrdata_mongo_local_ctgov2.R   32 tests OK 38.0s # test_ctrdata_mongo_local_ctis.R  165 tests OK 7.4s    # test_ctrdata_mongo_local_euctr.R  109 tests OK 1.1s # test_ctrdata_mongo_local_isrctn.R   37 tests OK 14.2s # test_ctrdata_other_functions.R   63 tests OK 2.2s # test_ctrdata_sqlite_ctgov.R...   55 tests OK 55.0s # test_ctrdata_sqlite_ctgov2.R..   32 tests OK 44.7s # test_ctrdata_sqlite_ctis.R....  177 tests OK 6.1s       # test_ctrdata_sqlite_euctr.R...  107 tests OK 1.0s # test_ctrdata_sqlite_isrctn.R..   37 tests OK 14.1s # test_euctr_error_sample.R.....    8 tests OK 0.5s # All ok, 881 results (19m 11.1s)"},{"path":"https://rfhb.github.io/ctrdata/index.html","id":"future-features","dir":"","previous_headings":"","what":"Future features","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"See project outline https://github.com/users/rfhb/projects/1 Canonical definitions, filters, calculations works (since August 2023) data mangling analyses across registers, e.g. define study population, identify interventional trials, calculate study duration; public collaboration canonical scripts speed harmonising analyses. Authentication, expected required CTGOV2; specifications yet known (work yet started). Explore registers ICTRP (authentication needed), JPRN, jRCT, UMIN-CTR, ChiCTR (exploration continually ongoing; added value, terms conditions programmatic access vary; clear roadmap established yet). Retrieve previous versions protocol- results-related information (work yet started). challenge , apparently, initial versions queried historical versions can retrieved one--one structured format. Merge results-related fields retrieved different registers, corresponding endpoints (work yet started). challenge incomplete congruency different structure data fields.","code":""},{"path":"https://rfhb.github.io/ctrdata/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Data providers curators clinical trial registers. Please review respect copyrights terms conditions, see ctrOpenSearchPagesInBrowser(copyright = TRUE). Package ctrdata made possible building work done R, clipr. curl, dplyr, duckdb, httr, jqr, jsonlite, lubridate, mongolite, nodbi, RPostgres, RSQLite, rvest, stringi xml2.","code":""},{"path":"https://rfhb.github.io/ctrdata/index.html","id":"issues-and-notes","dir":"","previous_headings":"Acknowledgements","what":"Issues and notes","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Please file issues bugs . Also check handle closed issues, e.g. C stack usage close limit SSL certificate problem: unable get local issuer certificate Information trial registers may fully correct; see example publication CTGOV. attempts made harmonise field names registers (nevertheless, dfMergeVariablesRelevel() can used merge map several variables / fields one).","code":""},{"path":[]},{"path":"https://rfhb.github.io/ctrdata/index.html","id":"postgresql","dir":"","previous_headings":"Trial records’ JSON in databases","what":"PostgreSQL","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Example JSON representation PostgreSQL","code":""},{"path":"https://rfhb.github.io/ctrdata/index.html","id":"mongodb","dir":"","previous_headings":"Trial records’ JSON in databases","what":"MongoDB","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Example JSON representation MongoDB","code":""},{"path":"https://rfhb.github.io/ctrdata/index.html","id":"sqlite","dir":"","previous_headings":"Trial records’ JSON in databases","what":"SQLite","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Example JSON representation SQLite","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrDb.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and prepare nodbi connection object for ctrdata — ctrDb","title":"Check and prepare nodbi connection object for ctrdata — ctrDb","text":"Check prepare nodbi connection object ctrdata","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrDb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and prepare nodbi connection object for ctrdata — ctrDb","text":"","code":"ctrDb(con)"},{"path":"https://rfhb.github.io/ctrdata/reference/ctrDb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and prepare nodbi connection object for ctrdata — ctrDb","text":"con connection object, see section `Databases` ctrdata.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrDb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and prepare nodbi connection object for ctrdata — ctrDb","text":"Connection object list, collection  element root","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrFindActiveSubstanceSynonyms.html","id":null,"dir":"Reference","previous_headings":"","what":"Find synonyms of an active substance — ctrFindActiveSubstanceSynonyms","title":"Find synonyms of an active substance — ctrFindActiveSubstanceSynonyms","text":"active substance can identified recommended international nonproprietary name (INN), trade product name, company code(s). Retrieves names substance searched \"CTGOV\" querying given active substance.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrFindActiveSubstanceSynonyms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find synonyms of an active substance — ctrFindActiveSubstanceSynonyms","text":"","code":"ctrFindActiveSubstanceSynonyms(activesubstance = \"\")"},{"path":"https://rfhb.github.io/ctrdata/reference/ctrFindActiveSubstanceSynonyms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find synonyms of an active substance — ctrFindActiveSubstanceSynonyms","text":"activesubstance active substance, atomic character vector","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrFindActiveSubstanceSynonyms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find synonyms of an active substance — ctrFindActiveSubstanceSynonyms","text":"character vector active substance (input parameter)  synonyms, NULL active substance found may invalid","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrFindActiveSubstanceSynonyms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find synonyms of an active substance — ctrFindActiveSubstanceSynonyms","text":"","code":"if (FALSE) {  ctrFindActiveSubstanceSynonyms(activesubstance = \"imatinib\") # [1] \"imatinib\" \"gleevec\" \"sti 571\" \"glivec\" \"CGP 57148\" \"st1571\" }"},{"path":"https://rfhb.github.io/ctrdata/reference/ctrGetQueryUrl.html","id":null,"dir":"Reference","previous_headings":"","what":"Get query details — ctrGetQueryUrl","title":"Get query details — ctrGetQueryUrl","text":"Extracts query parameters register name parameter `url` clipboard, URL register search copied.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrGetQueryUrl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get query details — ctrGetQueryUrl","text":"","code":"ctrGetQueryUrl(url = \"\", register = \"\")"},{"path":"https://rfhb.github.io/ctrdata/reference/ctrGetQueryUrl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get query details — ctrGetQueryUrl","text":"url URL browser address bar. specified, clipboard contents checked suitable URL. automatically copying user's query register web browser clipboard, see . Can also contain query term dbQueryHistory()[\"query-term\"]. register Optional name register (one \"EUCTR\", \"CTGOV\", \"ISRCTN\" \"CTIS\") case `url` query term","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrGetQueryUrl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get query details — ctrGetQueryUrl","text":"data frame (tibble, tibble loaded) column names `query-term` `query-register`. data frame (tibble) can passed parameter `query-term` ctrLoadQueryIntoDb parameter `url` ctrOpenSearchPagesInBrowser.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrGetQueryUrl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get query details — ctrGetQueryUrl","text":"","code":"# user copied into the clipboard the URL from # the address bar of the browser that shows results # from a query in one of the trial registers try(ctrGetQueryUrl(), silent = TRUE)  # extract query parameters from search result URL # (URL was cut for the purpose of formatting only) ctrGetQueryUrl(     url = paste0(         \"https://classic.clinicaltrials.gov/ct2/results?\",         \"cond=&term=AREA%5BMaximumAge%5D+RANGE%5B0+days%2C+28+days%5D\",         \"&type=Intr&rslt=&age_v=&gndr=&intr=Drugs%2C+Investigational\",         \"&titles=&outc=&spons=&lead=&id=&cntry=&state=&city=&dist=\",         \"&locn=&phase=2&rsub=&strd_s=01%2F01%2F2015&strd_e=01%2F01%2F2016\",         \"&prcd_s=&prcd_e=&sfpd_s=&sfpd_e=&rfpd_s=&rfpd_e=&lupd_s=&lupd_e=&sort=\"     ) ) #> * Appears specific for CTGOV CLASSIC #> * Found search query from CTGOV: term=AREA[MaximumAge]+RANGE[0+days,+28+days]&type=Intr&intr=Drugs,+Investigational&phase=2&strd_s=01/01/2015&strd_e=01/01/2016 #>                                                                                                                       query-term #> 1 term=AREA[MaximumAge]+RANGE[0+days,+28+days]&type=Intr&intr=Drugs,+Investigational&phase=2&strd_s=01/01/2015&strd_e=01/01/2016 #>   query-register #> 1          CTGOV  ctrGetQueryUrl(\"https://www.clinicaltrialsregister.eu/ctr-search/trial/2007-000371-42/results\") #> * Found search query from EUCTR: query=2007-000371-42 #>             query-term query-register #> 1 query=2007-000371-42          EUCTR ctrGetQueryUrl(\"https://euclinicaltrials.eu/app/#/view/2022-500041-24-00\") #> * Found search query from CTIS: number=2022-500041-24-00 #>                 query-term query-register #> 1 number=2022-500041-24-00           CTIS ctrGetQueryUrl(\"https://euclinicaltrials.eu/app/#/search?sponsorTypeCode=1\") #> * Found search query from CTIS: sponsorTypeCode=1 #>          query-term query-register #> 1 sponsorTypeCode=1           CTIS ctrGetQueryUrl(\"https://classic.clinicaltrials.gov/ct2/show/NCT01492673?cond=neuroblastoma\") #> * Appears specific for CTGOV CLASSIC #> * Note: 'url' shows a single trial (and is returned by the function) but also had search parameters: If interested in search results, click 'Return to List' in browser and use this as 'url'. #> * Found search query from CTGOV: term=NCT01492673 #>         query-term query-register #> 1 term=NCT01492673          CTGOV ctrGetQueryUrl(\"https://clinicaltrials.gov/ct2/show/NCT01492673?cond=neuroblastoma\") #> * Appears specific for CTGOV CLASSIC #> * Note: 'url' shows a single trial (and is returned by the function) but also had search parameters: If interested in search results, click 'Return to List' in browser and use this as 'url'. #> * Found search query from CTGOV: term=NCT01492673 #>         query-term query-register #> 1 term=NCT01492673          CTGOV ctrGetQueryUrl(\"https://www.clinicaltrials.gov/study/NCT01467986?aggFilters=ages:child\") #> * Appears specific for CTGOV REST API 2.0.0 #> * Note: 'url' shows a single trial (and is returned by the function) but also had search parameters: If interested in search results, click on 'Search Results' in browser and use this as 'url'. #> * Found search query from CTGOV2: id=NCT01467986 #>       query-term query-register #> 1 id=NCT01467986         CTGOV2 ctrGetQueryUrl(\"https://www.isrctn.com/ISRCTN70039829\") #> * Found search query from ISRCTN: q=ISRCTN70039829 #>         query-term query-register #> 1 q=ISRCTN70039829         ISRCTN"},{"path":"https://rfhb.github.io/ctrdata/reference/ctrLoadQueryIntoDb.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and store register trial information — ctrLoadQueryIntoDb","title":"Load and store register trial information — ctrLoadQueryIntoDb","text":"Retrieves information clinical trials registers stores collection database. Main function ctrdata accessing registers. collection can store trial information different queries different registers. Query details stored collection can accessed using dbQueryHistory. previous query can re-run, replaces adds trial records keeping user annotations trial records.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrLoadQueryIntoDb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and store register trial information — ctrLoadQueryIntoDb","text":"","code":"ctrLoadQueryIntoDb(   queryterm = NULL,   register = \"\",   querytoupdate = NULL,   forcetoupdate = FALSE,   euctrresults = FALSE,   euctrresultshistory = FALSE,   documents.path = NULL,   documents.regexp = \"prot|sample|statist|sap_|p1ar|p2ars|ctalett|lay|^[0-9]+ \",   annotation.text = \"\",   annotation.mode = \"append\",   only.count = FALSE,   con = NULL,   verbose = FALSE,   ... )"},{"path":"https://rfhb.github.io/ctrdata/reference/ctrLoadQueryIntoDb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load and store register trial information — ctrLoadQueryIntoDb","text":"queryterm Either string full URL search query register, data frame returned ctrGetQueryUrl dbQueryHistory functions, , together parameter register, string query elements search URL. query details recorded collection later use update records. \"CTIS\", queryterm can empty string obtain trial records. automatically copying user's query register web browser clipboard, see register String abbreviation register query, either \"EUCTR\", \"CTGOV\", \"ISRCTN\" \"CTIS\". needed queryterm provides full URL query results. querytoupdate Either word \"last\", row number query data frame returned dbQueryHistory run retrieve new update trial records since query run last time. parameter takes precedence queryterm. \"EUCTR\", updates available last seven days; query run time passed since run last. work \"CTIS\" time. forcetoupdate TRUE, run query given querytoupdate, irrespective run last. Default FALSE. euctrresults TRUE, also download available results retrieving loading trials EUCTR. slows function. (\"CTGOV\", \"CTGOV2\" \"CTIS\", available results always retrieved loaded collection.) euctrresultshistory TRUE, also download available history results publication \"EUCTR.\" quite time-consuming. Default FALSE. documents.path relative absolute path directory exists can created, save documents directly available register (\"EUCTR\", \"CTGOV\", \"CTGOV2\", \"ISRCTN\", \"CTIS\") PDFs results, analysis plans, spreadsheets, patient information sheets, assessments product information. Default NULL, disables saving documents. documents.regexp Regular expression, case insensitive, select documents, saving documents requested (see documents.path). set NULL, empty placeholder files saved every document saved. Default \"prot|sample|statist|sap_|p1ar|p2ars|ctalett|lay|^[0-9]+ \". Used \"CTGOV\", \"CTGOV2\", \"ISRCTN\" \"CTIS\" (\"EUCTR\", available documents saved case). annotation.text Text including field \"annotation\" records retrieved query loaded collection. contents field \"annotation\" trial record preserved e.g. running function loading record annotation, see parameter annotation.mode. annotation.mode One \"append\" (default), \"prepend\" \"replace\" new annotation.text respect existing annotation records retrieved query loaded collection. .count Set TRUE return number trial records found register query. load trial information database. Default FALSE. con connection object, see section `Databases` ctrdata. verbose Printing additional information set TRUE; default FALSE. ... use (capture deprecated parameters).","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrLoadQueryIntoDb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and store register trial information — ctrLoadQueryIntoDb","text":"list elements `n` (number trial records newly imported updated), `success` (vector _id's successfully loaded records), `failed` (vector identifiers records failed load) `queryterm` (query term used). returned list several attributes (including database collection name, well query history database collection) facilitate documentation.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrLoadQueryIntoDb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and store register trial information — ctrLoadQueryIntoDb","text":"","code":"if (FALSE) {  dbc <- nodbi::src_sqlite(collection = \"my_collection\")  # Retrieve protocol- and results-related information # on two specific trials identified by their EU number ctrLoadQueryIntoDb(   queryterm = \"2005-001267-63+OR+2008-003606-33\",   register = \"EUCTR\",   euctrresults = TRUE,   con = dbc )  # Retrieve all information on about 2,000 ongoing # interventional cancer trials involving children # into the same collection as used before ctrLoadQueryIntoDb(   queryterm = \"cancer&recr=Open&type=Intr&age=0\",   register = \"CTGOV\",   con = dbc )  # Retrieve all information on more than 40 trials # that are labelled as phase 3 and that mention # either neuroblastoma or lymphoma from ISRCTN, # into the same collection as used before ctrLoadQueryIntoDb(   queryterm = paste0(     \"https://www.isrctn.com/search?\",     \"q=neuroblastoma+OR+lymphoma&filters=phase%3APhase+III\"),   con = dbc )  # Retrieve all information on completed trials in CTIS ctrLoadQueryIntoDb(   queryterm = \"https://euclinicaltrials.eu/app/#/search?status=Ended\",   con = dbc ) }"},{"path":"https://rfhb.github.io/ctrdata/reference/ctrOpenSearchPagesInBrowser.html","id":null,"dir":"Reference","previous_headings":"","what":"Open reigster to show query results or search page — ctrOpenSearchPagesInBrowser","title":"Open reigster to show query results or search page — ctrOpenSearchPagesInBrowser","text":"Open advanced search pages register(s), execute search browser","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrOpenSearchPagesInBrowser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open reigster to show query results or search page — ctrOpenSearchPagesInBrowser","text":"","code":"ctrOpenSearchPagesInBrowser(url = \"\", register = \"\", copyright = FALSE)"},{"path":"https://rfhb.github.io/ctrdata/reference/ctrOpenSearchPagesInBrowser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open reigster to show query results or search page — ctrOpenSearchPagesInBrowser","text":"url search results page show browser. open browser previous search, output ctrGetQueryUrl dbQueryHistory can used. Can left empty string (default) open advanced search page register. register Register(s) open, \"EUCTR\", \"CTGOV\", \"CTGOV2\", \"ISRCTN\" \"CTIS\". Default empty string, open advanced search page register(s). copyright (Optional) set TRUE, opens copyright pages registers.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrOpenSearchPagesInBrowser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open reigster to show query results or search page — ctrOpenSearchPagesInBrowser","text":"(String) Full URL corresponding shortened url conjunction register , invisibly  TRUE url specified.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrOpenSearchPagesInBrowser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open reigster to show query results or search page — ctrOpenSearchPagesInBrowser","text":"","code":"# Open all and check copyrights before using registers ctrOpenSearchPagesInBrowser(copyright = TRUE)  # Open specific register advanced search page ctrOpenSearchPagesInBrowser(register = \"CTGOV\") ctrOpenSearchPagesInBrowser(register = \"CTGOV2\") ctrOpenSearchPagesInBrowser(register = \"CTIS\") ctrOpenSearchPagesInBrowser(register = \"EUCTR\") ctrOpenSearchPagesInBrowser(register = \"ISRCTN\") ctrOpenSearchPagesInBrowser(url = \"status=Ended\", register = \"CTIS\") #> * Found search query from CTIS: status=Ended #> [1] \"https://euclinicaltrials.eu/app/#/search?status=Ended\"  # Open all queries that were loaded into demo collection dbc <- nodbi::src_sqlite(     dbname = system.file(\"extdata\", \"demo.sqlite\", package = \"ctrdata\"),     collection = \"my_trials\" )  dbh <- dbQueryHistory(     con = dbc )  for (r in seq_len(nrow(dbh))) {     ctrOpenSearchPagesInBrowser(dbh[r, ]) }"},{"path":"https://rfhb.github.io/ctrdata/reference/ctrdata-registers.html","id":null,"dir":"Reference","previous_headings":"","what":"ctrdata: information on clinical trial registers — ctrdata-registers","title":"ctrdata: information on clinical trial registers — ctrdata-registers","text":"Registers clinical trials can accessed package ctrdata September 2023.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrdata-registers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ctrdata: information on clinical trial registers — ctrdata-registers","text":"EUCTR: European Union Clinical Trials Register contains 43,500 clinical trials (using one medicines investigational medicinal product, IMP; European Union beyond) CTGOV CTGOV2: ClinicalTrials.gov includes 465,000 interventional observational studies (current classic website supported) ISRCTN: ISRCTN Registry includes almost 24,000 interventional observational health studies CTIS: EU Clinical Trials Information System started January 2023, including 410 publicly accessible trials 2023-11-22. automatically get query URL: *example expert search retrieves interventional trials neonates, investigating infectious conditions: CTGOV expert search retrieves trials conducted exclusively neonates. yet clear different sets trials shown CTGOV (65) CTGOV2 (14) query parameters. EUCTR retrieves trials neonates, exclusively neonates. ISRCTN retrieves studies interventions medicines. Thus, loading trials ctrLoadQueryIntoDb database collection, trials interest selected second step, based values fields interest (e.g., using f115_children_211years EUCTR age criteria, interventions.intervention.interventionType ISRCTN type study), can obtained collection using dbGetFieldsIntoDf.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrdata-registers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ctrdata: information on clinical trial registers — ctrdata-registers","text":"Ralf Herold ralf.herold@mailbox.org","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrdata.html","id":null,"dir":"Reference","previous_headings":"","what":"ctrdata: get started, database connection, function overview — ctrdata","title":"ctrdata: get started, database connection, function overview — ctrdata","text":"package aggregating analysing information clinical studies, obtaining documents, public registers","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrdata.html","id":"-database-connection","dir":"Reference","previous_headings":"","what":"1 - Database connection","title":"ctrdata: get started, database connection, function overview — ctrdata","text":"Package ctrdata retrieves trial information stores database collection, given connection object parameter con several ctrdata functions; connection object created almost identical ways supported backends: Use connection object ctrdata function, example dbQueryHistory, packages, example mongolite::mongo nodbi::docdb_query. Use demo database: dbc <- nodbi::src_sqlite(dbname = system.file(\"extdata\", \"demo.sqlite\", package = \"ctrdata\"), collection = \"my_trials\")","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrdata.html","id":"-operate-on-a-clinical-trial-register","dir":"Reference","previous_headings":"","what":"2 - Operate on a clinical trial register","title":"ctrdata: get started, database connection, function overview — ctrdata","text":"ctrOpenSearchPagesInBrowser, ctrLoadQueryIntoDb (load trial records database collection); see ctrdata-registers details registers search.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrdata.html","id":"-get-a-data-frame-from-the-database-collection","dir":"Reference","previous_headings":"","what":"3 - Get a data frame from the database collection","title":"ctrdata: get started, database connection, function overview — ctrdata","text":"dbFindFields (find names fields interest trial records collection), dbGetFieldsIntoDf (create data frame fields interest collection), dbFindIdsUniqueTrials (get de-duplicated identifiers clinical trials' records can used subset data frame).","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/ctrdata.html","id":"-operate-on-a-data-frame-with-trial-information","dir":"Reference","previous_headings":"","what":"4 - Operate on a data frame with trial information","title":"ctrdata: get started, database connection, function overview — ctrdata","text":"dfTrials2Long (convert fields nested elements long format), dfName2Value (get values variable(s) interest).","code":""},{"path":[]},{"path":"https://rfhb.github.io/ctrdata/reference/ctrdata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ctrdata: get started, database connection, function overview — ctrdata","text":"Ralf Herold ralf.herold@mailbox.org","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dbFindFields.html","id":null,"dir":"Reference","previous_headings":"","what":"Find names of fields in the database collection — dbFindFields","title":"Find names of fields in the database collection — dbFindFields","text":"Given part name field interest user, function returns full field names used records previously loaded collection (using ctrLoadQueryIntoDb). names fields value collection can returned. Set sample = FALSE force screening records collection field names, see .","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dbFindFields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find names of fields in the database collection — dbFindFields","text":"","code":"dbFindFields(namepart = \".*\", con, sample = TRUE, verbose = FALSE)"},{"path":"https://rfhb.github.io/ctrdata/reference/dbFindFields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find names of fields in the database collection — dbFindFields","text":"namepart character string (can regular expression, including Perl-style) searched among field names (keys) collection, case-insensitive. default `\".*\"` lists fields. con connection object, see section `Databases` ctrdata. sample TRUE (default), uses sample 5 trial records per register identify fields, rapidly return possible incomplete set field names. FALSE, uses trial records collection, take time trials returns names fields collection. verbose TRUE, prints additional information (default FALSE).","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dbFindFields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find names of fields in the database collection — dbFindFields","text":"Vector strings full names field(s) found, ordered register alphabet, see examples. Names vector names register holding respective fields. field names can fed dbGetFieldsIntoDf extract data field(s) collection data frame.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dbFindFields.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find names of fields in the database collection — dbFindFields","text":"full names child fields returned dot notation (e.g., clinical_results.outcome_list.outcome.measure.class_list.class.title) addition, names parent fields (e.g., clinical_results) returned. Data parent fields typically complex (nested), see dfTrials2Long easily handling . field definitions registers, see \"Definition\" ctrdata-registers. Note: dbFindFields first called ctrLoadQueryIntoDb, take moment.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dbFindFields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find names of fields in the database collection — dbFindFields","text":"","code":"dbc <- nodbi::src_sqlite(     dbname = system.file(\"extdata\", \"demo.sqlite\", package = \"ctrdata\"),     collection = \"my_trials\" )  dbFindFields(namepart = \"date\", con = dbc)[1:5] #> Using cache of fields.  #>                      CTGOV                      CTGOV  #>          \"completion_date\"       \"last_update_posted\"  #>                      CTGOV                      CTGOV  #>    \"last_update_submitted\" \"last_update_submitted_qc\"  #>                      CTGOV  #>  \"primary_completion_date\"   # view all 3350+ fields from all registers:  allFields <- dbFindFields(con = dbc, sample = FALSE) #> Using cache of fields.   if (interactive()) View(data.frame(   register = names(allFields),   field = allFields))"},{"path":"https://rfhb.github.io/ctrdata/reference/dbFindIdsUniqueTrials.html","id":null,"dir":"Reference","previous_headings":"","what":"Get identifiers of deduplicated trial records — dbFindIdsUniqueTrials","title":"Get identifiers of deduplicated trial records — dbFindIdsUniqueTrials","text":"Records clinical trial can loaded one register collection. function returns deduplicated identifiers trials collection, respecting register(s) preferred user. registers recording identifiers also registers, used function provide vector identifiers deduplicated trials.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dbFindIdsUniqueTrials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get identifiers of deduplicated trial records — dbFindIdsUniqueTrials","text":"","code":"dbFindIdsUniqueTrials(   preferregister = c(\"EUCTR\", \"CTGOV\", \"CTGOV2\", \"ISRCTN\", \"CTIS\"),   prefermemberstate = \"DE\",   include3rdcountrytrials = TRUE,   con,   verbose = FALSE )"},{"path":"https://rfhb.github.io/ctrdata/reference/dbFindIdsUniqueTrials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get identifiers of deduplicated trial records — dbFindIdsUniqueTrials","text":"preferregister vector order preference registers generate unique _id's, default c(\"EUCTR\", \"CTGOV\", \"CTGOV2\", \"ISRCTN\", \"CTIS\") prefermemberstate Code single EU Member State records returned. available, record DE lacking , random Member State's record trial returned. list codes EU  Member States, please see vector countriesEUCTR. Specifying \"3RD\" return Third Country record trials, available. include3rdcountrytrials logical value trials retained conducted exclusively third countries, , outside European Union. Ignored prefermemberstate set \"3RD\". con connection object, see section `Databases` ctrdata. verbose TRUE, prints fields registers used find corresponding trial records","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dbFindIdsUniqueTrials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get identifiers of deduplicated trial records — dbFindIdsUniqueTrials","text":"named vector strings keys (field \"_id\") records collection represent unique trials, names correspond register record.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dbFindIdsUniqueTrials.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get identifiers of deduplicated trial records — dbFindIdsUniqueTrials","text":"Note content records may differ registers (, \"EUCTR\", records different Member States). differences considered function.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dbFindIdsUniqueTrials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get identifiers of deduplicated trial records — dbFindIdsUniqueTrials","text":"","code":"dbc <- nodbi::src_sqlite(     dbname = system.file(\"extdata\", \"demo.sqlite\", package = \"ctrdata\"),     collection = \"my_trials\" )  dbFindIdsUniqueTrials(con = dbc) #> Searching for duplicate trials...  #>  - Getting all trial identifiers... #> , 36 found in collection #>  - Finding duplicates among registers' and sponsor ids... #>  - 10 EUCTR _id were not preferred EU Member State record for 9 trials #>  - Keeping 2 / 8 / 5 / 8 / 3 records from EUCTR / CTGOV / CTGOV2 / ISRCTN / CTIS #> = Returning keys (_id) of 26 records in collection \"my_trials\" #>              ISRCTN              ISRCTN              ISRCTN               EUCTR  #>          \"12949496\"          \"13281214\"          \"17473621\" \"2012-003632-23-DE\"  #>               EUCTR                CTIS                CTIS                CTIS  #> \"2014-003556-31-SE\" \"2022-500676-59-00\" \"2022-501180-40-00\" \"2022-502516-37-00\"  #>              ISRCTN              ISRCTN              ISRCTN              ISRCTN  #>          \"20343063\"          \"61070850\"          \"76463425\"          \"80181452\"  #>              ISRCTN              CTGOV2              CTGOV2              CTGOV2  #>          \"88261002\"       \"NCT00617929\"       \"NCT01125800\"       \"NCT01483820\"  #>              CTGOV2              CTGOV2               CTGOV               CTGOV  #>       \"NCT01505608\"       \"NCT01592045\"       \"NCT02620761\"       \"NCT03280147\"  #>               CTGOV               CTGOV               CTGOV               CTGOV  #>       \"NCT03325439\"       \"NCT03431558\"       \"NCT03876704\"       \"NCT04001712\"  #>               CTGOV               CTGOV  #>       \"NCT04041765\"       \"NCT05969327\"  #> attr(,\"ctrdata-dbname\") #> [1] \"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/ctrdata/extdata/demo.sqlite\" #> attr(,\"ctrdata-table\") #> [1] \"my_trials\" #> attr(,\"ctrdata-dbqueryhistory\") #>       query-timestamp query-register query-records #> 1 2023-12-03 11:35:44          EUCTR            12 #> 2 2023-12-03 11:35:58          CTGOV             8 #> 3 2023-12-03 11:36:02         ISRCTN             8 #> 4 2023-12-03 11:36:11           CTIS             3 #> 5 2023-12-03 11:36:16         CTGOV2             5 #>                                                                                                                       query-term #> 1                                    query=&age=newborn&phase=phase-three&dateFrom=2015-02-28&dateTo=2015-03-31&status=completed #> 2 term=AREA[MaximumAge]+RANGE[0+days,+28+days]&intr=Drugs,+Investigational&strd_s=01/01/2018&strd_e=01/01/2020&type=Intr&phase=2 #> 3                                                                                    q=&filters=ageRange:Neonate,phase:Phase+III #> 4                               basicSearchInputAND=cancer&status=Ongoing, recruiting&ageGroupCode=2&haveOrphanDesignation=false #> 5                                  distance=50&cond=neuroblastoma&aggFilters=phase:2,results:with&primComp=2014-01-01_2014-12-31"},{"path":"https://rfhb.github.io/ctrdata/reference/dbGetFieldsIntoDf.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data frame of specified fields from database collection — dbGetFieldsIntoDf","title":"Create data frame of specified fields from database collection — dbGetFieldsIntoDf","text":"Fields collection retrieved records data frame (tibble). Within given trial record, fields can hierarchical structured, , nested. Th function uses field names appropriately type values returns, harmonising original values (e.g. \"Information present EudraCT\" `NA`, \"Yes\" `TRUE`, \"false\" `FALSE`, date strings dates time differences, number strings numbers). function simplifies structure nested data may concatenate multiple strings field using \" / \" (see example) may widened returned data frame additional columns recursively expanded simply nested data (e.g., \"externalRefs\" columns \"externalRefs.doi\", \"externalRefs.eudraCTNumber\" etc.). handling complex nested data, use dfTrials2Long followed dfName2Value extract sought variable(s).","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dbGetFieldsIntoDf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data frame of specified fields from database collection — dbGetFieldsIntoDf","text":"","code":"dbGetFieldsIntoDf(fields = \"\", con, verbose = FALSE, ...)"},{"path":"https://rfhb.github.io/ctrdata/reference/dbGetFieldsIntoDf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data frame of specified fields from database collection — dbGetFieldsIntoDf","text":"fields Vector one strings, names sought fields. Specify fewer 50 fields use parent fields (e.g., \".b\" instead \".b.c\" backend functionality supports 50 fields. See function dbFindFields find names fields. Dot path notation (\"field.subfield\") without indices supported. con connection object, see section `Databases` ctrdata. verbose Printing additional information set TRUE; (default FALSE). ... use (captures deprecated parameter stopifnodata)","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dbGetFieldsIntoDf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data frame of specified fields from database collection — dbGetFieldsIntoDf","text":"data frame (tibble, tibble loaded) columns corresponding sought fields. column records' `_id` always included. maximum number rows returned data frame equal , less number trial records database collection.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dbGetFieldsIntoDf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create data frame of specified fields from database collection — dbGetFieldsIntoDf","text":"","code":"dbc <- nodbi::src_sqlite(    dbname = system.file(\"extdata\", \"demo.sqlite\", package = \"ctrdata\"),    collection = \"my_trials\")  # get fields that are nested within another field # and can have multiple values with the nested field dbGetFieldsIntoDf(   fields = \"b1_sponsor.b31_and_b32_status_of_the_sponsor\",   con = dbc) #>                  _id b1_sponsor.b31_and_b32_status_of_the_sponsor #> 3  2012-003632-23-AT                                   Commercial #> 4  2012-003632-23-CZ                                   Commercial #> 5  2012-003632-23-DE                                   Commercial #> 6  2012-003632-23-ES                                   Commercial #> 1  2012-003632-23-GB                                   Commercial #> 2  2012-003632-23-IT                                   Commercial #> 7  2012-003632-23-SE                                   Commercial #> 9  2014-003556-31-GB                                   Commercial #> 12 2014-003556-31-IT                                   Commercial #> 10 2014-003556-31-NL                                   Commercial #> 11 2014-003556-31-PL                                   Commercial #> 8  2014-003556-31-SE                                   Commercial  # fields that are lists of string values are # returned by concatenating values with a slash dbGetFieldsIntoDf(   fields = \"keyword\",   con = dbc) #>           _id #> 2 NCT03280147 #> 3 NCT03325439 #> 4 NCT03431558 #> 6 NCT04001712 #> 7 NCT04041765 #>                                                                                                  keyword #> 2                                                              Neonate / Sepsis / Antibiotics / Duration #> 3 Electroencephalographic neonatal seizures / Brivaracetam / Epilepsy / ENS / Newborns / Pharmacokinetic #> 4                                               Bovine Lactoferrin, Neonatal infection, Low Birth Weight #> 6                                                                                 early caffeine preterm #> 7                                                                IgM-enriched Intravenous Immunoglobulin"},{"path":"https://rfhb.github.io/ctrdata/reference/dbQueryHistory.html","id":null,"dir":"Reference","previous_headings":"","what":"Show history of queries loaded into a database collection — dbQueryHistory","title":"Show history of queries loaded into a database collection — dbQueryHistory","text":"Show history queries loaded database collection","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dbQueryHistory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show history of queries loaded into a database collection — dbQueryHistory","text":"","code":"dbQueryHistory(con, verbose = FALSE)"},{"path":"https://rfhb.github.io/ctrdata/reference/dbQueryHistory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show history of queries loaded into a database collection — dbQueryHistory","text":"con connection object, see section `Databases` ctrdata. verbose TRUE, prints additional information (default FALSE).","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dbQueryHistory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show history of queries loaded into a database collection — dbQueryHistory","text":"data frame (tibble, tibble loaded)  columns: `query-timestamp`, `query-register`,  `query-records` (note: number records loaded last  executing ctrLoadQueryIntoDb, total record number)  `query-term`, one row time  ctrLoadQueryIntoDb loaded trial records collection.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dbQueryHistory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show history of queries loaded into a database collection — dbQueryHistory","text":"","code":"dbc <- nodbi::src_sqlite(     dbname = system.file(\"extdata\", \"demo.sqlite\", package = \"ctrdata\"),     collection = \"my_trials\" )  dbQueryHistory(con = dbc) #>       query-timestamp query-register query-records #> 1 2023-12-03 11:35:44          EUCTR            12 #> 2 2023-12-03 11:35:58          CTGOV             8 #> 3 2023-12-03 11:36:02         ISRCTN             8 #> 4 2023-12-03 11:36:11           CTIS             3 #> 5 2023-12-03 11:36:16         CTGOV2             5 #>                                                                                                                       query-term #> 1                                    query=&age=newborn&phase=phase-three&dateFrom=2015-02-28&dateTo=2015-03-31&status=completed #> 2 term=AREA[MaximumAge]+RANGE[0+days,+28+days]&intr=Drugs,+Investigational&strd_s=01/01/2018&strd_e=01/01/2020&type=Intr&phase=2 #> 3                                                                                    q=&filters=ageRange:Neonate,phase:Phase+III #> 4                               basicSearchInputAND=cancer&status=Ongoing, recruiting&ageGroupCode=2&haveOrphanDesignation=false #> 5                                  distance=50&cond=neuroblastoma&aggFilters=phase:2,results:with&primComp=2014-01-01_2014-12-31"},{"path":"https://rfhb.github.io/ctrdata/reference/dfMergeVariablesRelevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge variables, keeping type, and optionally relevel factors — dfMergeVariablesRelevel","title":"Merge variables, keeping type, and optionally relevel factors — dfMergeVariablesRelevel","text":"Merge variables data frame returned dbGetFieldsIntoDf new variable, optionally also map values new levels.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dfMergeVariablesRelevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge variables, keeping type, and optionally relevel factors — dfMergeVariablesRelevel","text":"","code":"dfMergeVariablesRelevel(df = NULL, colnames = \"\", levelslist = NULL)"},{"path":"https://rfhb.github.io/ctrdata/reference/dfMergeVariablesRelevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge variables, keeping type, and optionally relevel factors — dfMergeVariablesRelevel","text":"df data.frame variables (columns) merged one vector. colnames vector names columns `df` hold variables merged, selection columns per select. levelslist names list one slice new value used vector old values (optional).","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dfMergeVariablesRelevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge variables, keeping type, and optionally relevel factors — dfMergeVariablesRelevel","text":"vector, type columns merged","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dfMergeVariablesRelevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge variables, keeping type, and optionally relevel factors — dfMergeVariablesRelevel","text":"","code":"dbc <- nodbi::src_sqlite(     dbname = system.file(\"extdata\", \"demo.sqlite\", package = \"ctrdata\"),     collection = \"my_trials\" )  df <- dbGetFieldsIntoDf(     fields = c(\"overall_status\", \"x5_trial_status\"),     con = dbc )  statusvalues <- list(     \"ongoing\" = c(\"Recruiting\", \"Active\", \"Ongoing\"),     \"completed\" = c(\"Completed\", \"Prematurely Ended\", \"Terminated\"),     \"other\" = c(\"Withdrawn\", \"Suspended\", \"No longer available\") )  dfMergeVariablesRelevel(     df = df,     colnames = 'contains(\"status\")',     levelslist = statusvalues ) #> Columns identified to be merged: overall_status, x5_trial_status #>  [1] completed completed completed completed completed completed completed #>  [8] completed completed completed completed completed completed completed #> [15] <NA>      <NA>      completed <NA>      completed #> Levels: ongoing completed other"},{"path":"https://rfhb.github.io/ctrdata/reference/dfName2Value.html","id":null,"dir":"Reference","previous_headings":"","what":"Get value for variable of interest — dfName2Value","title":"Get value for variable of interest — dfName2Value","text":"Get information variable interest  (e.g., clinical endpoints) long data frame protocol- result-related trial information returned dfTrials2Long. Parameters `valuename`, `wherename` `wherevalue` matched using Perl regular expressions ignoring case.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dfName2Value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get value for variable of interest — dfName2Value","text":"","code":"dfName2Value(df, valuename = \"\", wherename = \"\", wherevalue = \"\")"},{"path":"https://rfhb.github.io/ctrdata/reference/dfName2Value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get value for variable of interest — dfName2Value","text":"df data frame (tibble) four columns (`_id`, `identifier`, `name`, `value`) returned dfTrials2Long valuename character string name field holds value variable interest (e.g., summary measure \"endPoints.*tendencyValue.value\") wherename (optional) character string identify variable interest among repeatedly occur trial record (e.g., \"endPoints.endPoint.title\") wherevalue (optional) character string value variable identified `wherename` (e.g., \"response\")","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dfName2Value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get value for variable of interest — dfName2Value","text":"data frame (tibble, tibble loaded) includes values interest, columns `_id`, `identifier`, `name`, `value` (``,  contents `wherevalue` found `wherename`).  Contents `value` strings unless elements  numbers. `identifier` generated function  dfTrials2Long identify matching elements, e.g.  endpoint descriptions measurements.","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dfName2Value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get value for variable of interest — dfName2Value","text":"","code":"dbc <- nodbi::src_sqlite(     dbname = system.file(\"extdata\", \"demo.sqlite\", package = \"ctrdata\"),     collection = \"my_trials\" )  dfwide <- dbGetFieldsIntoDf(     fields = c(         ## ctgov - typical results fields         # \"clinical_results.baseline.analyzed_list.analyzed.count_list.count\",         # \"clinical_results.baseline.group_list.group\",         # \"clinical_results.baseline.analyzed_list.analyzed.units\",         \"clinical_results.outcome_list.outcome\",         \"study_design_info.allocation\",         ## euctr - typical results fields         # \"trialInformation.fullTitle\",         # \"baselineCharacteristics.baselineReportingGroups.baselineReportingGroup\",         # \"trialChanges.hasGlobalInterruptions\",         # \"subjectAnalysisSets\",         # \"adverseEvents.seriousAdverseEvents.seriousAdverseEvent\",         \"endPoints.endPoint\",         \"subjectDisposition.recruitmentDetails\"     ), con = dbc )  dflong <- dfTrials2Long(df = dfwide) #> clinical_results.outcome_list.outcome                                                                                                                                                                    #> study_design_info.allocation                                                                                                                                                                             #> endPoints.endPoint                                                                                                                                                                                       #> subjectDisposition.recruitmentDetails                                                                                                                                                                    #>                                                                                                                                                                                                          #> .  #> .  #> .  #> .  #> .  #> .  #> .  #> .  #>  #> Total 17101 rows, 68 unique names of variables  ## get values for the endpoint 'response' dfName2Value(     df = dflong,     valuename = paste0(         \"clinical_results.*measurement.value|\",         \"clinical_results.*outcome.measure.units|\",         \"endPoints.endPoint.*tendencyValue.value|\",         \"endPoints.endPoint.unit\"     ),     wherename = paste0(         \"clinical_results.*outcome.measure.title|\",         \"endPoints.endPoint.title\"     ),     wherevalue = \"response\" ) #> Returning values for 7 out of 19 trials #>                  _id identifier #> 1  2012-003632-23-AT          1 #> 2  2012-003632-23-AT          1 #> 3  2012-003632-23-AT          2 #> 4  2012-003632-23-AT          6 #> 5  2012-003632-23-AT        6.1 #> 6  2012-003632-23-AT        6.2 #> 7  2012-003632-23-AT        6.3 #> 8  2012-003632-23-AT        6.4 #> 9  2012-003632-23-AT        6.5 #> 10 2012-003632-23-AT          8 #> 11 2012-003632-23-AT          8 #> 12 2012-003632-23-CZ          1 #> 13 2012-003632-23-CZ          1 #> 14 2012-003632-23-CZ          2 #> 15 2012-003632-23-CZ          6 #> 16 2012-003632-23-CZ        6.1 #> 17 2012-003632-23-CZ        6.2 #> 18 2012-003632-23-CZ        6.3 #> 19 2012-003632-23-CZ        6.4 #> 20 2012-003632-23-CZ        6.5 #> 21 2012-003632-23-CZ          8 #> 22 2012-003632-23-CZ          8 #> 23 2012-003632-23-DE          1 #> 24 2012-003632-23-DE          1 #> 25 2012-003632-23-DE          2 #> 26 2012-003632-23-DE          6 #> 27 2012-003632-23-DE        6.1 #> 28 2012-003632-23-DE        6.2 #> 29 2012-003632-23-DE        6.3 #> 30 2012-003632-23-DE        6.4 #> 31 2012-003632-23-DE        6.5 #> 32 2012-003632-23-DE          8 #> 33 2012-003632-23-DE          8 #> 34 2012-003632-23-ES          1 #> 35 2012-003632-23-ES          1 #> 36 2012-003632-23-ES          2 #> 37 2012-003632-23-ES          6 #> 38 2012-003632-23-ES        6.1 #> 39 2012-003632-23-ES        6.2 #> 40 2012-003632-23-ES        6.3 #> 41 2012-003632-23-ES        6.4 #> 42 2012-003632-23-ES        6.5 #> 43 2012-003632-23-ES          8 #> 44 2012-003632-23-ES          8 #> 45 2012-003632-23-GB          1 #> 46 2012-003632-23-GB          1 #> 47 2012-003632-23-GB          2 #> 48 2012-003632-23-GB          6 #> 49 2012-003632-23-GB        6.1 #> 50 2012-003632-23-GB        6.2 #> 51 2012-003632-23-GB        6.3 #> 52 2012-003632-23-GB        6.4 #> 53 2012-003632-23-GB        6.5 #> 54 2012-003632-23-GB          8 #> 55 2012-003632-23-GB          8 #> 56 2012-003632-23-IT          1 #> 57 2012-003632-23-IT          1 #> 58 2012-003632-23-IT          2 #> 59 2012-003632-23-IT          6 #> 60 2012-003632-23-IT        6.1 #> 61 2012-003632-23-IT        6.2 #> 62 2012-003632-23-IT        6.3 #> 63 2012-003632-23-IT        6.4 #> 64 2012-003632-23-IT        6.5 #> 65 2012-003632-23-IT          8 #> 66 2012-003632-23-IT          8 #> 67 2012-003632-23-SE          1 #> 68 2012-003632-23-SE          1 #> 69 2012-003632-23-SE          2 #> 70 2012-003632-23-SE          6 #> 71 2012-003632-23-SE        6.1 #> 72 2012-003632-23-SE        6.2 #> 73 2012-003632-23-SE        6.3 #> 74 2012-003632-23-SE        6.4 #> 75 2012-003632-23-SE        6.5 #> 76 2012-003632-23-SE          8 #> 77 2012-003632-23-SE          8 #>                                                                                                                        name #> 1                                                                                                   endPoints.endPoint.unit #> 2  endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 3                                                                                                   endPoints.endPoint.unit #> 4                                                                                                   endPoints.endPoint.unit #> 5  endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 6  endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 7  endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 8  endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 9  endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 10                                                                                                  endPoints.endPoint.unit #> 11 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 12                                                                                                  endPoints.endPoint.unit #> 13 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 14                                                                                                  endPoints.endPoint.unit #> 15                                                                                                  endPoints.endPoint.unit #> 16 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 17 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 18 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 19 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 20 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 21                                                                                                  endPoints.endPoint.unit #> 22 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 23                                                                                                  endPoints.endPoint.unit #> 24 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 25                                                                                                  endPoints.endPoint.unit #> 26                                                                                                  endPoints.endPoint.unit #> 27 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 28 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 29 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 30 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 31 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 32                                                                                                  endPoints.endPoint.unit #> 33 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 34                                                                                                  endPoints.endPoint.unit #> 35 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 36                                                                                                  endPoints.endPoint.unit #> 37                                                                                                  endPoints.endPoint.unit #> 38 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 39 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 40 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 41 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 42 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 43                                                                                                  endPoints.endPoint.unit #> 44 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 45                                                                                                  endPoints.endPoint.unit #> 46 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 47                                                                                                  endPoints.endPoint.unit #> 48                                                                                                  endPoints.endPoint.unit #> 49 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 50 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 51 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 52 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 53 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 54                                                                                                  endPoints.endPoint.unit #> 55 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 56                                                                                                  endPoints.endPoint.unit #> 57 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 58                                                                                                  endPoints.endPoint.unit #> 59                                                                                                  endPoints.endPoint.unit #> 60 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 61 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 62 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 63 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 64 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 65                                                                                                  endPoints.endPoint.unit #> 66 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 67                                                                                                  endPoints.endPoint.unit #> 68 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 69                                                                                                  endPoints.endPoint.unit #> 70                                                                                                  endPoints.endPoint.unit #> 71 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 72 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 73 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 74 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 75 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #> 76                                                                                                  endPoints.endPoint.unit #> 77 endPoints.endPoint.subjectAnalysisSetReportingGroups.subjectAnalysisSetReportingGroup.tendencyValues.tendencyValue.value #>                           value                           where #> 1                          Days        Time to Overall Response #> 2                           7.0        Time to Overall Response #> 3  At least 1 response (number)    Durability of First Response #> 4         Overall Response Rate                Overall Response #> 5                          0.63                Overall Response #> 6                             0                Overall Response #> 7                          0.65                Overall Response #> 8                          0.59                Overall Response #> 9                          0.60                Overall Response #> 10 Percentage of treatment time Cumulative Duration of Response #> 11                         78.6 Cumulative Duration of Response #> 12                         Days        Time to Overall Response #> 13                          7.0        Time to Overall Response #> 14 At least 1 response (number)    Durability of First Response #> 15        Overall Response Rate                Overall Response #> 16                         0.63                Overall Response #> 17                            0                Overall Response #> 18                         0.65                Overall Response #> 19                         0.59                Overall Response #> 20                         0.60                Overall Response #> 21 Percentage of treatment time Cumulative Duration of Response #> 22                         78.6 Cumulative Duration of Response #> 23                         Days        Time to Overall Response #> 24                          7.0        Time to Overall Response #> 25 At least 1 response (number)    Durability of First Response #> 26        Overall Response Rate                Overall Response #> 27                         0.63                Overall Response #> 28                            0                Overall Response #> 29                         0.65                Overall Response #> 30                         0.59                Overall Response #> 31                         0.60                Overall Response #> 32 Percentage of treatment time Cumulative Duration of Response #> 33                         78.6 Cumulative Duration of Response #> 34                         Days        Time to Overall Response #> 35                          7.0        Time to Overall Response #> 36 At least 1 response (number)    Durability of First Response #> 37        Overall Response Rate                Overall Response #> 38                         0.63                Overall Response #> 39                            0                Overall Response #> 40                         0.65                Overall Response #> 41                         0.59                Overall Response #> 42                         0.60                Overall Response #> 43 Percentage of treatment time Cumulative Duration of Response #> 44                         78.6 Cumulative Duration of Response #> 45                         Days        Time to Overall Response #> 46                          7.0        Time to Overall Response #> 47 At least 1 response (number)    Durability of First Response #> 48        Overall Response Rate                Overall Response #> 49                         0.63                Overall Response #> 50                            0                Overall Response #> 51                         0.65                Overall Response #> 52                         0.59                Overall Response #> 53                         0.60                Overall Response #> 54 Percentage of treatment time Cumulative Duration of Response #> 55                         78.6 Cumulative Duration of Response #> 56                         Days        Time to Overall Response #> 57                          7.0        Time to Overall Response #> 58 At least 1 response (number)    Durability of First Response #> 59        Overall Response Rate                Overall Response #> 60                         0.63                Overall Response #> 61                            0                Overall Response #> 62                         0.65                Overall Response #> 63                         0.59                Overall Response #> 64                         0.60                Overall Response #> 65 Percentage of treatment time Cumulative Duration of Response #> 66                         78.6 Cumulative Duration of Response #> 67                         Days        Time to Overall Response #> 68                          7.0        Time to Overall Response #> 69 At least 1 response (number)    Durability of First Response #> 70        Overall Response Rate                Overall Response #> 71                         0.63                Overall Response #> 72                            0                Overall Response #> 73                         0.65                Overall Response #> 74                         0.59                Overall Response #> 75                         0.60                Overall Response #> 76 Percentage of treatment time Cumulative Duration of Response #> 77                         78.6 Cumulative Duration of Response"},{"path":"https://rfhb.github.io/ctrdata/reference/dfTrials2Long.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data frame with trial records into long format — dfTrials2Long","title":"Convert data frame with trial records into long format — dfTrials2Long","text":"function works procotol- results- related information. converts lists values data frame returned dbGetFieldsIntoDf individual rows long data frame. resulting long data frame, values interest can selected using dfName2Value. function particularly useful fields complex content, node field \"clinical_results\" EUCTR, dbGetFieldsIntoDf returns multiply nested list function converts every observation every (leaf) field row .","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dfTrials2Long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data frame with trial records into long format — dfTrials2Long","text":"","code":"dfTrials2Long(df)"},{"path":"https://rfhb.github.io/ctrdata/reference/dfTrials2Long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data frame with trial records into long format — dfTrials2Long","text":"df Data frame (tibble) columns including trial identifier (_id) one variables obtained dbGetFieldsIntoDf","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dfTrials2Long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data frame with trial records into long format — dfTrials2Long","text":"data frame  (tibble, tibble loaded) four columns: `_id`, `identifier`, `name`, `value`","code":""},{"path":"https://rfhb.github.io/ctrdata/reference/dfTrials2Long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data frame with trial records into long format — dfTrials2Long","text":"","code":"dbc <- nodbi::src_sqlite(    dbname = system.file(\"extdata\", \"demo.sqlite\", package = \"ctrdata\"),    collection = \"my_trials\")  dfwide <- dbGetFieldsIntoDf(   fields = \"clinical_results.participant_flow\",   con = dbc)  dfTrials2Long(df = dfwide) #> clinical_results.participant_flow.group_list.group                                                                                                                                                       #> clinical_results.participant_flow.period_list.period.title                                                                                                                                               #> clinical_results.participant_flow.period_list.period.milestone_list.milestone                                                                                                                            #>                                                                                                                                                                                                          #> .  #> .  #> .  #> .  #> .  #> .  #> .  #>  #> Total 22 rows, 7 unique names of variables #>            _id identifier #> 1  NCT02620761          1 #> 2  NCT02620761          2 #> 3  NCT02620761          1 #> 4  NCT02620761          2 #> 5  NCT02620761          1 #> 6  NCT02620761          2 #> 7  NCT02620761          0 #> 8  NCT02620761          1 #> 9  NCT02620761          2 #> 10 NCT02620761          3 #> 11 NCT02620761        1.1 #> 12 NCT02620761        1.2 #> 13 NCT02620761        1.1 #> 14 NCT02620761        1.2 #> 15 NCT02620761        2.1 #> 16 NCT02620761        2.2 #> 17 NCT02620761        2.1 #> 18 NCT02620761        2.2 #> 19 NCT02620761        3.1 #> 20 NCT02620761        3.2 #> 21 NCT02620761        3.1 #> 22 NCT02620761        3.2 #>                                                                                                                     name #> 1                                                            clinical_results.participant_flow.group_list.group.group_id #> 2                                                            clinical_results.participant_flow.group_list.group.group_id #> 3                                                               clinical_results.participant_flow.group_list.group.title #> 4                                                               clinical_results.participant_flow.group_list.group.title #> 5                                                         clinical_results.participant_flow.group_list.group.description #> 6                                                         clinical_results.participant_flow.group_list.group.description #> 7                                                             clinical_results.participant_flow.period_list.period.title #> 8                                    clinical_results.participant_flow.period_list.period.milestone_list.milestone.title #> 9                                    clinical_results.participant_flow.period_list.period.milestone_list.milestone.title #> 10                                   clinical_results.participant_flow.period_list.period.milestone_list.milestone.title #> 11 clinical_results.participant_flow.period_list.period.milestone_list.milestone.participants_list.participants.group_id #> 12 clinical_results.participant_flow.period_list.period.milestone_list.milestone.participants_list.participants.group_id #> 13    clinical_results.participant_flow.period_list.period.milestone_list.milestone.participants_list.participants.count #> 14    clinical_results.participant_flow.period_list.period.milestone_list.milestone.participants_list.participants.count #> 15 clinical_results.participant_flow.period_list.period.milestone_list.milestone.participants_list.participants.group_id #> 16 clinical_results.participant_flow.period_list.period.milestone_list.milestone.participants_list.participants.group_id #> 17    clinical_results.participant_flow.period_list.period.milestone_list.milestone.participants_list.participants.count #> 18    clinical_results.participant_flow.period_list.period.milestone_list.milestone.participants_list.participants.count #> 19 clinical_results.participant_flow.period_list.period.milestone_list.milestone.participants_list.participants.group_id #> 20 clinical_results.participant_flow.period_list.period.milestone_list.milestone.participants_list.participants.group_id #> 21    clinical_results.participant_flow.period_list.period.milestone_list.milestone.participants_list.participants.count #> 22    clinical_results.participant_flow.period_list.period.milestone_list.milestone.participants_list.participants.count #>                                                                                                                                                                                                                                                                                                                                                                                                                                                                valueontrol #> 4                                                                                                                                                                                                                                                                                                                                                                                                                                                         Fenoldopam #> 5                                                          Infants in the Placebo arm will receive 0.9% sodium chloride (0.1 ml/hr). If, after 6 hrs there is not a clinically concerning decrease in blood pressure, as determined by attending physician, the rate of infusion (in this arm the placebo) will be increased to 0.2 ml/kg/hr. This rate will be continued throughout the remainder of the study.\\r0.9%NS: Randomized to receive Fenoldopam or 0.9%NS #> 6  Infants in the experimental arm will receive fenoldopam (60 ug/ml; 0.1 ml/hr to provide 0.1ug/kg/min). If, after 6 hrs there is not a clinically concerning decrease in blood pressure, as determined by attending physician, the rate of infusion will be increased to 0.2 ml/kg/hr (0.2 ug/kg/min for infants receiving fenoldopam). This rate will be continued throughout the remainder of the study.\\rFenoldopam: Randomized to receive Fenoldopam or 0.9%NS #> 7                                                                                                                                                                                                                                                                                                                                                                                                                                                      Overall Study},{"path":[]},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"possibly-breaking-changes-1-16-0-9000","dir":"Changelog","previous_headings":"","what":"Possibly breaking changes","title":"ctrdata 1.16.0.9000 (2024-01-09)","text":"Reimplemented dbGetFieldsIntoDf() accelerate predictable, simplified returns, particular nested fields; also attempts recursively expand simply nested data additional columns returned data frame Reimplemented dbFindFields() accelerate; points based improved nodbi::docdb_query() functionality dbFindFields() now digests sample records quickly find fields, records sample = FALSE taking increasing time increasing number records Parameter fields dbGetFieldsIntoDf() limited less 50 fields, backend functionality supports 50 ; use parent fields (e.g., .b instead c(\".b.c.d\", \".b.c.e\") directly get full collection nodbi::docdb_get()) methods Parameter stopifnodata dbGetFieldsIntoDf() needed deprecated Reimplemented typing fields speed simplify","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"improvements-1-16-0-9000","dir":"Changelog","previous_headings":"","what":"Improvements","title":"ctrdata 1.16.0.9000 (2024-01-09)","text":"files downloading using verbose = TRUE options(ctrdata.tempdir = \"<user_specified_folder>\") Inform MS Windows users cygwin found may chose delete Many fields added typing e.g. date dbGetFieldsIntoDf()","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"bug-fixes-1-16-0-9000","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ctrdata 1.16.0.9000 (2024-01-09)","text":"Adapted corrected information loading newly available data CTIS Corrected escaping, back-conversion, characters JSON CTIS","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1160-released-2023-11-24","dir":"Changelog","previous_headings":"","what":"ctrdata 1.16.0 (released 2023-11-24)","title":"ctrdata 1.16.0 (released 2023-11-24)","text":"CRAN release: 2023-11-24","code":""},{"path":[]},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"xml-files-are-converted-slightly-differently-1-16-0","dir":"Changelog","previous_headings":"Possibly breaking changes","what":"XML files are converted slightly differently","title":"ctrdata 1.16.0 (released 2023-11-24)","text":"EUCTR result-related information attributes: e.g. new: {\"id\":\"PostAssignmentPeriod-46349\"}, : {\"@attributes\":{\"id\":\"PostAssignmentPeriod-46349\"}} Consequently, work just delete @attributes field names dbGetFieldsIntoDf(\"clinical_results.baseline.analyzed_list.analyzed.count_list.count.@attributes.value\", db) EUCTR protocol-related information although differences found yet CTGOV attributes bare values remain included resulting NDJSON (e.g., records <start_date type=\"Actual\">March 15, 2004<\/start_date>, converted {\"start_date\":\"March 15, 2004\"})","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"euctr-some-renaming-to-harmonise-eu-andrd-country-trial-fields-1-16-0","dir":"Changelog","previous_headings":"Possibly breaking changes","what":"EUCTR: some renaming to harmonise EU and 3rd country trial fields","title":"ctrdata 1.16.0 (released 2023-11-24)","text":"new: e83_single_site_trial, (EU trials): e83_the_trial_involves_single_site_in_the_member_state_concerned new: e83_single_site_trial, (3rd country trials): e83_will_this_trial_be_conducted_ at_a_single_site_globally new: e863_trial_sites_planned_in, (EU trials): e863_specify_the_regions_in_which_trial_sites_are_planned new: e863_trial_sites_planned_in, (3rd country trials): e863_specify_the_countries_outside_of_the_eea_in_which_trial_sites_are_planned new: e84_multiple_sites_in_member_state, (EU trials): e84_the_trial_involves_multiple_sites_in_the_member_state_concerned new: e840_multiple_sites_globally, (3rd country trials): e84_will_this_trial_be_conducted_at_multiple_sites_globally See also https://github.com/rfhb/ctrdata/issues/26#issuecomment-1749555081","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"bug-fixes-1-16-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ctrdata 1.16.0 (released 2023-11-24)","text":"corrected batch iterations CTIS trials accommodating unclear totalSize response corrected translation fields browser URL API call CTGOV2 (closes https://github.com/rfhb/ctrdata/issues/32) corrected minimum curl version 5.1.0 (closes https://github.com/rfhb/ctrdata/issues/31) handled errors saving EUCTR results (e.g., long file path name, closes https://github.com/rfhb/ctrdata/issues/30 https://github.com/rfhb/ctrdata/issues/28)","code":""},{"path":[]},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"major-1-16-0","dir":"Changelog","previous_headings":"Improvements","what":"Major","title":"ctrdata 1.16.0 (released 2023-11-24)","text":"external tools required (Cygwin, perl, cat, sed, php functionality transforming text, XML NDJSON replaced Javascript using R package V8); addresses personally communicated concerns faciliates use package ctrdata environments (e.g., https://github.com/rfhb/ctrdata/issues/26); consequently, might breaking change analysing certain fields, see fields affected.","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"other-1-16-0","dir":"Changelog","previous_headings":"Improvements","what":"Other","title":"ctrdata 1.16.0 (released 2023-11-24)","text":"added results summary download CTIS added documents download ISRCTN factored document download function ensure dbFindFields() returns fields EU 3rd country trials EUCTR (addresses https://github.com/rfhb/ctrdata/issues/26) changed order importing CTIS database, improved speed better checked data downloads, repeat necessary factored temporary folder creation added using options(ctrdata.tempdir = ...) set removed dfListExtractKey(), long deprecated removed dfMergeTwoVariablesRelevel(), long deprecated reorganised code file layout","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1152-2023-09-10","dir":"Changelog","previous_headings":"","what":"ctrdata 1.15.2 (2023-09-10)","title":"ctrdata 1.15.2 (2023-09-10)","text":"CRAN release: 2023-09-17 fix handling utf8 upstream multi-language strings CTIS correct creating lists downloading documents ctis adding missing endpoints CTIS found increasing amount data, e.g. publicevents.temporaryHaltList.details 2022-501559-99-00","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1151-2023-08-29","dir":"Changelog","previous_headings":"","what":"ctrdata 1.15.1 (2023-08-29)","title":"ctrdata 1.15.1 (2023-08-29)","text":"CRAN release: 2023-08-30 correct LaTeX documentation resulting CRAN error correct parts downloading CTIS, including file name sanitisation","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1150-2023-08-27","dir":"Changelog","previous_headings":"","what":"ctrdata 1.15.0 (2023-08-27)","title":"ctrdata 1.15.0 (2023-08-27)","text":"CRAN release: 2023-08-27 added CTGOV REST API 2.0.0.-test new register identifier CTGOV2 handle CTGOV classic interface register CTGOV improved ctrdataURLcopier.js rewrite searches views CTIS mangle CTIS: change partIIInfo object array, adding new partIIIinfoKey '{\"partIIInfo\": \"<int>\": {...}, \"<int>\": {...}}' becomes '{\"partIIInfo\": [{\"partIIIinfoKey\": <int>, ...}, {\"partIIIinfoKey\": <int>, ...}]}') correct dbGetFieldsIntoDf() specific lists","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1140-2023-07-16","dir":"Changelog","previous_headings":"","what":"ctrdata 1.14.0 (2023-07-16)","title":"ctrdata 1.14.0 (2023-07-16)","text":"CRAN release: 2023-07-16 fix dbFindIdsUniqueTrials() single-record register contents expand number CTIS variables typed date dfMergeVariablesRelevel() superseeds dfMergeTwoVariablesRelevel()","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1133-2023-06-24","dir":"Changelog","previous_headings":"","what":"ctrdata 1.13.3 (2023-06-24)","title":"ctrdata 1.13.3 (2023-06-24)","text":"CRAN release: 2023-06-24 typo dbFindFields() use CTGOV classic website (ctrdata adapted new website) correct missing names attributes return vector dbFindIdsUniqueTrials()","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1132-2023-05-27","dir":"Changelog","previous_headings":"","what":"ctrdata 1.13.2 (2023-05-27)","title":"ctrdata 1.13.2 (2023-05-27)","text":"CRAN release: 2023-05-26 correct selection lists ids documents download CTIS reduce dependencies (rvest, dplyr removed)","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1131-2023-05-07","dir":"Changelog","previous_headings":"","what":"ctrdata 1.13.1 (2023-05-07)","title":"ctrdata 1.13.1 (2023-05-07)","text":"CRAN release: 2023-05-07 load CTIS data (publicEvaluation) download documents integrate downloading documents ctrLoadQueryIntoDb() also CTGOV use documents.path CTGOV, EUCTR, CTIS; deprecated euctrresultsfilespath added documents.regexp select documents downloading based file name","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1130-2023-04-23","dir":"Changelog","previous_headings":"","what":"ctrdata 1.13.0 (2023-04-23)","title":"ctrdata 1.13.0 (2023-04-23)","text":"CRAN release: 2023-04-24 data CTIS imported completely adapt functions accommodate CTIS provide Tampermonkey script get URL user’s query register speed ctrLoadQueryIntoDb() CTIS nodbi >=0.9.2.9000 keep register names vector returned dbFindIdsUniqueTrials() correct dbFindFields() EUCTR","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1121-2023-03-29","dir":"Changelog","previous_headings":"","what":"ctrdata 1.12.1 (2023-03-29)","title":"ctrdata 1.12.1 (2023-03-29)","text":"CRAN release: 2023-03-29 fix escaping hash symbol PDF rendition help page fix file encoding CTIS downloads MS Windows","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1120-2023-03-25","dir":"Changelog","previous_headings":"","what":"ctrdata 1.12.0 (2023-03-25)","title":"ctrdata 1.12.0 (2023-03-25)","text":"CRAN release: 2023-03-26 added first access new register: CTIS, EU Clinical Trial Information System stop (instead warning) register host errors (e.g. incorrect number records) switch use curl::multi_download() can resume retrievals registers require curl >= 5.0","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1111-2022-11-20","dir":"Changelog","previous_headings":"","what":"ctrdata 1.11.1 (2022-11-20)","title":"ctrdata 1.11.1 (2022-11-20)","text":"CRAN release: 2022-11-20 cater short EUCTR results-related information show warning beta CTGOV website supported limit unit testing MongoDB SQLite return error ctrGetQueryUrl() query URL prevent re-using connections reduce http/2 layer errors update query history querytoupdate used new records found make ctrLoadQueryIntoDb() always return visible result correct dfTrials2Long() identifier (EUCTR top “1” across fields) correct non-ASCII characters","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1110-2022-11-02","dir":"Changelog","previous_headings":"","what":"ctrdata 1.11.0 (2022-11-02)","title":"ctrdata 1.11.0 (2022-11-02)","text":"CRAN release: 2022-11-02 now works DuckDB (>= v0.6.0) database backend, using nodbi (>= v0.9.0) reduced default number parallel connections EUCTR 10 4","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1102-2022-08-20","dir":"Changelog","previous_headings":"","what":"ctrdata 1.10.2 (2022-08-20)","title":"ctrdata 1.10.2 (2022-08-20)","text":"CRAN release: 2022-08-20 fix slow speed dfName2Value() fix remove row names dfName2Value() fix internal function handle tibble fix handling certain ISRCTN queries fix dbGetFieldsIntoDf() missing data fix timeouts methods package testing fix dbGetFieldsIntoDf() rare complex fields fix URL Rd file make examples runnable demo database include wherevalue dfName2Value() result","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1101-2022-07-24","dir":"Changelog","previous_headings":"","what":"ctrdata 1.10.1 (2022-07-24)","title":"ctrdata 1.10.1 (2022-07-24)","text":"CRAN release: 2022-07-24 fix documentation issues (https://stat.ethz.ch/pipermail/r-package-devel/2022q3/008240.html) fix unit test unused missing argument fix GitHub actions tests","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1100-2022-07-01","dir":"Changelog","previous_headings":"","what":"ctrdata 1.10.0 (2022-07-01)","title":"ctrdata 1.10.0 (2022-07-01)","text":"CRAN release: 2022-07-06 ctrLoadQueryIntoDb() new parameter euctrresultsfilespath, deprecating euctrresultspdfpath ctrLoadQueryIntoDb() now also extracts saves results files PDF files ctrFindActiveSubstanceSynonyms() returns NULL non-existing active substance","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-191-2022-04-24","dir":"Changelog","previous_headings":"","what":"ctrdata 1.9.1 (2022-04-24)","title":"ctrdata 1.9.1 (2022-04-24)","text":"CRAN release: 2022-04-24 type e811… variables bugfix dbGetFieldsIntoDf bugfix annotations mix backends editorial update vignettes","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-190-2022-03-13","dir":"Changelog","previous_headings":"","what":"ctrdata 1.9.0 (2022-03-13)","title":"ctrdata 1.9.0 (2022-03-13)","text":"CRAN release: 2022-03-13 chunked trial batches ndjson files accelerated database import package dplyr loaded, functions return tibble instead data frame update correct documentation dbFindFields() returns vector fields now names register field occurs accelerated binary checks (cygwin / Windows) remove internet proxy mangling order use system configuration (e.g., transparent proxies used, environment variable https_proxy specified user) refactored internal caching correct dbGetFieldsIntoDf() specific nested data structures correct dfTrials2Long() specific fields correct dbFindIdsUniqueTrials() single trial register modify field typing decode HTML entities type fields difftime, e.g. min_age CTGOV speed parts dbGetFieldsIntoDf() simplify fields dbFindFields() returns names leaf node fields improve update documentation changed EU Member State default DE dbFindIdsUniqueTrials() corrected installCygwinWindowsDoInstall() properly update installation (remove –prune-install) test binaries installCygwinWindowsDoInstall() cache successful binary testing correct typing required_header.download_date improve numbering dfTrials2Long(), covering nested items","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1809001-2021-12-11","dir":"Changelog","previous_headings":"","what":"ctrdata 1.8.0.9001 (2021-12-11)","title":"ctrdata 1.8.0.9001 (2021-12-11)","text":"thorough documentation improvement simplified dbFindFields() cleaned testing binaries cleaned helper scripts removed ctrGetQueryUrlFromBrowser(), long deprecated","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1809000-2021-11-22","dir":"Changelog","previous_headings":"","what":"ctrdata 1.8.0.9000 (2021-11-22)","title":"ctrdata 1.8.0.9000 (2021-11-22)","text":"uses nodbi 0.6.0 can use PostgreSQL backend include PostgreSQL Github Actions","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-180-2021-11-18","dir":"Changelog","previous_headings":"","what":"ctrdata 1.8.0 (2021-11-18)","title":"ctrdata 1.8.0 (2021-11-18)","text":"CRAN release: 2021-11-21 changes match nodbi 0.5.0 simplifying database operations (user-visible functions: ctrLoadQueryIntoDb, dbFindIdsUniqueTrials, dbGetFieldsIntoDf), without changes API","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1719000-2021-08-23","dir":"Changelog","previous_headings":"","what":"ctrdata 1.7.1.9000 (2021-08-23)","title":"ctrdata 1.7.1.9000 (2021-08-23)","text":"new development version","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-171-2021-08-22","dir":"Changelog","previous_headings":"","what":"ctrdata 1.7.1 (2021-08-22)","title":"ctrdata 1.7.1 (2021-08-22)","text":"CRAN release: 2021-08-22 fix DBI needed Imports (CRAN Note) fix potential file name issue conversion script fix dbFindFields() never return _id (previously depended database backend) changed tests (CRAN detection, register availability, additional tests)","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-170-2021-07-24","dir":"Changelog","previous_headings":"","what":"ctrdata 1.7.0 (2021-07-24)","title":"ctrdata 1.7.0 (2021-07-24)","text":"CRAN release: 2021-07-25 much reduced database backend-specific code, using nodbi 0.4.3 (released 2021-07-23) also introduces transactions sqlite using RSQLite >=2.2.4 (released 2021-03-12) temporary directory creation needed, automated deletion changes detecting non-functioning register servers streamlined unit testing","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-160-2021-05-09","dir":"Changelog","previous_headings":"","what":"ctrdata 1.6.0 (2021-05-09)","title":"ctrdata 1.6.0 (2021-05-09)","text":"CRAN release: 2021-05-09 added support ISRCTN refactored checking binaries caching info updated EUCTR download parameters refactored ctrGetQueryUrl ctrOpenSearchPagesInBrowser harmonised error checking avoid errors external scripts refactored url / query mangling, added detailed testing refactored storing JSON database (handle big files, reduce memory) improved dbFindIdsUniqueTrials (speed, memory, register coverage) factored conversion JSON accelerated EUCTR results history download storage external scripts now create multiple chunks records use identifier fields dbFindIdsUniqueTrials","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1539000-2021-04-29","dir":"Changelog","previous_headings":"","what":"ctrdata 1.5.3.9000 (2021-04-29)","title":"ctrdata 1.5.3.9000 (2021-04-29)","text":"adding user info field entries typed","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-153-2021-04-19","dir":"Changelog","previous_headings":"","what":"ctrdata 1.5.3 (2021-04-19)","title":"ctrdata 1.5.3 (2021-04-19)","text":"CRAN release: 2021-04-19 include message handle server certificate issues, propagating user settings httr curl operations ensure identical return structures new trials found dfTrials2Long: harmonise identifier level assignment, address cases field occurs input df dfMergeTwoVariablesRelevel: corrected improved user info dfName2Value: remove duplicate rows, e.g. duplicated criteria","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-152-2021-04-05","dir":"Changelog","previous_headings":"","what":"ctrdata 1.5.2 (2021-04-05)","title":"ctrdata 1.5.2 (2021-04-05)","text":"CRAN release: 2021-04-06 bugfix EOL converting EUCTR files","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-151-2021-03-21","dir":"Changelog","previous_headings":"","what":"ctrdata 1.5.1 (2021-03-21)","title":"ctrdata 1.5.1 (2021-03-21)","text":"CRAN release: 2021-03-21 bugfix non-matching euctr protocol result ids: trials EUCTR results downloaded version 1.5.0 downloaded (ctrLoadQueryIntoDb) dfTrials2Long refactored accelerated API change: dfTrials2Long return value (identifier replaces main_id sub_id) new option save EUCTR results PDF files user-specified directory","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-150-2021-03-14","dir":"Changelog","previous_headings":"","what":"ctrdata 1.5.0 (2021-03-14)","title":"ctrdata 1.5.0 (2021-03-14)","text":"CRAN release: 2021-03-16 return values dbGetFieldsIntoDf now mostly identical whether using src_mongo src_sqlite, best ensure portability analysis code permit dots queries / URLs improved handling queryterm renamed ctrGetQueryUrlFromBrowser ctrGetQueryUrl soft deprecated ctrGetQueryUrlFromBrowser ensure parallel retrievals EUCTR speed routines dbGetFieldsIntoDf make dfTrials2Long handle NA better improved documentation, clarified examples simplified internals typing fields, start typing results fields","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-141-2020-11-03","dir":"Changelog","previous_headings":"","what":"ctrdata 1.4.1 (2020-11-03)","title":"ctrdata 1.4.1 (2020-11-03)","text":"CRAN release: 2020-11-03 reset row names data frames returned functions update curl parameters accessing EUCTR","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-14-2020-10-17","dir":"Changelog","previous_headings":"","what":"ctrdata 1.4 (2020-10-17)","title":"ctrdata 1.4 (2020-10-17)","text":"new: easy access variables dfTrials2Long() + dfName2Value() improved dfMergeTwoVariablesRelevel() maintain type data revised simplified vignettes deprecated: dfListExtractKey() refactored parts euctr retrieval notify user euctr register server permit compression long retrieval take","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1329000-2020-10-08","dir":"Changelog","previous_headings":"","what":"ctrdata 1.3.2.9000 (2020-10-08)","title":"ctrdata 1.3.2.9000 (2020-10-08)","text":"fixed identifying unique ids","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-132-2020-10-03","dir":"Changelog","previous_headings":"","what":"ctrdata 1.3.2 (2020-10-03)","title":"ctrdata 1.3.2 (2020-10-03)","text":"CRAN release: 2020-10-05 quote system file paths","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-131-2020-08-01","dir":"Changelog","previous_headings":"","what":"ctrdata 1.3.1 (2020-08-01)","title":"ctrdata 1.3.1 (2020-08-01)","text":"CRAN release: 2020-08-02 fix error CI tests","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-130-2020-07-27","dir":"Changelog","previous_headings":"","what":"ctrdata 1.3.0 (2020-07-27)","title":"ctrdata 1.3.0 (2020-07-27)","text":"CRAN release: 2020-07-27 workaround EUCTR certificate issue streamline ctrGetQueryUrlFromBrowser() better handling complex fields include tests query string handling, checking parameters return values better clean-testing ctrLoadQueryIntoDb(querytorerun = …) now looks date querytorerun last run, often use euctr update options switching travis github action upped coverage code tested","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-121-2020-05-18","dir":"Changelog","previous_headings":"","what":"ctrdata 1.2.1 (2020-05-18)","title":"ctrdata 1.2.1 (2020-05-18)","text":"CRAN release: 2020-05-18 tinytest >= 1.2.1 avoid regression error correct testing detail","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-12-2019-12-07","dir":"Changelog","previous_headings":"","what":"ctrdata 1.2 (2019-12-07)","title":"ctrdata 1.2 (2019-12-07)","text":"CRAN release: 2019-12-08 correct cygwin install detail","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-11-2019-11-12","dir":"Changelog","previous_headings":"","what":"ctrdata 1.1 (2019-11-12)","title":"ctrdata 1.1 (2019-11-12)","text":"CRAN release: 2019-11-12 release nodbi 0.4 available","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1019005-2019-11-09","dir":"Changelog","previous_headings":"","what":"ctrdata 1.0.1.9005 (2019-11-09)","title":"ctrdata 1.0.1.9005 (2019-11-09)","text":"update description installation github","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1019004-2019-11-04","dir":"Changelog","previous_headings":"","what":"ctrdata 1.0.1.9004 (2019-11-04)","title":"ctrdata 1.0.1.9004 (2019-11-04)","text":"handled mixed arrays text values key ctgov trial records user information importing","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1019003-2019-11-04","dir":"Changelog","previous_headings":"","what":"ctrdata 1.0.1.9003 (2019-11-04)","title":"ctrdata 1.0.1.9003 (2019-11-04)","text":"nesting added euctr trial records user verbose information extended record importing","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-1019002-2019-11-03","dir":"Changelog","previous_headings":"","what":"ctrdata 1.0.1.9002 (2019-11-03)","title":"ctrdata 1.0.1.9002 (2019-11-03)","text":"improved parsing euctr trial records correct re-opening sqlite connection","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-101-2019-10-22","dir":"Changelog","previous_headings":"","what":"ctrdata 1.0.1 (2019-10-22)","title":"ctrdata 1.0.1 (2019-10-22)","text":"CRAN release: 2019-10-23 correction testing","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-10-2019-10-16","dir":"Changelog","previous_headings":"","what":"ctrdata 1.0 (2019-10-16)","title":"ctrdata 1.0 (2019-10-16)","text":"CRAN release: 2019-10-16 switch nodbi::scr_{mongo,sqlite}() re-implementation functions switch testthat tinytest, users can check tinytest::test_package(“ctrdata”) improvements euctr trial import new function dfListExtractKey","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0189005-2019-05-02","dir":"Changelog","previous_headings":"","what":"ctrdata 0.18.9005 (2019-05-02)","title":"ctrdata 0.18.9005 (2019-05-02)","text":"speed testing bash commands windows","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0182-2019-04-30","dir":"Changelog","previous_headings":"","what":"ctrdata 0.18.2 (2019-04-30)","title":"ctrdata 0.18.2 (2019-04-30)","text":"CRAN release: 2019-05-01 new release extended compatibility cygwin Windows","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0189004-2019-04-28","dir":"Changelog","previous_headings":"","what":"ctrdata 0.18.9004 (2019-04-28)","title":"ctrdata 0.18.9004 (2019-04-28)","text":"find use cygw* windows refactored escaping bash command called windows","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0189002-2019-04-21","dir":"Changelog","previous_headings":"","what":"ctrdata 0.18.9002 (2019-04-21)","title":"ctrdata 0.18.9002 (2019-04-21)","text":"corrected typing date fields","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0181-2019-04-14","dir":"Changelog","previous_headings":"","what":"ctrdata 0.18.1 (2019-04-14)","title":"ctrdata 0.18.1 (2019-04-14)","text":"simplified cygwin install updated documentation corrected inconsistent handling query terms","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0189001-2019-04-12","dir":"Changelog","previous_headings":"","what":"ctrdata 0.18.9001 (2019-04-12)","title":"ctrdata 0.18.9001 (2019-04-12)","text":"added automated proxy handling","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-018-2019-04-11","dir":"Changelog","previous_headings":"","what":"ctrdata 0.18 (2019-04-11)","title":"ctrdata 0.18 (2019-04-11)","text":"CRAN release: 2019-04-11 release version bug fixes field typing move use remote mongodb server updated vignettes","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-017-2019-03-27","dir":"Changelog","previous_headings":"","what":"ctrdata 0.17 (2019-03-27)","title":"ctrdata 0.17 (2019-03-27)","text":"release version","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0169002-2019-03-26","dir":"Changelog","previous_headings":"","what":"ctrdata 0.16.9002 (2019-03-26)","title":"ctrdata 0.16.9002 (2019-03-26)","text":"improve dbFindFields() formatting added parameter force running query ","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0169001-2019-03-26","dir":"Changelog","previous_headings":"","what":"ctrdata 0.16.9001 (2019-03-26","title":"ctrdata 0.16.9001 (2019-03-26","text":"added typing (numeric fields) improve cygwin install attempts information","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0169000-2019-03-24","dir":"Changelog","previous_headings":"","what":"ctrdata 0.16.9000 (2019-03-24)","title":"ctrdata 0.16.9000 (2019-03-24)","text":"removed dependency local mongodb installation (major rewrite) improved support remote mongodb servers (note changes host / db / uri parameters)","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0159007-2019-03-15","dir":"Changelog","previous_headings":"","what":"ctrdata 0.15.9007 (2019-03-15)","title":"ctrdata 0.15.9007 (2019-03-15)","text":"Important: Added checking SSL certificates EUCTR EUCTR server sending required intermediate root certificates, thus failing curl httr, see https://www.digicert.com/help/?host=www.clinicaltrialsregister.eu","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0150-2019-03-13","dir":"Changelog","previous_headings":"","what":"ctrdata 0.15.0 (2019-03-13)","title":"ctrdata 0.15.0 (2019-03-13)","text":"fixed EUCTR results retrieval (curl return value order predictable) removed second time adding metadata one function streamlined user information progress feedback","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0143-2019-03-12","dir":"Changelog","previous_headings":"","what":"ctrdata 0.14.3 (2019-03-12)","title":"ctrdata 0.14.3 (2019-03-12)","text":"turned error message new trials found prevent failing tests new trials found rss feed","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0142-2019-03-07","dir":"Changelog","previous_headings":"","what":"ctrdata 0.14.2 (2019-03-07)","title":"ctrdata 0.14.2 (2019-03-07)","text":"harmonise user information","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0141-2019-03-07","dir":"Changelog","previous_headings":"","what":"ctrdata 0.14.1 (2019-03-07)","title":"ctrdata 0.14.1 (2019-03-07)","text":"CRAN release: 2019-03-12 replaced RCurl (failed register servers) httr curl create README.md README.Rmd","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-014-2019-03-06","dir":"Changelog","previous_headings":"","what":"ctrdata 0.14 (2019-03-06)","title":"ctrdata 0.14 (2019-03-06)","text":"intention submit CRAN, therefore changing several warnings messages, improve testing tool chain applications","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0133-2019-03-03","dir":"Changelog","previous_headings":"","what":"ctrdata 0.13.3 (2019-03-03)","title":"ctrdata 0.13.3 (2019-03-03)","text":"prettified dbFindFields() removing count symbols (XX.) paths improve converting invalid XML EUCTR result files JSON","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0132-2019-02-28","dir":"Changelog","previous_headings":"","what":"ctrdata 0.13.2 (2019-02-28)","title":"ctrdata 0.13.2 (2019-02-28)","text":"made EUCTR retrieval robust added marginal case url single trial EUCTR extended timeout checking online status EUCTR","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0131-2019-02-24","dir":"Changelog","previous_headings":"","what":"ctrdata 0.13.1 (2019-02-24)","title":"ctrdata 0.13.1 (2019-02-24)","text":"added typing dates logical fields using dbGetFieldsIntoDf()","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-013-2019-01-06","dir":"Changelog","previous_headings":"","what":"ctrdata 0.13 (2019-01-06)","title":"ctrdata 0.13 (2019-01-06)","text":"dbGetVariablesIntoDf() deprecated, use dbGetFieldsIntoDf() instead dbFindVariable() deprecated, use dbFindFields() instead dbMergeTwoVariablesRelevel() parameter varnames deprecated, use colnames instead","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0121-2018-12-15","dir":"Changelog","previous_headings":"","what":"ctrdata 0.12.1 (2018-12-15)","title":"ctrdata 0.12.1 (2018-12-15)","text":"added function ctrFindActiveSubstanceSynonyms() obtain synonyms active substance added user information number trials CTGOV downloaded, limit 5000 per query corrected import EUCTR details = FALSE","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-012-2018-05-19","dir":"Changelog","previous_headings":"","what":"ctrdata 0.12 (2018-05-19)","title":"ctrdata 0.12 (2018-05-19)","text":"added possibility add user’s annotations records retrieved query (new option annotate.text)","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0112-2018-04-22","dir":"Changelog","previous_headings":"","what":"ctrdata 0.11.2 (2018-04-22)","title":"ctrdata 0.11.2 (2018-04-22)","text":"changed queryterm processing","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0111-2018-04-07","dir":"Changelog","previous_headings":"","what":"ctrdata 0.11.1 (2018-04-07)","title":"ctrdata 0.11.1 (2018-04-07)","text":"improved installFindMongoBinaries(), now better detect mongo binary locations use example cron scripts, may access user’s path information","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-011-2018-01-28","dir":"Changelog","previous_headings":"","what":"ctrdata 0.11 (2018-01-28)","title":"ctrdata 0.11 (2018-01-28)","text":"newly retrieved: EUCTR results history, new fields “firstreceived_results_date” “version_results_history” adding feature per issue #8","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0104-2017-12-28","dir":"Changelog","previous_headings":"","what":"ctrdata 0.10.4 (2017-12-28)","title":"ctrdata 0.10.4 (2017-12-28)","text":"note compatibility mongoDB versions fixing issue #8 simplified license","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0-10-4","dir":"Changelog","previous_headings":"","what":"ctrdata 0.10.3 (2017-11-24)","title":"ctrdata 0.10.4 (2017-12-28)","text":"changed custom-built “x5_trial_status” “p_end_of_trial_status” provided EUCTR","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0102-2017-11-22","dir":"Changelog","previous_headings":"","what":"ctrdata 0.10.2 (2017-11-22)","title":"ctrdata 0.10.2 (2017-11-22)","text":"editorial project updates","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0101-2017-07-30","dir":"Changelog","previous_headings":"","what":"ctrdata 0.10.1 (2017-07-30)","title":"ctrdata 0.10.1 (2017-07-30)","text":"now loading results euctr available xml","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0100-2017-07-25","dir":"Changelog","previous_headings":"","what":"ctrdata 0.10.0 (2017-07-25)","title":"ctrdata 0.10.0 (2017-07-25)","text":"fully load results ctgov prepare loading results euctr","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0914-2017-06-28","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.14 (2017-06-28)","title":"ctrdata 0.9.14 (2017-06-28)","text":"refactored system calls windows now part continuous integration","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0913-2017-06-23","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.13 (2017-06-23)","title":"ctrdata 0.9.13 (2017-06-23)","text":"refactored ctrLoadQueryIntoDb","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0912-2017-06-18","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.12 (2017-06-18)","title":"ctrdata 0.9.12 (2017-06-18)","text":"Preparing new CTGOV interface Improved documentation Corrected ctrGetQueryUrlFromBrowser return value","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-09111-2017-02-04","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.11.1 (2017-02-04)","title":"ctrdata 0.9.11.1 (2017-02-04)","text":"Improved documentation","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0911-2017-01-15","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.11 (2017-01-15)","title":"ctrdata 0.9.11 (2017-01-15)","text":"Added functionality: EUCTR fallback import mechanism large JSON file fails import mongoDB (splitting importing one JSON file trial, tested several thousand trials)","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-09101-2017-01-12","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.10.1 (2017-01-12)","title":"ctrdata 0.9.10.1 (2017-01-12)","text":"Fixes issues conversion EUCTR records details. Fixes issue placebo information converted IMP fields.","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-09100-2016-12-28","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.10.0 (2016-12-28)","title":"ctrdata 0.9.10.0 (2016-12-28)","text":"Added metadata attributes returned objects indicate database, query, timestamp etc.","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0995-2016-12-14","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.9.5 (2016-12-14)","title":"ctrdata 0.9.9.5 (2016-12-14)","text":"Added option ctrLoadQueryIntoDb(querytoupdate = “last”) re-download last query collection","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0994-2016-11-18","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.9.4 (2016-11-18)","title":"ctrdata 0.9.9.4 (2016-11-18)","text":"Added progress indicator ctrLoadQueryIntoDb() indicate network download traffic","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0993-2016-11-17","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.9.3 (2016-11-17)","title":"ctrdata 0.9.9.3 (2016-11-17)","text":"deduplication dbFindIdsUniqueTrials() optimised speed memory, added check ISRCTN","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0992-2016-11-13","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.9.2 (2016-11-13)","title":"ctrdata 0.9.9.2 (2016-11-13)","text":"corrected deduplication dbFindIdsUniqueTrials()","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-0991-2016-11-12","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.9.1 (2016-11-12)","title":"ctrdata 0.9.9.1 (2016-11-12)","text":"renamed ctrQueryHistoryInDb() dbQueryHistory() note: change json format query history, breaking compatibility refactored concerned functions use mongolite rmongodb supported","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-09-2016-10-17","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9 (2016-10-17)","title":"ctrdata 0.9 (2016-10-17)","text":"changed implementation dbFindIdsUniqueTrials() editorial changes examples","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-081-2016-09-07","dir":"Changelog","previous_headings":"","what":"ctrdata 0.8.1 (2016-09-07)","title":"ctrdata 0.8.1 (2016-09-07)","text":"added field indicate source register improved ctrLoadQueryIntoDb() details = FALSE added example map plotting","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-08-2016-09-04","dir":"Changelog","previous_headings":"","what":"ctrdata 0.8 (2016-09-04)","title":"ctrdata 0.8 (2016-09-04)","text":"dbFindIdsUniqueTrials now encapsulates dfFindIdsUniqueEuctrRecord dfFindIdsUniqueEuctrRecords removed installation instructions updated recently rmongodb removed CRAN","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-07-2016-05-29","dir":"Changelog","previous_headings":"","what":"ctrdata 0.7 (2016-05-29)","title":"ctrdata 0.7 (2016-05-29)","text":"dbGetVariablesIntoDf changed concatenate values array objects completed test adaptation travis improving perl regex checking helper applications","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-062-2016-04-20","dir":"Changelog","previous_headings":"","what":"ctrdata 0.6.2 (2016-04-20)","title":"ctrdata 0.6.2 (2016-04-20)","text":"add / update field “record_last_import” every imported / updated record","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-061-2016-04-02","dir":"Changelog","previous_headings":"","what":"ctrdata 0.6.1 (2016-04-02)","title":"ctrdata 0.6.1 (2016-04-02)","text":"changed provide vignettes","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-06-2016-02-25","dir":"Changelog","previous_headings":"","what":"ctrdata 0.6 (2016-02-25)","title":"ctrdata 0.6 (2016-02-25)","text":"different update mechanism EUCTR implemented corrected function name db… dfFindUniqueEuctrRecord()","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-059-2016-01-23","dir":"Changelog","previous_headings":"","what":"ctrdata 0.5.9 (2016-01-23)","title":"ctrdata 0.5.9 (2016-01-23)","text":"Corrected bugs Started preparation submission CRAN Preparing include package unit tests","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-05-2015-11-29","dir":"Changelog","previous_headings":"","what":"ctrdata 0.5 (2015-11-29)","title":"ctrdata 0.5 (2015-11-29)","text":"Published github Improved documentation","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-04-2015-10-08","dir":"Changelog","previous_headings":"","what":"ctrdata 0.4 (2015-10-08)","title":"ctrdata 0.4 (2015-10-08)","text":"Renamed functions consistency ease--use","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-03-2015-10-06","dir":"Changelog","previous_headings":"","what":"ctrdata 0.3 (2015-10-06)","title":"ctrdata 0.3 (2015-10-06)","text":"Added functionality download xml data CTGOV, includes data csv format","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-028","dir":"Changelog","previous_headings":"","what":"ctrdata 0.2.8","title":"ctrdata 0.2.8","text":"Changed extended history queries included database. New function dbCTRQueryHistory()","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-027","dir":"Changelog","previous_headings":"","what":"ctrdata 0.2.7","title":"ctrdata 0.2.7","text":"Added function merging variables different registers optionally merge values new values Note function findCTRkey renamed dbFindCTRkey acts database","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-025","dir":"Changelog","previous_headings":"","what":"ctrdata 0.2.5","title":"ctrdata 0.2.5","text":"Added function selecting preferred language versions trials EUCTR Improved use automatic proxy configuration script","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-022","dir":"Changelog","previous_headings":"","what":"ctrdata 0.2.2","title":"ctrdata 0.2.2","text":"Added proxy function improved installation cygwin MS Windows","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-02-2015-09-19","dir":"Changelog","previous_headings":"","what":"ctrdata 0.2 (2015-09-19)","title":"ctrdata 0.2 (2015-09-19)","text":"Now also working MS Windows","code":""},{"path":"https://rfhb.github.io/ctrdata/news/index.html","id":"ctrdata-01-2015-09-15","dir":"Changelog","previous_headings":"","what":"ctrdata 0.1 (2015-09-15)","title":"ctrdata 0.1 (2015-09-15)","text":"First version basic functionality Limited testing Works Mac OS X (10.10.x)","code":""}]
