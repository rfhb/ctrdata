% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbFindFields.R
\name{dbFindFields}
\alias{dbFindFields}
\title{Find names of fields in the database collection}
\usage{
dbFindFields(namepart = ".*", con, verbose = FALSE)
}
\arguments{
\item{namepart}{A character string (can include a regular expression,
including Perl-style) to be searched among all field names (keys)
in the collection, case-insensitive. The default ".*" lists all fields.}

\item{con}{A connection object, see section
`Databases` in \link{ctrdata}.}

\item{verbose}{If \code{TRUE}, prints additional information
(default \code{FALSE}).}
}
\value{
Vector of strings with full names of field(s) found,
ordered by register and alphabet. Names of the vector elements
are the register names for the respective fields.
}
\description{
Given part of the name of a field of interest to the user, this
function returns the full field names used in records that were
previously loaded into a collection
(using \link{ctrLoadQueryIntoDb}). Only names of fields that have
a value in the collection can be returned. The field names can be
fed into function \link{dbGetFieldsIntoDf} to extract the data
for the field(s) from the collection into a data frame.
}
\details{
In addition to the full names of all child fields (e.g.,
\code{clinical_results.outcome_list.outcome.measure.class_list.class.title})
this function may return names of parent fields (e.g.,
\code{clinical_results}).
Data in parent fields is typically complex (nested) and can be
converted into individual data elements with \link{dfTrials2Long},
and subelements can then be accessed with \link{dfName2Value}.
For field definitions of the registers, see row
"Definition" in \link{ctrdata-registers}.
Note: Only when \code{dbFindFields} is first called after
\link{ctrLoadQueryIntoDb}, it will take a moment.
}
\examples{

dbc <- nodbi::src_sqlite(
    dbname = system.file("extdata", "demo.sqlite", package = "ctrdata"),
    collection = "my_trials"
)

dbFindFields(namepart = "date", con = dbc)

# view all 3350+ fields from all registers:

allFields <- dbFindFields(con = dbc)

if (interactive()) View(data.frame(
  register = names(allFields),
  field = allFields))

}
