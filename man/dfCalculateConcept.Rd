% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dfCalculateConcept.R
\name{dfCalculateConcept}
\alias{dfCalculateConcept}
\title{Calculate fields from data in other fields}
\usage{
dfCalculateConcept(name = ".*", df = NULL)
}
\arguments{
\item{name}{String with name of a function to be applied to `df`, or regular
expression to list available functions.}

\item{df}{Optional. Data frame with fields needed to apply function `name`.}
}
\value{
Data frame with additional column of name `name` as calculated
applying the function `name`. If `df` is `NULL` (default), either a list of
functions corresponding to `name` or, if exactly one function is identified,
prints details of the function `name` to explain the implementation of the
concept and to return invisibly the names of fields needed for its calculation.
}
\description{
Across registers, calculate a trial concept (e.g., status of recruitment).
The concept is defined within ctrdata based on common understanding and
any relevant publications. Details of the implementation are printed,
if no data frame is specified, to show the peculiarities of the registers
for calculating the concept.
}
\details{
The names of the functions can also be used for the argument `calculate`
in \link{dbGetFieldsIntoDf} to achieve the same purpose already at the
time that a data frame with data is generated from the trial collection.
This approach will in most cases be more efficient and preferred over
using \link{dfCalculate}.

Note that the functions do not operate on historic versions (CTGOV2) but
only on information from the latest record.
}
\examples{

# list names of all available functions in ctrdata
dfCalculateConcept()

# list names of functions for regular expression of name
dfCalculateConcept(name = "status")

# describe a specific function
dfCalculateConcept(name = ".statusRecruitment")

# print descriptions of all functions
invisible(sapply(dfCalculateConcept(), dfCalculateConcept))

# apply dfCalculateConcept to data frame
dbc <- nodbi::src_sqlite(
  dbname = system.file("extdata", "demo.sqlite", package = "ctrdata"),
  collection = "my_trials",
  flags = RSQLite::SQLITE_RO)

# use with existing data frame,
# first get fields needed
trialsDf <- dbGetFieldsIntoDf(
  fields = unlist(dfCalculateConcept(name = ".statusRecruitment")),
  con = dbc)

# then calculate
dfCalculateConcept(
  name = ".statusRecruitment",
  df = trialsDf)

# or use already when creating a trial data frame
# to subset to the unique records of clinical trials
trialsDf <- dbGetFieldsIntoDf(
  calculate = ".isUniqueTrial",
  con = dbc)
trialsDf[trialsDf[[".isUniqueTrial"]], ]

}
