[{"path":"https://rfhb.github.io/ctrdata/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2017 Ralf Herold Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_install.html","id":"install-package-ctrdata-on-a-r-system","dir":"Articles","previous_headings":"","what":"Install package ctrdata on a R system","title":"Install R package ctrdata","text":"R Project website (https://www.r-project.org/) provides installers R system. can used software products graphical user interfaces R Studio, Microsoft R Open, Visual Studio Code. General information ctrdata package available : https://github.com/rfhb/ctrdata. R, execute: using development version package ctrdata, install GitHub: Either install package ctrdata user’s library.","code":"install.packages(\"ctrdata\") # install preparatory package install.packages(c(\"devtools\", \"httr\")) devtools::install_github(\"rfhb/ctrdata\")"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_install.html","id":"internet-access-via-proxy","dir":"Articles","previous_headings":"Install package ctrdata on a R system","what":"Internet access via proxy","title":"Install R package ctrdata","text":"Functions package ctrdata start ctr... require access trial registers internet via https protocol. Many organisastions use transparent proxies may require users configurations. However, necessary, package ctrdata can use proxy settings set users R session follows:","code":"Sys.setenv(https_proxy = \"your_proxy.server.domain:8080\") # if needed Sys.setenv(https_proxy_user = \"your_userid:your_password\") # if needed"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_install.html","id":"additional-installation-aspects","dir":"Articles","previous_headings":"Install package ctrdata on a R system","what":"Additional installation aspects","title":"Install R package ctrdata","text":"command line tools perl, sed php (5.2 higher) required ctrLoadQueryIntoDb(), main function package ctrdata. function package requirement.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_install.html","id":"ms-windows","dir":"Articles","previous_headings":"Install package ctrdata on a R system > Additional installation aspects","what":"MS Windows","title":"Install R package ctrdata","text":"requirement MS Windows, Cygwin environment installed, local directory c:\\cygwin (folder corresponding c:\\cygw*). installation minimal Cygwin environment MS Windows can done help package ctrdata R follows: update correct Cygwin installation: internet access requires specify proxy (see ): install Cygwin manually, download setup executable . MS Windows command window Powershell window, use following command line. parameters explained .","code":"ctrdata::installCygwinWindowsDoInstall() ctrdata::installCygwinWindowsDoInstall(force = TRUE) ctrdata::installCygwinWindowsDoInstall(proxy = \"proxy.server.domain:8080\") setup-x86_64.exe --no-admin --quiet-mode --verbose --upgrade-also --root c:/cygwin --site http://www.mirrorservice.org/sites/sourceware.org/pub/cygwin/ --packages perl,php-jsonc,php-simplexml"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_install.html","id":"macos-linux-and-other-operating-systems","dir":"Articles","previous_headings":"Install package ctrdata on a R system > Additional installation aspects","what":"macOS, Linux and other operating systems","title":"Install R package ctrdata","text":"command line tools perl, sed php (5.2 higher) may already available default Linux macOS systems. checked running ctrLoadQueryIntoDb(); alternatively, check (ctrdata:::checkBinary()). macOS, homebrew can used install php may needed starting macOS 12 Monterey: first install homebrew run Terminal command: brew install php. Linux, tools installation vary distribution (e.g., sudo apt install php php-xml php-json)","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_install.html","id":"databases-to-use","dir":"Articles","previous_headings":"Install package ctrdata on a R system","what":"Databases to use","title":"Install R package ctrdata","text":"time, PostgreSQL, SQLite remote local MongoDB database can used package ctrdata. full SQLite database provided R package RSQLite. Suggested installation instructions PostgreSQL local MongoDB server ; remote MongoDB database server accessible . available, PostgreSQL MongoDB local server recommended notably faster performance SQLite.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_install.html","id":"attach-package-ctrdata","dir":"Articles","previous_headings":"Install package ctrdata on a R system","what":"Attach package ctrdata","title":"Install R package ctrdata","text":"completing installation, attach package user’s library. also check availability additional installation requirements mentioned : Remember respect registers’ terms conditions (see ctrOpenSearchPagesInBrowser(copyright = TRUE)). Please cite package publication follows: Ralf Herold (2022). ctrdata: Retrieve Analyze Clinical Trials Public Registers. R package version 1.9.0. https://cran.r-project.org/package=ctrdata","code":"library(ctrdata)"},{"path":[]},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_retrieve.html","id":"attach-package-ctrdata","dir":"Articles","previous_headings":"Get started","what":"Attach package ctrdata","title":"Retrieve clinical trial information","text":"Remember respect registers’ terms conditions (see ctrOpenSearchPagesInBrowser(copyright = TRUE)). Please cite package publication follows: Ralf Herold (2022). ctrdata: Retrieve Analyze Clinical Trials Public Registers. R package version 1.9.0. https://cran.r-project.org/package=ctrdata","code":"library(ctrdata) citation(\"ctrdata\")"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_retrieve.html","id":"open-registers-advanced-search-page-in-browser","dir":"Articles","previous_headings":"Get started","what":"Open register’s advanced search page in browser","title":"Retrieve clinical trial information","text":"functions open browser, user can start searching trials interest.","code":"# Please review and respect register copyrights: ctrOpenSearchPagesInBrowser(   copyright = TRUE ) # Open browser with example search: ctrOpenSearchPagesInBrowser(   url = \"cancer&age=under-18\",   register = \"EUCTR\" )"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_retrieve.html","id":"adjust-search-parameters-and-execute-search-in-browser","dir":"Articles","previous_headings":"Get started","what":"Adjust search parameters and execute search in browser","title":"Retrieve clinical trial information","text":"Refine search trials interest listed browser. total number trials can retrieved package ctrdata intentionally limited queries 10000 result records.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_retrieve.html","id":"copy-address-from-browser-address-bar-to-clipboard","dir":"Articles","previous_headings":"Get started","what":"Copy address from browser address bar to clipboard","title":"Retrieve clinical trial information","text":"Use functions keyboard shortcuts according operating system.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_retrieve.html","id":"get-address-from-clipboard","dir":"Articles","previous_headings":"Get started","what":"Get address from clipboard","title":"Retrieve clinical trial information","text":"next steps executed R environment:","code":"q <- ctrGetQueryUrl() # * Using clipboard content as register query URL: https://www.clinicaltrialsregister.eu/ctr-search/search?query=cancer&age=under-18&status=completed&phase=phase-one # * Found search query from EUCTR: query=cancer&age=under-18&status=completed&phase=phase-one  q #                                                   query-term  query-register # 1 query=cancer&age=under-18&status=completed&phase=phase-one           EUCTR  # To check, this opens a browser with the query ctrOpenSearchPagesInBrowser(url = q)"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_retrieve.html","id":"retrieve-protocol-related-information-transform-save-to-database-check","dir":"Articles","previous_headings":"Get started","what":"Retrieve protocol-related information, transform, save to database, check","title":"Retrieve clinical trial information","text":"file-base SQLite database, takes 20 seconds 300 records, time needed internet-retrieval slow register. Speed higher registers, using MongoDB memory-based SQLite.","code":"# Count number of trial records ctrLoadQueryIntoDb(   queryterm = q,   only.count = TRUE )$n # (1/3) Checking trials in EUCTR: # Retrieved overview, multiple records of 71 trial(s) from 4 page(s) to be downloaded # [1] 71  # Connect to a database and chose a table / collection db <- nodbi::src_sqlite(   dbname = \"sqlite_file.sql\",   collection = \"test\" )  # Retrieve records, download into database ctrLoadQueryIntoDb(   queryterm = q,   con = db ) # Checking helper binaries: done # (1/3) Checking trials in EUCTR: # Retrieved overview, multiple records of 71 trial(s) from 4 page(s) to be downloaded # Downloading trials (4 pages in parallel)... # Note: register server cannot compress data, transfer takes longer, about 0.4s per trial # Pages: 4 done, 0 ongoing # (2/3) Converting to JSON, 281 records converted # (3/3) Importing JSON records into database... # = Imported or updated 281 records on 71 trial(s) # Updated history (\"meta-info\" in \"test\")  # Show which queries have been downloaded into database dbQueryHistory(con = db) #       query-timestamp query-register query-records # 1 2022-03-19 09:41:36          EUCTR           281 #                                                   query-term # 1 query=cancer&age=under-18&status=completed&phase=phase-one"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_retrieve.html","id":"repeat-and-update-a-previous-query","dir":"Articles","previous_headings":"","what":"Repeat and update a previous query","title":"Retrieve clinical trial information","text":"Instead “last”, integer number can specified querytoupdate corresponds number using dbQueryHistory(). Depending register, update (differential update) possible original query executed fully .","code":"ctrLoadQueryIntoDb(   querytoupdate = \"last\",   con = db )"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_retrieve.html","id":"retrieve-results","dir":"Articles","previous_headings":"","what":"Retrieve results","title":"Retrieve clinical trial information","text":"EUCTR, result-related trial information requested retrieved, take longer download store. CTGOV, results always included retrieval. file-base SQLite database, takes 4 minutes 300 records, time needed merging result- protocol-related information SQLite; much faster MongoDB PostgreSQL. download presence results recorded dbQueryHistory() availability results increases time.","code":"ctrLoadQueryIntoDb(   queryterm = q,   euctrresults = TRUE,   con = db ) # Checking helper binaries: done # (1/3) Checking trials in EUCTR: # Retrieved overview, multiple records of 71 trial(s) from 4 page(s) to be downloaded # Downloading trials (4 pages in parallel)... # Note: register server cannot compress data, transfer takes longer, about 0.2s per trial # Pages: 4 done, 0 ongoing # (2/3) Converting to JSON, 281 records converted # (3/3) Importing JSON records into database... # = Imported or updated 281 records on 71 trial(s) # Retrieving results if available from EUCTR for 71 trials: # (1/4) Downloading results (max. 10 trials in parallel): # 71 downloaded, extracting x x x x x . x . PDF . . . x . . . x PDF . PDF . . PDF . x . . # x . . x x . . x . . . . . . . . . . . . . . x . . . . . . PDF . . . . . . . . . . . . # PDF . . . . . PDF . PDF . # (2/3) Converting to JSON, 57 records converted # (3/4) Importing JSON into database... # (4/4) Results history: not retrieved (euctrresultshistory = FALSE) # = Imported or updated results for 57 trials # Updated history (\"meta-info\" in \"test\")"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_retrieve.html","id":"add-information-from-another-register","dir":"Articles","previous_headings":"","what":"Add information from another register","title":"Retrieve clinical trial information","text":"collection can used store (analyse) trial information different registers. moment, ctrdata supports three registers: https://ClinicalTrials.Gov/, https://ClinicalTrialsRegister.EU/ https://www.ISRCTN.com/. Example: file-base SQLite database, takes 10 seconds 200 records. Note example, warning message issued importing NDJSON file trial records. warning arises high level complexity XML content trial records. issue can resolved increasing operating system stack size available R, see: https://github.com/rfhb/ctrdata/issues/22","code":"ctrLoadQueryIntoDb(   queryterm = \"https://clinicaltrials.gov/ct2/results?cond=neuroblastoma&recrs=e&age=0&intr=Drug\",   con = db ) # * Found search query from CTGOV: cond=neuroblastoma&recrs=e&age=0&intr=Drug # Checking helper binaries: done # (1/3) Checking trials in CTGOV: # Retrieved overview, records of 200 trial(s) are to be downloaded (estimate: 1.6 MB) # Downloading: 1.4 MB # (2/3) Converting to JSON, 200 records converted # (3/3) Importing JSON records into database... # = Imported or updated 175 trial(s) # Updated history (\"meta-info\" in \"test\")  # Warning message: # [...]/ctrDATA15bc13c33351a/ctgov_trials_7.ndjson: Error : C stack usage  8342562 is too close to the limit"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_retrieve.html","id":"add-personal-annotations","dir":"Articles","previous_headings":"","what":"Add personal annotations","title":"Retrieve clinical trial information","text":"downloading trial information, user can specify annotation records downloaded. default, annotations accumulated trial records loaded updated; alternatively, annotations can replaced. Annotations useful analyses, example specially identify subsets records database.","code":"ctrLoadQueryIntoDb(   queryterm = \"https://clinicaltrials.gov/ct2/results?cond=neuroblastoma&recrs=e&age=0&intr=Drug&cntry=DE\",   annotation.text = \"site_DE \",   annotation.mode = \"append\",   con = db ) # * Found search query from CTGOV: cond=neuroblastoma&recrs=e&age=0&intr=Drug&cntry=DE # Checking helper binaries: done # (1/3) Checking trials in CTGOV: # Retrieved overview, records of 11 trial(s) are to be downloaded (estimate: 0.088 MB) # Downloading: 69 kB      # (2/3) Converting to JSON, 11 records converted # (3/3) Importing JSON records into database... # = Imported or updated 11 trial(s)                 # = Annotated retrieved records (11 records) # Updated history (\"meta-info\" in \"test\")"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_retrieve.html","id":"find-synonyms-of-active-substance-names","dir":"Articles","previous_headings":"","what":"Find synonyms of active substance names","title":"Retrieve clinical trial information","text":"registers automatically expand search terms include alternative terms, codes names active substances. obtain character vector synonyms active substance name, use: names can used queries register.","code":"ctrFindActiveSubstanceSynonyms(   activesubstance = \"imatinib\" ) # [1] \"imatinib\"  \"gleevec\" \"sti 571\" \"glivec\" \"CGP 57148\" \"st1571\""},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_retrieve.html","id":"using-a-mongodb-database","dir":"Articles","previous_headings":"","what":"Using a MongoDB database","title":"Retrieve clinical trial information","text":"example works free service . Note user name password need encoded. format connection string documented https://docs.mongodb.com/manual/reference/connection-string/.","code":"# Specify base uri for remote MongoDB server, #  as part of the encoded connection string db <- nodbi::src_mongo(   # Note: this provides read-only access   url = \"mongodb+srv://DWbJ7Wh:bdTHh5cS@cluster0-b9wpw.mongodb.net\",   db = \"dbperm\",   collection = \"dbperm\")  # Since the above access is read-only, # just obtain fields of interest: dbGetFieldsIntoDf(   fields = c(\"a2_eudract_number\",              \"e71_human_pharmacology_phase_i\"),   con = db) #                  _id a2_eudract_number e71_human_pharmacology_phase_i # 1 2010-024264-18-3RD    2010-024264-18                           TRUE # 2  2010-024264-18-AT    2010-024264-18                           TRUE # 3  2010-024264-18-DE    2010-024264-18                           TRUE # 4  2010-024264-18-GB    2010-024264-18                           TRUE # 5  2010-024264-18-IT    2010-024264-18                           TRUE # 6  2010-024264-18-NL    2010-024264-18                           TRUE"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_summarise.html","id":"preparations","dir":"Articles","previous_headings":"","what":"Preparations","title":"Summarise and analyse clinical trial information","text":"using MongoDB, faster SQLite, can handle credentials, provides access remote servers can directly retrieve nested elements paths. See README.md Retrieve clinical trial information examples using SQLite. Also PostgreSQL can used database, see Install R package ctrdata. See Retrieve clinical trial information details.","code":"db <- nodbi::src_mongo(   url = \"mongodb://localhost\",   db = \"my_database_name\",   collection = \"my_collection_name\") db # MongoDB 5.0.6 (uptime: 387411s) # URL: mongodb://localhost # Database: my_database_name # Collection: my_collection_name library(ctrdata)  # These two queries are similar, for completed interventional (drug) # trials with children with a neuroblastoma from either register ctrLoadQueryIntoDb(   # using queryterm and register ...   queryterm = \"query=neuroblastoma&age=under-18&status=completed\",   register = \"EUCTR\",   euctrresults = TRUE,   con = db ) ctrLoadQueryIntoDb(   # or using full URL of search results   queryterm =     \"https://clinicaltrials.gov/ct2/results?cond=neuroblastoma&recrs=e&age=0&intr=Drug\",   con = db ) dbQueryHistory(con = db) #       query-timestamp query-register query-records                                        query-term # 1 2022-03-19 10:53:29          EUCTR           146 query=neuroblastoma&age=under-18&status=completed # 2 2022-03-19 10:53:39          CTGOV           200        cond=neuroblastoma&recrs=e&age=0&intr=Drug"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_summarise.html","id":"find-fields-variables-of-interest","dir":"Articles","previous_headings":"","what":"Find fields / variables of interest","title":"Summarise and analyse clinical trial information","text":"Specify part name variable interest; variables including deeply nested variable names searched. search fields cached thus accelerated R session, long new ctrLoadQueryIntoDb() executed.","code":"dbFindFields(namepart = \"date\", con = db) # Finding fields in database collection (may take some time) # Field names cached for this session. #                                                                    EUCTR #                                 \"n_date_of_competent_authority_decision\" #                                                                    EUCTR #                                  \"p_date_of_the_global_end_of_the_trial\" #                                                                    EUCTR #                                     \"trialInformation.analysisStageDate\" #                                                                    EUCTR #                                  \"trialInformation.globalEndOfTrialDate\" #                                                                    EUCTR #                                 \"trialInformation.primaryCompletionDate\" #                                                                    EUCTR #                                  \"trialInformation.recruitmentStartDate\" #                                                                    EUCTR # \"x6_date_on_which_this_record_was_first_entered_in_the_eudract_database\" #                                                                    EUCTR #                                     \"n_date_of_ethics_committee_opinion\" #                                                                    CTGOV #                                                        \"completion_date\" #                                                                    CTGOV #                                                     \"last_update_posted\" #                                                                    CTGOV #                                                  \"last_update_submitted\" #                                                                    CTGOV #                                               \"last_update_submitted_qc\" #                                                                    CTGOV #                                                \"primary_completion_date\" #                                                                    CTGOV #                                          \"required_header.download_date\" #                                                                    CTGOV #                                                             \"start_date\" #                                                                    CTGOV #                                                      \"verification_date\" #                                                                    CTGOV #              \"provided_document_section.provided_document.document_date\""},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_summarise.html","id":"data-frame-from-database","dir":"Articles","previous_headings":"","what":"Data frame from database","title":"Summarise and analyse clinical trial information","text":"fields interest can obtained database represented R data.frame:","code":"result <- dbGetFieldsIntoDf(   c(\"f41_in_the_member_state\",     \"f422_in_the_whole_clinical_trial\",     \"a1_member_state_concerned\",     \"p_end_of_trial_status\",     \"n_date_of_competent_authority_decision\",     \"a2_eudract_number\",     \"overall_status\",     \"start_date\",     \"primary_completion_date\"),   con = db)"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_summarise.html","id":"metadata-from-data-frame","dir":"Articles","previous_headings":"","what":"Metadata from data frame","title":"Summarise and analyse clinical trial information","text":"objects returned functions package include attributes metadata indicate database, table / collection query details. Metadata can reused R. database, variable \"_id\" unique index record. \"_id\" NCT number CTGOV records (e.g., “NCT00002560”), EudraCT number EUCTR records including postfix identifying EU Member State (e.g., “2008-001436-12-NL”). relevant de-duplicate records trial can registered CTGOV EUCTR, can records involved country EUCTR. De-duplication done analysis stage enables select trial record taken one register, one EU Member State. basis de-duplication recording additional trial identifiers supplementary fields (variables), checked reported using function dbFindIdsUniqueTrials(): unique ids can used like de-duplicate data.frame created :","code":"attributes(result) # [...] # $`ctrdata-dbname` # [1] \"my_database_name\"  # $`ctrdata-table` # [1] \"my_collection_name\"  # $`ctrdata-dbqueryhistory` #       query-timestamp query-register query-records                                        query-term # 1 2022-03-19 10:53:29          EUCTR           146 query=neuroblastoma&age=under-18&status=completed # 2 2022-03-19 10:53:39          CTGOV           200        cond=neuroblastoma&recrs=e&age=0&intr=Drug # Obtain de-duplicated trial record ids ids <- dbFindIdsUniqueTrials(   preferregister = \"EUCTR\",   con = db ) # Searching for duplicate trials... #  - Getting trial ids (may take some time), 346 found in collection #  - Finding duplicates among registers' and sponsor ids... #  - 106 EUCTR _id were not preferred EU Member State record for 42 trials #  - Keeping 187 / 40 records from CTGOV / EUCTR # = Returning keys (_id) of 227 records in collection \"my_collection_name\" # Eliminate duplicate trials records: result <- result[ result[[\"_id\"]] %in% ids, ] # nrow(result) # [1] 227"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_summarise.html","id":"simple-analysis---dates","dir":"Articles","previous_headings":"","what":"Simple analysis - dates","title":"Summarise and analyse clinical trial information","text":"data.frame generated dbGetFieldsIntoDf(), fields typed dates, logical, character numbers. typing facilitates using respective type data analysis, example dates base R graphics: Histogram1","code":"str(result) # 'data.frame':   227 obs. of  10 variables: # $ _id                                   : chr  \"2004-004386-15-DE\" \"2005-000915-80-IT\" \"2005-001267-63-IT\" ... # $ f41_in_the_member_state               : int  NA NA 5 37 70 24 100 35 10 24 ... # $ f422_in_the_whole_clinical_trial      : int  230 NA 12 67 70 NA 100 156 2230 NA ... # $ a1_member_state_concerned             : chr  \"Germany - BfArM\" \"Italy - Italian Medicines Agency\" ... # $ p_end_of_trial_status                 : chr  \"Completed\" \"Completed\" \"Completed\" \"Completed\" ... # $ n_date_of_competent_authority_decision: Date, format: \"2005-07-08\" \"2005-04-21\" \"2005-07-08\" \"2006-05-26\" ... # $ a2_eudract_number                     : chr  \"2004-004386-15\" \"2005-000915-80\" \"2005-001267-63\" \"2005-002089-13\" ... # $ overall_status                        : chr  NA NA NA NA ... # $ start_date                            : Date, format: NA NA NA NA ... # $ primary_completion_date               : Date, format: NA NA NA NA ... # Open file for saving png(\"vignettes/nb1.png\") # Visualise trial start date hist(   result[[\"n_date_of_competent_authority_decision\"]],   breaks = \"years\") box() dev.off()"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_summarise.html","id":"merge-corresponding-fields-from-registers","dir":"Articles","previous_headings":"","what":"Merge corresponding fields from registers","title":"Summarise and analyse clinical trial information","text":"field “n_date_of_competent_authority_decision” used exists EUCTR, yet corresponds field “start_date” CTGOV. Thus, give start trial, two fields can merged analysis, using convenience function dfMergeTwoVariablesRelevel() ctrdata package: Histogram2 sophisticated use dfMergeTwoVariablesRelevel(), values original variables can mapped new values merged variable, follows:","code":"# Merge two variables into a new variable: result$trialstart <- dfMergeTwoVariablesRelevel(   result,   colnames = c(     \"n_date_of_competent_authority_decision\",     \"start_date\")) # Unique values returned (first three): 2005-07-08, 2005-04-21, 2006-05-26  # Plot from both registers png(\"vignettes/nb2.png\") hist(   result[[\"trialstart\"]],   breaks = \"years\") box() dev.off() # First, define how values of the new, merged variable # (e.g., \"ongoing\") will result from values of the # original variable (e.g, \"Recruiting): mapped_values <- list(   \"ongoing\" = c(\"Recruiting\", \"Active\", \"Ongoing\",                 \"Active, not recruiting\",                 \"Enrolling by invitation\", \"Restarted\"),   \"completed\" = c(\"Completed\", \"Prematurely Ended\", \"Terminated\"),   \"other\"     = c(\"Withdrawn\", \"Suspended\", \"No longer available\",                   \"Not yet recruiting\", \"Temporarily Halted\",                   \"Unknown status\", \"GB - no longer in EU/EEA\"))  # Secondly, use the list of mapped # values when merging two variable: tmp <- dfMergeTwoVariablesRelevel(   result,   colnames = c(\"overall_status\",                \"p_end_of_trial_status\"),   levelslist = mapped_values) # Unique values returned: completed, ongoing, other  table(tmp) #   completed   ongoing     other #         223         3         1"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_summarise.html","id":"annotations-made-by-user","dir":"Articles","previous_headings":"","what":"Annotations made by user","title":"Summarise and analyse clinical trial information","text":"using ctrLoadQueryIntoDb(), ctrdata adds record fields annotation record_last_import. annotation field single string user specifies retrieving trials (Retrieve clinical trial information). user can specify append, prefix replace existing annotations trial record loaded , see example . last date time trial record imported updated automatically using ctrLoadQueryIntoDb(). fields can also used analysis. example, string functions can used annotations, e.g. split components. Since annotations specified retrieving trials steps , far annotation fields stopifnodata set FALSE avoid function raises error alert users:","code":"ctrLoadQueryIntoDb(   queryterm = \"query=neuroblastoma&resultsstatus=trials-with-results\",   register = \"EUCTR\",   euctrresults = TRUE,   annotation.text = \"test annotation\",   annotation.mode = \"append\",   con = db )  dbFindFields(\"clinical_results.outcome_list.outcome\", db) result <- dbGetFieldsIntoDf(   fields = c(     \"annotation\",     \"record_last_import\"),   con = db)  str(result) # 'data.frame':   373 obs. of  3 variables: #  $ _id               : chr  \"2004-004386-15-DE\" \"2004-004386-15-ES\" \"2004-004386-15-GB\" ... #  $ annotation        : chr  \"test annotation\" \"test annotation\" \"test annotation\" ... #  $ record_last_import: Date, format: \"2022-03-20\" \"2022-03-20\" \"2022-03-20\" \"2022-03-20\""},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_summarise.html","id":"analysing-nested-fields-such-as-trial-results","dir":"Articles","previous_headings":"","what":"Analysing nested fields such as trial results","title":"Summarise and analyse clinical trial information","text":"registers represent clinical trial information nesting fields (e.g., several reporting groups within several measures within one several endpoints). visualisation hierarchical representation CTGOV : CtgovNested analysis nested information highlighted duration response facilitated ctrdata follows. main steps : transform nested information long, name-value data frame identify measures interest (e.g. duration response, blue circles ) located information hierarchy specifying name value fields (wherename, wherevalue) finally obtain value specifying name(s) value field(s) (valuename, red circles figure ).","code":"# remotes::install_github(\"https://github.com/hrbrmstr/jsonview\") result <- dbGetFieldsIntoDf(\"clinical_results.outcome_list.outcome\", db) jsonview::json_tree_view(result[[\"clinical_results.outcome_list.outcome\"]][  result[[\"_id\"]] == \"NCT00520936\"]) # 1. Create data frame from results fields. # These are the key results fields from # CTGOV and from EUCTR: result <- dbGetFieldsIntoDf(   fields = c(     # CTGOV     \"clinical_results.baseline.analyzed_list.analyzed.count_list.count\",     \"clinical_results.baseline.group_list.group\",     \"clinical_results.baseline.analyzed_list.analyzed.units\",     \"clinical_results.outcome_list.outcome\",     \"study_design_info.allocation\",     # EUCTR     \"@attributes.eudractNumber\",     \"trialInformation.populationAgeGroup\",     \"subjectDisposition.recruitmentDetails\",     \"baselineCharacteristics.baselineReportingGroups.baselineReportingGroup\",     \"endPoints.endPoint\",     \"trialChanges.hasGlobalInterruptions\",     \"subjectAnalysisSets\",     \"adverseEvents.seriousAdverseEvents.seriousAdverseEvent\"   ),   con = db ) # Keep only unique trial records result <- result[ result[[\"_id\"]] %in% dbFindIdsUniqueTrials(con = db), ] # [...] #  - Keeping 184 / 50 records from CTGOV / EUCTR # = Returning keys (_id) of 234 records in collection \"my_collection_name\"  # 2. The columns of the results data frame # contain nested lists of fields, example: str(result[[\"endPoints.endPoint\"]][1])  # All nested data are transformed to a long, # name-value data.frame (resulting in several # hundred rows per trial record): long_result <- dfTrials2Long(df = result) # Total 99006 rows, 143 unique names of variables  # 3. Obtain values for fields of interest where # they related to measures of interest. The # parameters can be regular expressions. dor <- dfName2Value(   df = long_result,   wherename = paste0(     \"clinical_results.outcome_list.outcome.measure.title|\",     \"endPoints.endPoint.title\"),   wherevalue = \"duration of response\",   valuename = paste0(     \"clinical_results.*category_list.category.measurement_list.measurement.value|\",     \"endPoints.*armReportingGroup.tendencyValues.tendencyValue.value\"   ) )  # Duration of response has been reported variably in # months and days. Here, just select trials reporting # duration of response in months: dor <- dor[   grepl(\"months\",         dfName2Value(           df = long_result,           wherename = paste0(             \"clinical_results.*outcome.measure.title|\",             \"endPoints.endPoint.title\"),           wherevalue = \"duration of response\",           valuename = paste0(             \"clinical_results.*measure.units|\",             \"endPoints.endPoint.unit\")         )[[\"value\"]],         ignore.case = TRUE), ]  # the identifier is generated to identify repeated and # nested elements in a trial, so that it permits to # find the valuename that corresponds to the item # for which wherename has wherevalue) dor[, c(\"_id\", \"identifier\", \"value\")] #                 _id identifier value # 1 2010-019348-37-IT        8.2   7.0 # 2 2010-019348-37-IT        8.3   8.1 # 5 2013-003595-12-SK        6.2 999.0 # 6 2013-003595-12-SK        6.3 999.0 # 7 2013-003595-12-SK        6.4 999.0 # 8 2013-003595-12-SK        6.5 999.0 # 9 2013-003595-12-SK        6.6 999.0"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_summarise.html","id":"analysing-primary-endpoints","dir":"Articles","previous_headings":"","what":"Analysing primary endpoints","title":"Summarise and analyse clinical trial information","text":"Text analysis used many fields trial information registers. example simply categorise type primary endpoint. addition, number subjects extracted compared type primary endpoint. BoxPEP","code":"# Several \"measure\" entries are in \"primary_outcome\". # They are concatenated into a list when specifying # the JSON path \"primary_outcome.measure\" result <- dbGetFieldsIntoDf(c(   # CTGOV   \"primary_outcome.measure\",   \"enrollment\",   # EUCTR   \"e51_primary_end_points\",   # \"f11_trial_has_subjects_under_18\"   \"f11_number_of_subjects_for_this_age_range\"),   con = db)  # De-duplicate result <- result[   result[[\"_id\"]] %in%     dbFindIdsUniqueTrials(con = db), ]  # Merge primary endpoint (pep) result$pep <- dfMergeTwoVariablesRelevel(   df = result,   colnames =     c(\"primary_outcome.measure\",       \"e51_primary_end_points\") )  # Merge number of subjects result$nsubj <- dfMergeTwoVariablesRelevel(   df = result,   colnames =     c(\"enrollment\",       \"f11_number_of_subjects_for_this_age_range\") )  # For primary endpoint of interest, # use regular expression on text: result$pep_is_efs <- grepl(   pattern = \"((progression|event|relapse|recurrence|disease)[- ]free)|pfs|dfs|efs)\",   x = result$pep,   ignore.case = TRUE)  # Tabulate table(result$pep_is_efs) # FALSE  TRUE #   184    21  # Plot library(ggplot2) ggplot(data = result,        aes(x = nsubj,            y = pep_is_efs)) +   geom_boxplot() +   scale_x_log10() ggsave(\"vignettes/boxpep.png\", width = 6, height = 4)"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_summarise.html","id":"investigational-or-authorised-medicinal-product","dir":"Articles","previous_headings":"","what":"Investigational or authorised medicinal product?","title":"Summarise and analyse clinical trial information","text":"information status authorisation (licensing) medicine used trial recorded EUCTR field dimp.d21_imp_to_be_used_in_the_trial_has_a_marketing_authorisation. corresponding field CTGOV known. status tree starting dimp element. HistogramNBtrials","code":"# Get results result <- dbGetFieldsIntoDf(   fields =     c(\"a1_member_state_concerned\",       \"n_date_of_competent_authority_decision\",       \"dimp.d21_imp_to_be_used_in_the_trial_has_a_marketing_authorisation\",       \"x6_date_on_which_this_record_was_first_entered_in_the_eudract_database\",       \"f422_in_the_whole_clinical_trial\",       \"a2_eudract_number\"),   con = db)  # Find first date of authorisation in EU member state tmp <- aggregate(   result[[\"n_date_of_competent_authority_decision\"]],   by = list(result[[\"a2_eudract_number\"]]),   FUN = function(x) min(x)) result <- merge(   x = result,   y = tmp,   by.x = \"a2_eudract_number\",   by.y = \"Group.1\",   all.x = TRUE) result[[\"startdatefirst\"]] <- dfMergeTwoVariablesRelevel(   df = result,   colnames = c(     \"x\",     \"x6_date_on_which_this_record_was_first_entered_in_the_eudract_database\") )  # Now de-duplicate result <- result[   result[[\"_id\"]] %in%     dbFindIdsUniqueTrials(       include3rdcountrytrials = FALSE,       con = db), ]  # How many of the investigational medicinal product(s) # used in the trial are authorised? number_authorised <- sapply(   result[[\"dimp.d21_imp_to_be_used_in_the_trial_has_a_marketing_authorisation\"]],   function(i) length(i[i])) table(number_authorised, exclude = \"\") # number_authorised #  0  1  2  3  4  6  8 15  # 20 15  4  3  1  1  1  1  result[[\"any_authorised\"]] <- number_authorised > 0  # Plot library(ggplot2) library(scales) ggplot(   data = result,   aes(     x = startdatefirst,     fill = any_authorised)) +   scale_x_date(     breaks = breaks_width(width = \"2 years\"),     labels = date_format(\"%Y\")) +   geom_histogram(binwidth = 2 * 365.25) +   labs(     title = \"Neuroblastoma trials in EU\",     x = \"Year of trial authorisation (or entered in EUCTR)\",     y = \"Number of trials\",     fill = \"Medicine\\nauthorised?\") ggsave(\"vignettes/nbtrials.png\", width = 6, height = 4)"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_summarise.html","id":"analyses-using-aggregation-pipeline-and-mapreduce","dir":"Articles","previous_headings":"","what":"Analyses using aggregation pipeline and mapreduce","title":"Summarise and analyse clinical trial information","text":"example analysis functions can run directly MongoDB server, fast consume R resources.","code":"# Load library for database access library(mongolite)  # Create R object m to access the # collection db created above: m <- mongo(url = paste0(db[[\"url\"]], \"/\", db[[\"db\"]]),            collection = db[[\"collection\"]])  # Number of records in  collection: m$count() # [1] 374  # Number of EUCTR records, using JSON for query: m$count(query = '{\"_id\": {\"$regex\": \"[0-9]{4}-[0-9]{6}-[0-9]{2}\",                  \"$options\": \"i\"}}') #[1] 173  # Alternative: m$count(query = '{\"ctrname\": \"EUCTR\"}') # [1] 173  # Number of CTGOV records: m$count(query = '{\"_id\": {\"$regex\": \"NCT[0-9]{8}\",                  \"$options\": \"i\"}}') # [1] 200  # Alternative: m$count(query = '{\"ctrname\": \"CTGOV\"}') # [1] 200  # To best define regular expressions for analyses, # inspect the field (here, primary_outcome.measure): # Regular expressions (\"$regex\") are case insensitive (\"i\") head(   m$distinct(key = \"primary_outcome.measure\",              query = '{\"_id\": {\"$regex\": \"NCT[0-9]{8}\", \"$options\": \"i\"}}')) # [1] \"- To demonstrate that 123I-mIBG planar scintigraphy is sensitive and ...\" # [2] \"1-year Progression-free Survival\" # [3] \"Ability of iodine I 131 metaiodobenzylguanidine to provide palliative therapy\" # [4] \"Acute and late toxicities\" # [5] \"Adverse events as a measure of safety/tolerability\" # [6] \"Adverse events as assessed by (CTCAE) version 4.0\""},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_summarise.html","id":"aggregation","dir":"Articles","previous_headings":"Analyses using aggregation pipeline and mapreduce","what":"Aggregation","title":"Summarise and analyse clinical trial information","text":"following example uses aggregation pipeline MongoDB. See details mongo’s aggregation pipleline: https://docs.mongodb.org/manual/core/aggregation-pipeline/","code":"# Total count of PFS, EFS, RFS or DFS out <- m$aggregate(   # Count number of documents in collection that   # matches in primary_outcome.measure the   # regular expression,   pipeline =     '[{\"$match\": {\"primary_outcome.measure\":       {\"$regex\": \"(progression|event|relapse|recurrence|disease)[- ]free\",                  \"$options\": \"i\"}}},       {\"$group\": {\"_id\": \"null\", \"count\": {\"$sum\": 1}}}]') out #    _id count # 1 null    16  # List records of trials with overall survival  # as primary endpoint, and list start date out <- m$aggregate(   pipeline =     '[{\"$match\": {\"primary_outcome.measure\":       {\"$regex\": \"overall survival\", \"$options\": \"i\"}}},       {\"$project\": {\"_id\": 1, \"start_date\": 1}}]') head(out) #           _id      start_date # 1 NCT00499616 October 8, 2007 # 2 NCT00793845     August 2008 # 3 NCT00923351    June 2, 2007"},{"path":"https://rfhb.github.io/ctrdata/dev/articles/ctrdata_summarise.html","id":"mapreduce","dir":"Articles","previous_headings":"Analyses using aggregation pipeline and mapreduce","what":"Mapreduce","title":"Summarise and analyse clinical trial information","text":"following examples uses map-reduce operation MongoDB. Note deprecated starting MongoDB 5. information: https://docs.mongodb.com/manual/core/map-reduce/","code":"# Count number of trials by number of study  # participants in bins of hundreds of participants: hist <- m$mapreduce(   map = \"function() {emit(Math.floor(this.f422_in_the_whole_clinical_trial/100)*100, 1)}\",   reduce = \"function(id, counts) {return Array.sum(counts)}\" ) # read as: 85 trials had 0 to less than 100 participants hist[order(hist[[\"_id\"]]),] #     _id value # 4     0    85 # 7   100    45 # 10  200    11 # 6   300     4 # 5   400     9 # 2   600     1 # 3  2200     4 # 9  2700     2 # 8  3300     4 # 1   NaN   209"},{"path":"https://rfhb.github.io/ctrdata/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ralf Herold. Author, maintainer.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Herold R (2022). ctrdata: Retrieve Analyze Clinical Trials Public Registers. R package version 1.9.1.9000, https://cran.r-project.org/package=ctrdata.","code":"@Manual{,   title = {ctrdata: Retrieve and Analyze Clinical Trials in Public Registers},   author = {Ralf Herold},   year = {2022},   note = {R package version 1.9.1.9000},   url = {https://cran.r-project.org/package=ctrdata}, }"},{"path":"https://rfhb.github.io/ctrdata/dev/index.html","id":"ctrdata-for-aggregating-and-analysing-clinical-trials","dir":"","previous_headings":"","what":"Retrieve and Analyze Clinical Trials in Public Registers","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"package ctrdata provides functions retrieving (downloading) information clinical trials public registers, aggregating analysing information; can used EU Clinical Trials Register (“EUCTR”, https://www.clinicaltrialsregister.eu/) ClinicalTrials.gov (“CTGOV”, https://clinicaltrials.gov/) ISRCTN (https://www.isrctn.com/) motivation understand trends design conduct trials, availability patients detailled results. ctrdata package R system, systems tools can used databases created . README reviewed 2022-04-24 v1.9.1. Main features: Protocol-related trial information easily retrieved (downloaded): Users define query register’s web interface use ctrdata retrieve one step trials resulting query. Results-related trial information personal annotations can including retrieval. Synonyms active substance can also found. Retrieved (downloaded) trial information transformed stored document-centric database, fast offline access. Uses PostgreSQL (🔔new v1.9.0), RSQLite MongoDB databases, via R package nodbi: see section Databases . Easily re-run previous query update database. Analysis can done R (using ctrdata convenience functions) others systems. Unique (de-duplicated) trial records identified across registers. ctrdata can merge recode information (fields) also provides easy access even deeply-nested fields (new v1.4.0). Remember respect registers’ terms conditions (see ctrOpenSearchPagesInBrowser(copyright = TRUE)). Please cite package publication follows: “Ralf Herold (2021). ctrdata: Retrieve Analyze Clinical Trials Public Registers. R package version 1.8.0, https://cran.r-project.org/package=ctrdata” Package ctrdata used : Blogging Innovation coming paediatric research Report impact collaboration: value UK medical research EU science health","code":""},{"path":[]},{"path":"https://rfhb.github.io/ctrdata/dev/index.html","id":"1-install-package-ctrdata-in-r","dir":"","previous_headings":"Installation","what":"1. Install package ctrdata in R","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Package ctrdata CRAN GitHub. Within R, use following commands install package ctrdata: commands also install package dependencies, nodbi, jsonlite, httr, curl, clipr, xml2, rvest stringi.","code":"# Install CRAN version: install.packages(\"ctrdata\")  # Alternatively, install development version: install.packages(\"devtools\") devtools::install_github(\"rfhb/ctrdata\", build_vignettes = TRUE)"},{"path":"https://rfhb.github.io/ctrdata/dev/index.html","id":"2-command-line-tools-perl-sed-and-php-52-or-higher","dir":"","previous_headings":"Installation","what":"2. Command line tools perl, sed and php (5.2 or higher)","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"required ctrLoadQueryIntoDb(), main function package ctrdata (see Example workflow); function also checks tools can used. MS Windows, install Cygwin: R, run ctrdata::installCygwinWindowsDoInstall() automated minimal installation. Alternatively, manually install Cygwin packages perl, php-jsonc php-simplexml c:\\cygwin. installation needs 160 MB disk space; administrator credentials needed. macOS including 11 Big Sur, already installed; alternative 🔔macOS 12 Monterey, homebrew can used: brew install php, seems include libraries required ctrdata. Linux, usually already installed; tools installation vary distribution (e.g., sudo apt install php php-xml php-json).","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/index.html","id":"vignettes","dir":"","previous_headings":"Installation","what":"Vignettes","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Install R package ctrdata Retrieve clinical trial information Summarise analyse clinical trial information","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/index.html","id":"overview-of-functions-in-ctrdata","dir":"","previous_headings":"","what":"Overview of functions in ctrdata","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"functions listed approximate order use user’s workflow (bold, main functions). package dplyr loaded, tibble returned instead data.frame.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/index.html","id":"databases-that-can-be-used-with-ctrdata","dir":"","previous_headings":"","what":"Databases that can be used with ctrdata","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Package ctrdata retrieves trial information stores database collection, given connection object parameter con several ctrdata functions; connection object created slightly different ways three supported database backends can used ctrdata shown table. Besides ctrdata functions , connection object can equally used functions packages, nodbi (last row table) , case MongoDB database backend, mongolite (see vignettes).","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/index.html","id":"example-workflow","dir":"","previous_headings":"","what":"Example workflow","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"aim download protocol-related trial information tabulate trials’ status conduct. Attach package ctrdata: See help get started ctrdata: Information trial registers can used ctrdata: Open registers’ advanced search pages browser: Adjust search parameters execute search browser trials interest listed browser, copy address browser’s address bar clipboard Search used example: https://www.clinicaltrialsregister.eu/ctr-search/search?query=cancer&age=-18&phase=phase-one&status=completed Get address clipboard: Retrieve protocol-related information, transform save database: database collection specified first, using nodbi (see specify PostgreSQL, RSQlite MongoDB backend); , trial information retrieved loaded collection: hood, scripts euctr2json.sh xml2json.php (ctrdata/exec) transform EUCTR plain text files CTGOV well ISRCTN XML files ndjson format, imported database collection. Analyse Tabulate status trials part agreed paediatric development program (paediatric investigation plan, PIP): Add records another register (CTGOV) collection Search used example: https://clinicaltrials.gov/ct2/results?cond=neuroblastoma&rslt=&recrs=e&age=0&intr=Drug Add records third register (ISRCTN) collection Search used example: https://www.isrctn.com/search?q=neuroblastoma Result-related trial information Analyse simple result details (see vignette examples): Neuroblastoma trials","code":"library(ctrdata) help(\"ctrdata-package\") help(\"ctrdata-registers\") ctrOpenSearchPagesInBrowser()  # Please review and respect register copyrights: ctrOpenSearchPagesInBrowser(copyright = TRUE) q <- ctrGetQueryUrl() # * Using clipboard content as register query URL: https://www.clinicaltrialsregister.eu/ctr-search/search?query=cancer&age=under-18&phase=phase-one&status=completed # * Found search query from EUCTR: query=cancer&age=under-18&phase=phase-one&status=completed  q #                                                   query-term  query-register # 1 query=cancer&age=under-18&phase=phase-one&status=completed           EUCTR # Connect to (or newly create) an SQLite database # that is stored in a file on the local system: db <- nodbi::src_sqlite(   dbname = \"some_database_name.sqlite_file\",   collection = \"some_collection_name\")  # See section Databases below # for MongoDB as alternative  # Retrieve trials from public register: ctrLoadQueryIntoDb(   queryterm = q,   con = db) # * Found search query from EUCTR: query=cancer&age=under-18&phase=phase-one&status=completed # (1/3) Checking trials in EUCTR: # Retrieved overview, multiple records of 66 trial(s) from 4 page(s) to be downloaded # Checking helper binaries: done # Downloading trials (4 pages in parallel)... # Note: register server cannot compress data, transfer takes longer, about 0.4s per trial # Pages: 4 done, 0 ongoing # (2/3) Converting to JSON, 248 records converted # (3/3) Importing JSON records into database... # = Imported or updated 248 records on 66 trial(s) # * Updated history (\"meta-info\" in \"some_collection_name\") # Get all records that have values in the fields of interest: result <- dbGetFieldsIntoDf(   fields = c(     \"a7_trial_is_part_of_a_paediatric_investigation_plan\",     \"p_end_of_trial_status\",     \"a2_eudract_number\"),   con = db)  # Find unique trial identifiers for trials that have nore than # one record, for example for several EU Member States: uniqueids <- dbFindIdsUniqueTrials(con = db) # Searching for duplicate trials... #  - Getting trial ids, 279 found in collection #  - Finding duplicates among registers' and sponsor ids... #  - 208 EUCTR _id were not preferred EU Member State record for 71 trials #  - Keeping 71 records from EUCTR # = Returning keys (_id) of 71 records in collection \"some_collection_name\"  # Keep only unique / de-duplicated records: result <- subset(   result,   subset = `_id` %in% uniqueids )  # Tabulate the selected clinical trial information: with(result,      table(        p_end_of_trial_status,        a7_trial_is_part_of_a_paediatric_investigation_plan)) #                     a7_trial_is_part_of_a_paediatric_investigation_plan # p_end_of_trial_status      Information not present in EudraCT No Yes #   Completed                                                 6 32  16 #   GB - no longer in EU/EEA                                  0  7   5 #   Ongoing                                                   0  1   0 #   Prematurely Ended                                         1  2   0 #   Restarted                                                 0  1   0 # Retrieve trials from another register: ctrLoadQueryIntoDb(   queryterm = \"cond=neuroblastoma&rslt=With&recrs=e&age=0&intr=Drug\",   register = \"CTGOV\",   con = db) # * Found search query from CTGOV: cond=neuroblastoma&rslt=With&recrs=e&age=0&intr=Drug # (1/3) Checking trials in CTGOV: # Retrieved overview, records of 44 trial(s) are to be downloaded # Checking helper binaries: done # Downloading: 620 kB # (2/3) Converting to JSON, 44 records converted # (3/3) Importing JSON records into database... # = Imported or updated 43 trial(s) # * Updated history (\"meta-info\" in \"some_collection_name\") # Retrieve trials from another register: ctrLoadQueryIntoDb(   queryterm = \"https://www.isrctn.com/search?q=neuroblastoma\",   con = db) # * Found search query from ISRCTN: q=neuroblastoma # (1/3) Checking trials in ISRCTN: # Retrieved overview, records of 9 trial(s) are to be downloaded # Checking helper binaries: done # Downloading: 90 kB # (2/3) Converting to JSON, 9 records converted # (3/3) Importing JSON records into database... # = Imported or updated 9 trial(s) # * Updated history (\"meta-info\" in \"some_collection_name\") # Get all records that have values in any of the specified fields result <- dbGetFieldsIntoDf(   fields = c(     \"clinical_results.baseline.analyzed_list.analyzed.count_list.count\",     \"clinical_results.baseline.group_list.group\",     \"clinical_results.baseline.analyzed_list.analyzed.units\",     \"study_design_info.allocation\",     \"location\"),   con = db)  # Transform all fields into long name - value format result <- dfTrials2Long(df = result) # Total 6386 rows, 12 unique names of variables  # [1.] get counts of subjects for all arms into data frame # This count is in the group where either its title or its # description starts with \"Total\" nsubj <- dfName2Value(   df = result,   valuename = \"clinical_results.baseline.analyzed_list.analyzed.count_list.count.value\",   wherename = paste0(     \"clinical_results.baseline.group_list.group.title|\",     \"clinical_results.baseline.group_list.group.description\"),   wherevalue = \"^Total\" )  # [2.] count number of sites nsite <- dfName2Value(   df = result,   # some ctgov records use   # location.name, others use   # location.facility.name   valuename = \"^location.*name$\" ) # count nsite <- tapply(   X = nsite[[\"value\"]],   INDEX = nsite[[\"_id\"]],   FUN = length,   simplify = TRUE ) nsite <- data.frame(   \"_id\" = names(nsite),   nsite,   check.names = FALSE,   stringsAsFactors = FALSE,   row.names = NULL )  # [3.] randomised? ncon <- dfName2Value(   df = result,   valuename = \"study_design_info.allocation\" )  # merge sets nset <- merge(nsubj, nsite, by = \"_id\") nset <- merge(nset, ncon, by = \"_id\")  # Example plot library(ggplot2) ggplot(data = nset) +   labs(title = \"Neuroblastoma trials with results\",        subtitle = \"clinicaltrials.gov\") +   geom_point(     mapping = aes(       x = nsite,       y = value.x,       colour = value.y == \"Randomized\")) +   scale_x_log10() +   scale_y_log10() +   xlab(\"Number of sites\") +   ylab(\"Total number of subjects\") +   labs(colour = \"Randomised?\") ggsave(filename = \"man/figures/README-ctrdata_results_neuroblastoma.png\",        width = 5, height = 3, units = \"in\")"},{"path":[]},{"path":"https://rfhb.github.io/ctrdata/dev/index.html","id":"additional-features-under-consideration","dir":"","previous_headings":"Meta","what":"Additional features under consideration","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Retrieve previous versions protocol- results-related information. challenge , apparently, initial versions queried historical versions can retrieved one--one structured format. Merge results-related fields retrieved different registers (e.g., corresponding endpoints). challenge incomplete congruency different structure fields.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/index.html","id":"acknowledgements","dir":"","previous_headings":"Meta","what":"Acknowledgements","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Data providers curators clinical trial registers. Please review respect copyrights terms conditions, see ctrOpenSearchPagesInBrowser(copyright = TRUE). Package ctrdata made possible building work done R, curl, httr, xml2, rvest, mongolite, jsonlite, nodbi, RPostgres, RSQLite clipr.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/index.html","id":"issues-and-notes","dir":"","previous_headings":"Meta","what":"Issues and notes","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Please file issues bugs . Also check handle closed issues, e.g. C stack usage close limit SSL certificate problem: unable get local issuer certificate Information trial registers may fully correct; see example publication CTGOV. attempts made harmonise field names registers (nevertheless, dfMergeTwoVariablesRelevel() can used merge map two variables / fields one).","code":""},{"path":[]},{"path":"https://rfhb.github.io/ctrdata/dev/index.html","id":"mongodb","dir":"","previous_headings":"Trial records’ JSON in databases","what":"MongoDB","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Example JSON representation MongoDB","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/index.html","id":"sqlite","dir":"","previous_headings":"Trial records’ JSON in databases","what":"SQLite","title":"Retrieve and Analyze Clinical Trials in Public Registers","text":"Example JSON representation SQLite","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrDb.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and prepare nodbi connection object for ctrdata — ctrDb","title":"Check and prepare nodbi connection object for ctrdata — ctrDb","text":"Check prepare nodbi connection object ctrdata","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrDb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and prepare nodbi connection object for ctrdata — ctrDb","text":"","code":"ctrDb(con = nodbi::src_sqlite(collection = \"ctrdata_auto_generated\"))"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrDb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and prepare nodbi connection object for ctrdata — ctrDb","text":"con connection object, see section `Databases` ctrdata-package","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrDb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and prepare nodbi connection object for ctrdata — ctrDb","text":"Connection object list, collection  element root","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrFindActiveSubstanceSynonyms.html","id":null,"dir":"Reference","previous_headings":"","what":"Find synonyms of an active substance — ctrFindActiveSubstanceSynonyms","title":"Find synonyms of an active substance — ctrFindActiveSubstanceSynonyms","text":"active substance can identified recommended international nonproprietary name (INN), trade product name, company code(s). Retrieves substances searched register 'ClinicalTrials.Gov' given active substance.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrFindActiveSubstanceSynonyms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find synonyms of an active substance — ctrFindActiveSubstanceSynonyms","text":"","code":"ctrFindActiveSubstanceSynonyms(activesubstance = \"\")"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrFindActiveSubstanceSynonyms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find synonyms of an active substance — ctrFindActiveSubstanceSynonyms","text":"activesubstance active substance, atomic character vector","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrFindActiveSubstanceSynonyms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find synonyms of an active substance — ctrFindActiveSubstanceSynonyms","text":"character vector active substance (input parameter)  synonyms, found","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrFindActiveSubstanceSynonyms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find synonyms of an active substance — ctrFindActiveSubstanceSynonyms","text":"","code":"if (FALSE) {  ctrFindActiveSubstanceSynonyms(activesubstance = \"imatinib\") # [1] \"imatinib\"  \"gleevec\"   \"sti 571\"   \"glivec\"    \"CGP 57148\" \"st1571\"  }"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrGetQueryUrl.html","id":null,"dir":"Reference","previous_headings":"","what":"Get query details — ctrGetQueryUrl","title":"Get query details — ctrGetQueryUrl","text":"Extracts query parameters register name parameter `url` clipboard, URL register search copied.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrGetQueryUrl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get query details — ctrGetQueryUrl","text":"","code":"ctrGetQueryUrl(url = \"\", register = \"\")"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrGetQueryUrl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get query details — ctrGetQueryUrl","text":"url URL browser address bar. specified, clipboard contents checked suitable URL. Can also contain query term dbQueryHistory()[\"query-term\"] register Optional name register (.e., \"EUCTR\" \"CTGOV\") case url query term","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrGetQueryUrl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get query details — ctrGetQueryUrl","text":"data frame (tibble, dplyr loaded) column names `query-term` `query-register`. data frame (tibble) can passed parameter `query-term` ctrLoadQueryIntoDb parameter `url` ctrOpenSearchPagesInBrowser.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrGetQueryUrl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get query details — ctrGetQueryUrl","text":"","code":"if (FALSE) {  dbc <- nodbi::src_sqlite(collection = \"my_collection\")  # user now copies into the clipboard the URL from # the address bar of the browser that shows results # from a query in one of the trial registers # # information about all trials found with this query # is now loaded into the database collection ctrLoadQueryIntoDb(   queryterm = ctrGetQueryUrl(),   con = dbc )  }"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrLoadQueryIntoDb.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and store register trial information — ctrLoadQueryIntoDb","title":"Load and store register trial information — ctrLoadQueryIntoDb","text":"Retrieves updates information clinical trials registers stores collection database. main function ctrdata-package accessing registers loading trial information database collection, even different queries different registers. query details stored database collection can accessed using dbQueryHistory. previous query can re-run, replaces adds trial records. However, user annotations trial records kept.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrLoadQueryIntoDb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and store register trial information — ctrLoadQueryIntoDb","text":"","code":"ctrLoadQueryIntoDb(   queryterm = NULL,   register = \"\",   querytoupdate = NULL,   forcetoupdate = FALSE,   euctrresults = FALSE,   euctrresultshistory = FALSE,   euctrresultspdfpath = NULL,   annotation.text = \"\",   annotation.mode = \"append\",   parallelretrievals = 10L,   only.count = FALSE,   con = NULL,   verbose = FALSE )"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrLoadQueryIntoDb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load and store register trial information — ctrLoadQueryIntoDb","text":"queryterm Either string full URL search register, data frame returned ctrGetQueryUrl dbQueryHistory functions, , together parameter register, string query elements search URL. queryterm recorded collection later use update records. register String abbreviation register query, either \"EUCTR\", \"CTGOV\" \"ISRCTN\". needed queryterm provide information register query (see queryterm). querytoupdate Either word \"last\" number query (based dbQueryHistory) run retrieve trial records new updated since query run last time. parameter takes precedence queryterm. EUCTR, updates available last seven days; query run time passed since run last. forcetoupdate TRUE, run query given querytoupdate, irrespective run last (default FALSE). euctrresults TRUE, also download available results retrieving loading trials EUCTR. slows function. (CTGOV, available results always retrieved loaded.) euctrresultshistory TRUE, also download available history results publication EUCTR. quite time-consuming (default FALSE). euctrresultspdfpath valid directory specified, save PDF files result publications EUCTR directory (default NULL). annotation.text Text including records retrieved current query, field \"annotation\". annotation.mode One \"append\" (default), \"prepend\" \"replace\" new annotation.text respect existing annotation records retrieved current query. parallelretrievals Number parallel downloads information register, defaults 10. .count Set TRUE return number trial records found register query. load trial information database. Default FALSE. con connection object, see section `Databases` ctrdata-package verbose Printing additional information set TRUE; default FALSE.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrLoadQueryIntoDb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and store register trial information — ctrLoadQueryIntoDb","text":"list elements `n` (number trial records newly imported updated), `success` (vector _id's successfully loaded records), `failed` (vector identifiers records failed load) `queryterm` (query term used). returned list several attributes (including database collection name, well query history database collection) facilitate documentation.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrLoadQueryIntoDb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and store register trial information — ctrLoadQueryIntoDb","text":"","code":"if (FALSE) { dbc <- nodbi::src_sqlite(collection = \"my_collection\")  # Retrieve protocol- and results-related information # on a single trial identified by its EU number ctrLoadQueryIntoDb(   queryterm = \"2013-001291-38\",   register = \"EUCTR\",   euctrresults = TRUE,   con = dbc )  # Retrieve all information on about 2,000 ongoing # interventional cancer trials involving children # into the same collection as used before ctrLoadQueryIntoDb(   queryterm = \"cancer&recr=Open&type=Intr&age=0\",   register = \"CTGOV\",   con = dbc )  }"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrOpenSearchPagesInBrowser.html","id":null,"dir":"Reference","previous_headings":"","what":"Open stored query or register search page — ctrOpenSearchPagesInBrowser","title":"Open stored query or register search page — ctrOpenSearchPagesInBrowser","text":"Open advanced search pages register(s), execute search browser","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrOpenSearchPagesInBrowser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open stored query or register search page — ctrOpenSearchPagesInBrowser","text":"","code":"ctrOpenSearchPagesInBrowser(url = \"\", register = \"\", copyright = FALSE, ...)"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrOpenSearchPagesInBrowser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open stored query or register search page — ctrOpenSearchPagesInBrowser","text":"url search results page show browser. Can return value ctrGetQueryUrl dbQueryHistory. register Register(s) open. Either \"EUCTR\" \"CTGOV\" vector . Default open registers' advanced search pages. open browser previous search, output ctrGetQueryUrl one row dbQueryHistory can used. copyright (Optional) set TRUE, opens copyright pages register(s). ... May include deprecated input parameter.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrOpenSearchPagesInBrowser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open stored query or register search page — ctrOpenSearchPagesInBrowser","text":"Always TRUE, invisibly.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrOpenSearchPagesInBrowser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open stored query or register search page — ctrOpenSearchPagesInBrowser","text":"","code":"if (FALSE) {  # Check copyrights before using registers ctrOpenSearchPagesInBrowser(copyright = TRUE)  # open last query loaded into the collection dbc <- nodbi::src_sqlite(   collection = \"previously_created\" ) ctrOpenSearchPagesInBrowser(   dbQueryHistory(con = dbc))  }"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrdata-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ctrdata: get started, connect database and function overview — ctrdata-package","title":"ctrdata: get started, connect database and function overview — ctrdata-package","text":"package aggregating analysing information results clinical trials, retrieved public study registers","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrdata-package.html","id":"database-connection","dir":"Reference","previous_headings":"","what":"Database connection","title":"ctrdata: get started, connect database and function overview — ctrdata-package","text":"Package ctrdata retrieves trial information stores database collection, given connection object parameter con several ctrdata functions; connection object created slightly different ways three supported database backends: Example using ctrdata function connection object: ctrdata::dbQueryHistory(con = dbc). Besides ctrdata functions , connection object can equally used functions package nodbi, example nodbi::docdb_query(src = dbc, key = dbc$collection, fields = '{\"_id\": 1}', query = '{\"sponsors.lead_sponsor.agency_class\": \"Industry\"}')","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrdata-package.html","id":"operations-on-a-clinical-trial-register","dir":"Reference","previous_headings":"","what":"Operations on a clinical trial register","title":"ctrdata: get started, connect database and function overview — ctrdata-package","text":"ctrOpenSearchPagesInBrowser, ctrLoadQueryIntoDb (load trial records database collection), ctrFindActiveSubstanceSynonyms; see ctrdata-registers details registers search","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrdata-package.html","id":"get-a-data-frame-from-the-database-collection","dir":"Reference","previous_headings":"","what":"Get a data frame from the database collection","title":"ctrdata: get started, connect database and function overview — ctrdata-package","text":"dbFindFields (find names fields interest trial records collection), dbGetFieldsIntoDf (create data frame fields interest collection), dbFindIdsUniqueTrials (de-duplicated identifiers clinical trial records can used subset data frame)","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrdata-package.html","id":"operate-on-a-data-frame-with-trial-information","dir":"Reference","previous_headings":"","what":"Operate on a data frame with trial information","title":"ctrdata: get started, connect database and function overview — ctrdata-package","text":"dfTrials2Long (convert fields nested elements long format), dfName2Value (get values variable(s) interest). dfMergeTwoVariablesRelevel","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrdata-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ctrdata: get started, connect database and function overview — ctrdata-package","text":"Ralf Herold ralf.herold@mailbox.org","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrdata-registers.html","id":null,"dir":"Reference","previous_headings":"","what":"ctrdata: detailed information on clinical trial registers — ctrdata-registers","title":"ctrdata: detailed information on clinical trial registers — ctrdata-registers","text":"Registers clinical trials can accessed package ctrdata-package end 2021","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrdata-registers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ctrdata: detailed information on clinical trial registers — ctrdata-registers","text":"EUCTR: European Union Clinical Trials Register contains 40,000 clinical trials (using one medicines investigational medicinal product, IMP; Europe beyond) CTGOV: ClinicalTrials.gov includes almost 400,000 interventional observational studies ISCRTN: ISRCTN Registry includes 21,000 interventional observational health studies *example expert search retrieves interventional trials neonates, investigating infectious conditions: EUCTR retrieves trials neonates, exclusively. CTGOV expert search retrieves trials exclusively neonates. ISRCTN retrieves small number studies. Thus, loading trials ctrLoadQueryIntoDb database collection, corresponding sets trials need defined, based values fields interest (e.g., eligibility.maximum_age CTGOV f115_children_211years EUCTR), can obtained collection using dbGetFieldsIntoDf.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/ctrdata-registers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ctrdata: detailed information on clinical trial registers — ctrdata-registers","text":"Ralf Herold ralf.herold@mailbox.org","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbFindFields.html","id":null,"dir":"Reference","previous_headings":"","what":"Find names of fields in the database collection — dbFindFields","title":"Find names of fields in the database collection — dbFindFields","text":"Given part name field interest user, function returns full field names used records previously loaded collection (using ctrLoadQueryIntoDb). field names can fed function dbGetFieldsIntoDf extract data collection data frame. addition full names leaf fields (e.g., clinical_results.outcome_list.outcome.measure.class_list.class.title) function also returns names node fields (e.g., clinical_results). Data node fields typically complex (multiply nested) can converted individual data elements function dfTrials2Long, possibly followed function dfName2Value.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbFindFields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find names of fields in the database collection — dbFindFields","text":"","code":"dbFindFields(namepart = \"\", con, verbose = FALSE)"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbFindFields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find names of fields in the database collection — dbFindFields","text":"namepart plain string (can include regular expression, including Perl-style) searched among field names (keys) collection. Use `\".*` find fields. con connection object, see section `Databases` ctrdata-package verbose TRUE, prints additional information (default FALSE).","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbFindFields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find names of fields in the database collection — dbFindFields","text":"Vector strings full names field(s) found, alphabetical order register. named vector names vector register names respective fields.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbFindFields.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find names of fields in the database collection — dbFindFields","text":"fields EUCTR (protocol- results-related information), https://eudract.ema.europa.eu/result.html. fields CTGOV (protocol-related information), see https://prsinfo.clinicaltrials.gov/definitions.html. fields ISRCTN (protocol-related information), see https://www.isrctn.com/page/definitions. Note: `dbFindFields` first called ctrLoadQueryIntoDb, take moment.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbFindFields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find names of fields in the database collection — dbFindFields","text":"","code":"if (FALSE) {  dbc <- nodbi::src_sqlite(collection = \"my_collection\")  dbFindFields(namepart = \"date\", con = dbc)  }"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbFindIdsUniqueTrials.html","id":null,"dir":"Reference","previous_headings":"","what":"Get identifiers of deduplicated trial records — dbFindIdsUniqueTrials","title":"Get identifiers of deduplicated trial records — dbFindIdsUniqueTrials","text":"Records clinical trial can loaded one register collection. function returns identifiers records collection loaded register(s) preferred user. registers recording identifiers also registers, used function provide vector identifiers deduplicated trials.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbFindIdsUniqueTrials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get identifiers of deduplicated trial records — dbFindIdsUniqueTrials","text":"","code":"dbFindIdsUniqueTrials(   preferregister = c(\"EUCTR\", \"CTGOV\", \"ISRCTN\"),   prefermemberstate = \"DE\",   include3rdcountrytrials = TRUE,   con,   verbose = FALSE )"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbFindIdsUniqueTrials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get identifiers of deduplicated trial records — dbFindIdsUniqueTrials","text":"preferregister vector order preference registers generate unique _id's, default c(\"EUCTR\", \"CTGOV\", \"ISRCTN\") prefermemberstate Code single EU Member State records returned. available, record DE lacking , random Member State's record trial returned. list codes EU  Member States, please see vector countriesEUCTR. Specifying \"3RD\" return Third Country record trials, available. include3rdcountrytrials logical value trials retained conducted exclusively third countries, , outside European Union. Ignored prefermemberstate set \"3RD\". con connection object, see section `Databases` ctrdata-package verbose set TRUE, prints fields registers used find corresponding trial records","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbFindIdsUniqueTrials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get identifiers of deduplicated trial records — dbFindIdsUniqueTrials","text":"vector strings keys (\"_id\") records collection represent unique trials.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbFindIdsUniqueTrials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get identifiers of deduplicated trial records — dbFindIdsUniqueTrials","text":"","code":"if (FALSE) { dbc <- nodbi::src_sqlite(collection = \"my_collection\")  dbFindIdsUniqueTrials(con = dbc)  }"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbGetFieldsIntoDf.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data frame of specified fields from database collection — dbGetFieldsIntoDf","title":"Create data frame of specified fields from database collection — dbGetFieldsIntoDf","text":"Fields collection retrieved data frame (tibble). Note fields within record trial can hierarchical structured, , nested. Names fields can found dbFindFields. function uses field names appropriately type values returns, harmonising original values (e.g. \"Information present EudraCT\" becomes `NA`, \"Yes\" becomes `TRUE`, \"false\" becomes `FALSE`, date strings become class Date, number strings become numbers). function attempts simplify structure nested data may concatenate multiple strings field using \" / \" (see ); complex nested data, use function dfTrials2Long followed dfName2Value extract desired nested variable(s).","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbGetFieldsIntoDf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data frame of specified fields from database collection — dbGetFieldsIntoDf","text":"","code":"dbGetFieldsIntoDf(fields = \"\", con, verbose = FALSE, stopifnodata = TRUE)"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbGetFieldsIntoDf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data frame of specified fields from database collection — dbGetFieldsIntoDf","text":"fields Vector one strings, names sought fields. See function dbFindFields find names fields. \"item.subitem\" notation supported. con connection object, see section `Databases` ctrdata-package verbose Printing additional information set TRUE; (default FALSE). stopifnodata Stops error (detaul TRUE) warning (FALSE) sought field empty , available records database collection.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbGetFieldsIntoDf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data frame of specified fields from database collection — dbGetFieldsIntoDf","text":"data frame (tibble, dplyr loaded) columns corresponding sought fields. column record `_id` always included. column can either simple data type (numeric, character, date) list. complicated lists, use function dfTrials2Long followed function dfName2Value extract values nested variables. maximum number rows returned data frame equal , less number records trials database collection.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbGetFieldsIntoDf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create data frame of specified fields from database collection — dbGetFieldsIntoDf","text":"","code":"if (FALSE) {  dbc <- nodbi::src_sqlite(collection = \"my_collection\")  # access fields that are nested within another field # and can have multiple values with the nested field dbGetFieldsIntoDf(   \"b1_sponsor.b31_and_b32_status_of_the_sponsor\",   con = dbc )  # access fields that include a list of values which # (if they are strings) are concatenated with a slash dbGetFieldsIntoDf(\"keyword\", con = dbc)[1,] #           _id                                   keyword # 1 NCT00129259 T1D / type 1 diabetes / juvenile diabetes  }"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbQueryHistory.html","id":null,"dir":"Reference","previous_headings":"","what":"Show history of queries loaded into a database collection — dbQueryHistory","title":"Show history of queries loaded into a database collection — dbQueryHistory","text":"Show history queries loaded database collection","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbQueryHistory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show history of queries loaded into a database collection — dbQueryHistory","text":"","code":"dbQueryHistory(con, verbose = FALSE)"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbQueryHistory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show history of queries loaded into a database collection — dbQueryHistory","text":"con connection object, see section `Databases` ctrdata-package verbose TRUE, prints additional information (default FALSE).","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbQueryHistory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show history of queries loaded into a database collection — dbQueryHistory","text":"data frame (tibble, dplyr loaded)  columns: `query-timestamp`, `query-register`,  `query-records` (note: number records loaded last  executing ctrLoadQueryIntoDb, total record number)  `query-term`, one row time ctrLoadQueryIntoDb loaded trial records collection.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dbQueryHistory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show history of queries loaded into a database collection — dbQueryHistory","text":"","code":"if (FALSE) {  dbc <- nodbi::src_sqlite(collection = \"my_collection\")  dbQueryHistory(con = dbc)  }"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfFindUniqueEuctrRecord.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a single trial record from records of different EU Member States — dfFindUniqueEuctrRecord","title":"Select a single trial record from records of different EU Member States — dfFindUniqueEuctrRecord","text":"EUCTR provides one record per trial per EU Member State trial conducted. trials conducted one Member State, function returns one record per trial.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfFindUniqueEuctrRecord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a single trial record from records of different EU Member States — dfFindUniqueEuctrRecord","text":"","code":"dfFindUniqueEuctrRecord(   df = NULL,   prefermemberstate = \"DE\",   include3rdcountrytrials = TRUE )"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfFindUniqueEuctrRecord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a single trial record from records of different EU Member States — dfFindUniqueEuctrRecord","text":"df data frame created database collection includes columns \"_id\" \"a2_eudract_number\", example created function dbGetFieldsIntoDf(c(\"_id\", \"a2_eudract_number\")). prefermemberstate Code single EU Member State records returned. available, record DE lacking , random Member State's record trial returned. list codes EU  Member States, please see vector countriesEUCTR. Specifying \"3RD\" return Third Country record trials, available. include3rdcountrytrials logical value trials retained conducted exclusively third countries, , outside European Union. Ignored prefermemberstate set \"3RD\".","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfFindUniqueEuctrRecord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select a single trial record from records of different EU Member States — dfFindUniqueEuctrRecord","text":"data frame subset df corresponding sought   records.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfFindUniqueEuctrRecord.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select a single trial record from records of different EU Member States — dfFindUniqueEuctrRecord","text":"Note: deduplicate trials different registers (EUCTR CTGOV), please first use function dbFindIdsUniqueTrials.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfListExtractKey.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract named element(s) from list(s) into long-format\ndata frame — dfListExtractKey","title":"Extract named element(s) from list(s) into long-format\ndata frame — dfListExtractKey","text":"(Deprecated, use dfTrials2Long dfName2Value!) function uses name (key) extract element list data.frame obtained dbGetFieldsIntoDf. helps simplify working nested lists complex structures.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfListExtractKey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract named element(s) from list(s) into long-format\ndata frame — dfListExtractKey","text":"","code":"dfListExtractKey(df, list.key = list(c(\"endPoints.endPoint\", \"^title\")))"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfListExtractKey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract named element(s) from list(s) into long-format\ndata frame — dfListExtractKey","text":"df data frame (tibble) list.key list pairs list names key names, list name corresponds name column df holds list name key identifies element extracted. See example.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfListExtractKey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract named element(s) from list(s) into long-format\ndata frame — dfListExtractKey","text":"data frame (tibble, dplyr loaded)  long format columns  name (identifying full path data frame,  \"<list>.<key>\"), _id (trial record), value  (name per _id), item (number value name  per _id).","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfListExtractKey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract named element(s) from list(s) into long-format\ndata frame — dfListExtractKey","text":"","code":"if (FALSE) {  dbc <- nodbi::src_sqlite(collection = \"my_collection\")  df <- dbGetFieldsIntoDf(   fields = c(     \"endPoints.endPoint\",     \"subjectDisposition.postAssignmentPeriods\"),   con = dbc )  dfListExtractKey(   df = df,   list.key = list(       c(\"endPoints.endPoint\",         \"^title\"),       c(\"subjectDisposition.postAssignmentPeriods\",         \"arms.arm.type.value\") ))  }"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfMergeTwoVariablesRelevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two variables — dfMergeTwoVariablesRelevel","title":"Merge two variables — dfMergeTwoVariablesRelevel","text":"Merge two variables data frame returned dbGetFieldsIntoDf new variable, optionally also map values new levels.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfMergeTwoVariablesRelevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two variables — dfMergeTwoVariablesRelevel","text":"","code":"dfMergeTwoVariablesRelevel(df = NULL, colnames = \"\", levelslist = NULL, ...)"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfMergeTwoVariablesRelevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two variables — dfMergeTwoVariablesRelevel","text":"df data.frame two variables (columns) merged one. colnames vector length two names two columns hold variables merged. See colnames obtain names columns data frame. levelslist list one slice new value used vector old values (optional). ... deprecated varnames parameter (removed)","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfMergeTwoVariablesRelevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two variables — dfMergeTwoVariablesRelevel","text":"vector strings","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfMergeTwoVariablesRelevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two variables — dfMergeTwoVariablesRelevel","text":"","code":"if (FALSE) {  statusvalues <- list(   \"ongoing\" = c(\"Recruiting\", \"Active\", \"Ongoing\",                 \"Active, not recruiting\", \"Enrolling by invitation\"),   \"completed\" = c(\"Completed\", \"Prematurely Ended\", \"Terminated\"),   \"other\" = c(\"Withdrawn\", \"Suspended\",               \"No longer available\", \"Not yet recruiting\"))  dfMergeTwoVariablesRelevel(   df = df,   colnames = c(\"overall_status\", \"x5_trial_status\"),   levelslist = statusvalues)  }"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfName2Value.html","id":null,"dir":"Reference","previous_headings":"","what":"Get value for variable of interest — dfName2Value","title":"Get value for variable of interest — dfName2Value","text":"Get information interest (e.g., endpoint) long data frame protocol- result-related trial information returned dfTrials2Long. Parameters `valuename`, `wherename` `wherevalue` matched using Perl regular expressions ignoring case.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfName2Value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get value for variable of interest — dfName2Value","text":"","code":"dfName2Value(df, valuename = \"\", wherename = \"\", wherevalue = \"\")"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfName2Value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get value for variable of interest — dfName2Value","text":"df data frame (tibble) four columns (`_id`, `identifier`, `name`, `value`) returned dfTrials2Long valuename character string name field holds value variable interest (e.g., summary measure \"endPoints.*tendencyValue.value\") wherename character string identify variable interest (e.g., \"endPoints.endPoint.title\") wherevalue character string value interest variable interest (e.g., \"duration response\")","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfName2Value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get value for variable of interest — dfName2Value","text":"data frame (tibble, dplyr loaded)  columns `_id`, `identifier`,  `name`, `value` includes values interest,  values strings unless value elements  numbers. `ìdentifier` generated function dfTrials2Long identify matching elements, e.g.  endpoint descriptions measurements.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfName2Value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get value for variable of interest — dfName2Value","text":"","code":"if (FALSE) {  dbc <- nodbi::src_sqlite(collection = \"my_collection\")  df <- dbGetFieldsIntoDf( fields = c(   # ctgov - typical results fields   \"clinical_results.baseline.analyzed_list.analyzed.count_list.count\",   \"clinical_results.baseline.group_list.group\",   \"clinical_results.baseline.analyzed_list.analyzed.units\",   \"clinical_results.outcome_list.outcome\",   \"study_design_info.allocation\",   # euctr - typical results fields   \"trialInformation.fullTitle\",   \"subjectDisposition.recruitmentDetails\",   \"baselineCharacteristics.baselineReportingGroups.baselineReportingGroup\",   \"endPoints.endPoint\",   \"trialChanges.hasGlobalInterruptions\",   \"subjectAnalysisSets\",   \"adverseEvents.seriousAdverseEvents.seriousAdverseEvent\"   ), con = dbc )  # convert to long reslong <- dfTrials2Long(df = df)  # get values for endpoint of interest, e.g. 'response' dfName2Value(   df = reslong,   valuename = paste0(     \"endPoints.endPoint.*armReportingGroup.tendencyValues.tendencyValue.value|\",     \"clinical_results.*category.measurement_list.measurement.value|\",     \"clinical_results.*outcome.measure.units|endPoints.endPoint.unit\"   ),   wherename = \"clinical_results.*outcome.measure.title|endPoints.endPoint.title\",   wherevalue = \"response\" )  }"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfTrials2Long.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data frame with trial records into long format — dfTrials2Long","title":"Convert data frame with trial records into long format — dfTrials2Long","text":"function works procotol- results- related information. converts lists values data frame returned dbGetFieldsIntoDf individual rows long data frame. resulting data frame, values interest can selected using dfName2Value. function intended fields complex content, node field \"clinical_results\" EUCTR, dbGetFieldsIntoDf returns multiply nested list function converts every observation every (leaf) field row .","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfTrials2Long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data frame with trial records into long format — dfTrials2Long","text":"","code":"dfTrials2Long(df)"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfTrials2Long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data frame with trial records into long format — dfTrials2Long","text":"df Data frame (tibble) columns including trial identifier (_id) one variables obtained dbGetFieldsIntoDf","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfTrials2Long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data frame with trial records into long format — dfTrials2Long","text":"data frame  (tibble, dplyr loaded) four columns: `_id`, `identifier`, `name`, `value`","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/dfTrials2Long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data frame with trial records into long format — dfTrials2Long","text":"","code":"if (FALSE) {  dbc <- nodbi::src_sqlite(collection = \"my_collection\")  df <- dbGetFieldsIntoDf(   fields = c(\"clinical_results\"),   con = dbc ) head(dfTrials2Long(df = df))  }"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/installCygwinWindowsDoInstall.html","id":null,"dir":"Reference","previous_headings":"","what":"Install necessary helper apps (Windows only) — installCygwinWindowsDoInstall","title":"Install necessary helper apps (Windows only) — installCygwinWindowsDoInstall","text":"Convenience function install minimal Cygwin environment MS Windows, including perl, sed php. Alternatively case difficulties, download run cygwin setup follows: cygwinsetup.exe ---admin --quiet-mode --verbose --upgrade-also --root c:/cygwin --site https://www.mirrorservice.org/sites/sourceware.org/pub/cygwin/ --packages perl,php-jsonc,php-simplexml. binaries required function ctrLoadQueryIntoDb function package.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/installCygwinWindowsDoInstall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install necessary helper apps (Windows only) — installCygwinWindowsDoInstall","text":"","code":"installCygwinWindowsDoInstall(force = FALSE, proxy = Sys.getenv(\"https_proxy\"))"},{"path":"https://rfhb.github.io/ctrdata/dev/reference/installCygwinWindowsDoInstall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install necessary helper apps (Windows only) — installCygwinWindowsDoInstall","text":"force Set TRUE update Cygwin environment previously installed function, overwrite existing installation c:\\cygwin proxy Specify proxy used downloading via http, e.g. `host_or_ip:port`; defaults environment variable `https_proxy`. Set `\"\"` specify unset proxy.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/reference/installCygwinWindowsDoInstall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install necessary helper apps (Windows only) — installCygwinWindowsDoInstall","text":"","code":"if (FALSE) {  installCygwinWindowsDoInstall()  }"},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-1919000","dir":"Changelog","previous_headings":"","what":"ctrdata 1.9.1.9000","title":"ctrdata 1.9.1.9000","text":"2022-04-24","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-191","dir":"Changelog","previous_headings":"","what":"ctrdata 1.9.1","title":"ctrdata 1.9.1","text":"CRAN release: 2022-04-24 2022-04-24 type e811… variables bugfix dbGetFieldsIntoDf bugfix annotations mix backends editorial update vignettes","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-190","dir":"Changelog","previous_headings":"","what":"ctrdata 1.9.0","title":"ctrdata 1.9.0","text":"CRAN release: 2022-03-13 2022-03-13 chunked trial batches ndjson files accelerated database import package dplyr loaded, functions return tibble instead data frame update correct documentation dbFindFields() returns vector fields now names register field occurs accelerated binary checks (cygwin / Windows) remove internet proxy mangling order use system configuration (e.g., transparent proxies used, environment variable https_proxy specified user) refactored internal caching correct dbGetFieldsIntoDf() specific nested data structures correct dfTrials2Long() specific fields correct dbFindIdsUniqueTrials() single trial register modify field typing decode HTML entities type fields difftime, e.g. min_age CTGOV speed parts dbGetFieldsIntoDf() simplify fields dbFindFields() returns names leaf node fields improve update documentation changed EU Member State default DE dbFindIdsUniqueTrials() corrected installCygwinWindowsDoInstall() properly update installation (remove –prune-install) test binaries installCygwinWindowsDoInstall() cache successful binary testing correct typing required_header.download_date improve numbering dfTrials2Long, covering nested items","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-1809001","dir":"Changelog","previous_headings":"","what":"ctrdata 1.8.0.9001","title":"ctrdata 1.8.0.9001","text":"2021-12-11 thorough documentation improvement simplified dbFindFields cleaned testing binaries cleaned heper scripts removed ctrGetQueryUrlFromBrowser(), long deprecated","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-1809000","dir":"Changelog","previous_headings":"","what":"ctrdata 1.8.0.9000","title":"ctrdata 1.8.0.9000","text":"2021-11-22 uses nodbi 0.6.0 can use PostgreSQL backend include PostgreSQL Github Actions","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-180","dir":"Changelog","previous_headings":"","what":"ctrdata 1.8.0","title":"ctrdata 1.8.0","text":"CRAN release: 2021-11-21 2021-11-18 changes match nodbi 0.5.0 simplifying database operations (user-visible functions: ctrLoadQueryIntoDb, dbFindIdsUniqueTrials, dbGetFieldsIntoDf), without changes API","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-1719000","dir":"Changelog","previous_headings":"","what":"ctrdata 1.7.1.9000","title":"ctrdata 1.7.1.9000","text":"2021-08-23 new development version","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-171","dir":"Changelog","previous_headings":"","what":"ctrdata 1.7.1","title":"ctrdata 1.7.1","text":"CRAN release: 2021-08-22 2021-08-22 fix DBI needed Imports anymore (CRAN Note) fix potential file name issue conversion script fix dbFindFields() never return _id (previously depended database backend) changed tests (CRAN detection, register availability, additional tests)","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-170","dir":"Changelog","previous_headings":"","what":"ctrdata 1.7.0","title":"ctrdata 1.7.0","text":"CRAN release: 2021-07-25 2021-07-24 much reduced database backend-specific code, using nodbi 0.4.3 (released 2021-07-23) also introduces transactions sqlite using RSQLite >=2.2.4 (released 2021-03-12) temporary directory creation needed, automated deletion changes detecting non-functioning register servers streamlined unit testing","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-160","dir":"Changelog","previous_headings":"","what":"ctrdata 1.6.0","title":"ctrdata 1.6.0","text":"CRAN release: 2021-05-09 2021-05-09 added support ISRCTN refactored checking binaries caching info updated EUCTR download parameters refactored ctrGetQueryUrl ctrOpenSearchPagesInBrowser harmonised error checking avoid errors external scripts refactored url / query mangling, added detailed testing refactored storing JSON database (handle big files, reduce memory) improved dbFindIdsUniqueTrials (speed, memory, register coverage) factored conversion JSON accelerated EUCTR results history download storage external scripts now create multiple chunks records use identifier fields dbFindIdsUniqueTrials","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-1539000","dir":"Changelog","previous_headings":"","what":"ctrdata 1.5.3.9000","title":"ctrdata 1.5.3.9000","text":"2021-04-29 adding user info field entries typed","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-153","dir":"Changelog","previous_headings":"","what":"ctrdata 1.5.3","title":"ctrdata 1.5.3","text":"CRAN release: 2021-04-19 2021-04-19 include message handle server certificate issues, propagating user settings httr curl operations ensure identical return structures new trials found dfTrials2Long: harmonise identifier level assignment, address cases field occurs input df dfMergeTwoVariablesRelevel: corrected improved user info dfName2Value: remove duplicate rows, e.g. duplicated criteria","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-152","dir":"Changelog","previous_headings":"","what":"ctrdata 1.5.2","title":"ctrdata 1.5.2","text":"CRAN release: 2021-04-06 2021-04-05 bugfix EOL converting EUCTR files","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-151","dir":"Changelog","previous_headings":"","what":"ctrdata 1.5.1","title":"ctrdata 1.5.1","text":"CRAN release: 2021-03-21 2021-03-21 bugfix non-matching euctr protocol result ids: trials EUCTR results downloaded version 1.5.0 downloaded (ctrLoadQueryIntoDb) dfTrials2Long refactored accelerated API change: dfTrials2Long return value (identifier replaces main_id sub_id) new option save EUCTR results PDF files user-specified directory","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-150","dir":"Changelog","previous_headings":"","what":"ctrdata 1.5.0","title":"ctrdata 1.5.0","text":"CRAN release: 2021-03-16 2021-03-14 return values dbGetFieldsIntoDf now mostly identical whether using src_mongo src_sqlite, best ensure portability analysis code permit dots queries / URLs improved handling queryterm renamed ctrGetQueryUrlFromBrowser ctrGetQueryUrl soft deprecated ctrGetQueryUrlFromBrowser ensure parallel retrievals EUCTR speed routines dbGetFieldsIntoDf make dfTrials2Long handle NA better improved documentation, clarified examples simplified internals typing fields, start typing results fields","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-141","dir":"Changelog","previous_headings":"","what":"ctrdata 1.4.1","title":"ctrdata 1.4.1","text":"CRAN release: 2020-11-03 2020-11-03 reset row names data frames returned functions update curl parameters accessing EUCTR","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-14","dir":"Changelog","previous_headings":"","what":"ctrdata 1.4","title":"ctrdata 1.4","text":"2020-10-17 new: easy access variables dfTrials2Long() + dfName2Value() improved dfMergeTwoVariablesRelevel() maintain type data revised simplified vignettes deprecated: dfListExtractKey() refactored parts euctr retrieval notify user euctr register server permit compression long retrieval take","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-1329000","dir":"Changelog","previous_headings":"","what":"ctrdata 1.3.2.9000","title":"ctrdata 1.3.2.9000","text":"2020-10-08 fixed identifying unique ids","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-132","dir":"Changelog","previous_headings":"","what":"ctrdata 1.3.2","title":"ctrdata 1.3.2","text":"CRAN release: 2020-10-05 2020-10-03 quote system file paths","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-131","dir":"Changelog","previous_headings":"","what":"ctrdata 1.3.1","title":"ctrdata 1.3.1","text":"CRAN release: 2020-08-02 2020-08-01 fix error CI tests","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-130","dir":"Changelog","previous_headings":"","what":"ctrdata 1.3.0","title":"ctrdata 1.3.0","text":"CRAN release: 2020-07-27 2020-07-27 workaround EUCTR certificate issue streamline ctrGetQueryUrlFromBrowser() better handling complex fields include tests query string handling, checking parameters return values better clean-testing ctrLoadQueryIntoDb(querytorerun = …) now looks date querytorerun last run, often use euctr update options switching travis github action upped coverage code tested","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-121","dir":"Changelog","previous_headings":"","what":"ctrdata 1.2.1","title":"ctrdata 1.2.1","text":"CRAN release: 2020-05-18 2020-05-18 tinytest >= 1.2.1 avoid regression error correct testing detail","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-12","dir":"Changelog","previous_headings":"","what":"ctrdata 1.2","title":"ctrdata 1.2","text":"CRAN release: 2019-12-08 2019-12-07 correct cygwin install detail","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-11","dir":"Changelog","previous_headings":"","what":"ctrdata 1.1","title":"ctrdata 1.1","text":"CRAN release: 2019-11-12 2019-11-12 release nodbi 0.4 available","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-1019005","dir":"Changelog","previous_headings":"","what":"ctrdata 1.0.1.9005","title":"ctrdata 1.0.1.9005","text":"2019-11-09 update description installation github","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-1019004","dir":"Changelog","previous_headings":"","what":"ctrdata 1.0.1.9004","title":"ctrdata 1.0.1.9004","text":"2019-11-04 handled mixed arrays text values key ctgov trial records user information importing","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-1019003","dir":"Changelog","previous_headings":"","what":"ctrdata 1.0.1.9003","title":"ctrdata 1.0.1.9003","text":"2019-11-04 nesting added euctr trial records user verbose information extended record importing","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-1019002","dir":"Changelog","previous_headings":"","what":"ctrdata 1.0.1.9002","title":"ctrdata 1.0.1.9002","text":"2019-11-03 improved parsing euctr trial records correct re-opening sqlite connection","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-101","dir":"Changelog","previous_headings":"","what":"ctrdata 1.0.1","title":"ctrdata 1.0.1","text":"CRAN release: 2019-10-23 2019-10-22 correction testing","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-10","dir":"Changelog","previous_headings":"","what":"ctrdata 1.0","title":"ctrdata 1.0","text":"CRAN release: 2019-10-16 2019-10-16 switch nodbi::scr_{mongo,sqlite}() re-implementation functions switch testthat tinytest, users can check tinytest::test_package(“ctrdata”) improvements euctr trial import new function dfListExtractKey","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0189005","dir":"Changelog","previous_headings":"","what":"ctrdata 0.18.9005","title":"ctrdata 0.18.9005","text":"2019-05-02 speed testing bash commands windows","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0182","dir":"Changelog","previous_headings":"","what":"ctrdata 0.18.2","title":"ctrdata 0.18.2","text":"CRAN release: 2019-05-01 2019-04-30 new release extended compatibility cygwin Windows","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0189004","dir":"Changelog","previous_headings":"","what":"ctrdata 0.18.9004","title":"ctrdata 0.18.9004","text":"2019-04-28 find use cygw* windows refactored escaping bash command called windows","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0189002","dir":"Changelog","previous_headings":"","what":"ctrdata 0.18.9002","title":"ctrdata 0.18.9002","text":"2019-04-21 corrected typing date fields","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0181","dir":"Changelog","previous_headings":"","what":"ctrdata 0.18.1","title":"ctrdata 0.18.1","text":"2019-04-14 simplified cygwin install updated documentation corrected inconsistent handling query terms","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0189001","dir":"Changelog","previous_headings":"","what":"ctrdata 0.18.9001","title":"ctrdata 0.18.9001","text":"2019-04-12 added automated proxy handling","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-018","dir":"Changelog","previous_headings":"","what":"ctrdata 0.18","title":"ctrdata 0.18","text":"CRAN release: 2019-04-11 2019-04-11 release version bug fixes field typing move use remote mongodb server updated vignettes","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-017","dir":"Changelog","previous_headings":"","what":"ctrdata 0.17","title":"ctrdata 0.17","text":"2019-03-27 release version","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0169002","dir":"Changelog","previous_headings":"","what":"ctrdata 0.16.9002","title":"ctrdata 0.16.9002","text":"2019-03-26 improve dbFindFields() formatting added parameter force running query ","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0169001","dir":"Changelog","previous_headings":"","what":"ctrdata 0.16.9001","title":"ctrdata 0.16.9001","text":"2019-03-26 added typing (numeric fields) improve cygwin install attempts information","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0169000","dir":"Changelog","previous_headings":"","what":"ctrdata 0.16.9000","title":"ctrdata 0.16.9000","text":"2019-03-24 removed dependency local mongodb installation (major rewrite) improved support remote mongodb servers (note changes host / db / uri parameters)","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0159007","dir":"Changelog","previous_headings":"","what":"ctrdata 0.15.9007","title":"ctrdata 0.15.9007","text":"2019-03-15 Important: Added checking SSL certificates EUCTR EUCTR server sending required intermediate root certificates, thus failing curl httr, see https://www.digicert.com/help/?host=www.clinicaltrialsregister.eu","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0150","dir":"Changelog","previous_headings":"","what":"ctrdata 0.15.0","title":"ctrdata 0.15.0","text":"2019-03-13 fixed EUCTR results retrieval (curl return value order predictable) removed second time adding metadata one function streamlined user information progress feedback","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0143","dir":"Changelog","previous_headings":"","what":"ctrdata 0.14.3","title":"ctrdata 0.14.3","text":"2019-03-12 turned error message new trials found prevent failing tests new trials found rss feed","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0142","dir":"Changelog","previous_headings":"","what":"ctrdata 0.14.2","title":"ctrdata 0.14.2","text":"2019-03-07 harmonise user information","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0141","dir":"Changelog","previous_headings":"","what":"ctrdata 0.14.1","title":"ctrdata 0.14.1","text":"CRAN release: 2019-03-12 2019-03-07 replaced RCurl (failed register servers) httr curl create README.md README.Rmd","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-014","dir":"Changelog","previous_headings":"","what":"ctrdata 0.14","title":"ctrdata 0.14","text":"2019-03-06 intention submit CRAN, therefore changing several warnings messages, improve testing tool chain applications","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0133","dir":"Changelog","previous_headings":"","what":"ctrdata 0.13.3","title":"ctrdata 0.13.3","text":"2019-03-03 prettified dbFindFields() removing count symbols (XX.) paths improve converting invalid XML EUCTR result files JSON","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0132","dir":"Changelog","previous_headings":"","what":"ctrdata 0.13.2","title":"ctrdata 0.13.2","text":"2019-02-28 made EUCTR retrieval robust added marginal case url single trial EUCTR extended timeout checking online status EUCTR","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0131","dir":"Changelog","previous_headings":"","what":"ctrdata 0.13.1","title":"ctrdata 0.13.1","text":"2019-02-24 added typing dates logical fields using dbGetFieldsIntoDf()","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-013","dir":"Changelog","previous_headings":"","what":"ctrdata 0.13","title":"ctrdata 0.13","text":"2019-01-06 dbGetVariablesIntoDf() deprecated, use dbGetFieldsIntoDf() instead dbFindVariable() deprecated, use dbFindFields() instead dbMergeTwoVariablesRelevel() parameter varnames deprecated, use colnames instead","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0121","dir":"Changelog","previous_headings":"","what":"ctrdata 0.12.1","title":"ctrdata 0.12.1","text":"2018-12-15 added function ctrFindActiveSubstanceSynonyms() obtain synonyms active substance added user information number trials CTGOV downloaded, limit 5000 per query corrected import EUCTR details = FALSE","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-012","dir":"Changelog","previous_headings":"","what":"ctrdata 0.12","title":"ctrdata 0.12","text":"2018-05-19 added possibility add user’s annotations records retrieved query (new option annotate.text)","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0112","dir":"Changelog","previous_headings":"","what":"ctrdata 0.11.2","title":"ctrdata 0.11.2","text":"2018-04-22 changed queryterm processing","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0111","dir":"Changelog","previous_headings":"","what":"ctrdata 0.11.1","title":"ctrdata 0.11.1","text":"2018-04-07 improved installFindMongoBinaries(), now better detect mongo binary locations use example cron scripts, may access user’s path information","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-011","dir":"Changelog","previous_headings":"","what":"ctrdata 0.11","title":"ctrdata 0.11","text":"2018-01-28 newly retrieved: EUCTR results history, new fields “firstreceived_results_date” “version_results_history” adding feature per issue #8","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0104","dir":"Changelog","previous_headings":"","what":"ctrdata 0.10.4","title":"ctrdata 0.10.4","text":"2017-12-28 note compatibility mongoDB versions fixing issue #8 simplified license","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0-10-4","dir":"Changelog","previous_headings":"","what":"ctrdata 0.10.3","title":"ctrdata 0.10.4","text":"2017-11-24 changed custom-built “x5_trial_status” “p_end_of_trial_status” provided EUCTR","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0102","dir":"Changelog","previous_headings":"","what":"ctrdata 0.10.2","title":"ctrdata 0.10.2","text":"2017-11-22 editorial project updates","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0101","dir":"Changelog","previous_headings":"","what":"ctrdata 0.10.1","title":"ctrdata 0.10.1","text":"2017-07-30 now loading results euctr available xml","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0100","dir":"Changelog","previous_headings":"","what":"ctrdata 0.10.0","title":"ctrdata 0.10.0","text":"2017-07-25 fully load results ctgov prepare loading results euctr","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0914","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.14","title":"ctrdata 0.9.14","text":"2017-06-28 refactored system calls windows now part continuous integration","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0913","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.13","title":"ctrdata 0.9.13","text":"2017-06-23 refactored ctrLoadQueryIntoDb","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0912","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.12","title":"ctrdata 0.9.12","text":"2017-06-18 Preparing new CTGOV interface Improved documentation Corrected ctrGetQueryUrlFromBrowser return value","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-09111","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.11.1","title":"ctrdata 0.9.11.1","text":"2017-02-04 Improved documentation","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0911","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.11","title":"ctrdata 0.9.11","text":"2017-01-15 Added functionality: EUCTR fallback import mechanism large JSON file fails import mongoDB (splitting importing one JSON file trial, tested several thousand trials)","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-09101","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.10.1","title":"ctrdata 0.9.10.1","text":"2017-01-12 Fixes issues conversion EUCTR records details. Fixes issue placebo information converted IMP fields.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-09100","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.10.0","title":"ctrdata 0.9.10.0","text":"2016-12-28 Added metadata attributes returned objects indicate database, query, timestamp etc.","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0995","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.9.5","title":"ctrdata 0.9.9.5","text":"2016-12-14 Added option ctrLoadQueryIntoDb(querytoupdate = “last”) re-download last query collection","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0994","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.9.4","title":"ctrdata 0.9.9.4","text":"2016-11-18 Added progress indicator ctrLoadQueryIntoDb() indicate network download traffic","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0993","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.9.3","title":"ctrdata 0.9.9.3","text":"2016-11-17 deduplication dbFindIdsUniqueTrials() optimised speed memory, added check ISRCTN","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0992","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.9.2","title":"ctrdata 0.9.9.2","text":"2016-11-13 corrected deduplication dbFindIdsUniqueTrials()","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-0991","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9.9.1","title":"ctrdata 0.9.9.1","text":"2016-11-12 renamed ctrQueryHistoryInDb() dbQueryHistory() note: change json format query history, breaking compatibility refactored concerned functions use mongolite rmongodb supported","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-09","dir":"Changelog","previous_headings":"","what":"ctrdata 0.9","title":"ctrdata 0.9","text":"2016-10-17 changed implementation dbFindIdsUniqueTrials() editorial changes examples","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-081","dir":"Changelog","previous_headings":"","what":"ctrdata 0.8.1","title":"ctrdata 0.8.1","text":"2016-09-07 added field indicate source register improved ctrLoadQueryIntoDb() details = FALSE added example map plotting","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-08","dir":"Changelog","previous_headings":"","what":"ctrdata 0.8","title":"ctrdata 0.8","text":"2016-09-04 dbFindIdsUniqueTrials now encapsulates dfFindIdsUniqueEuctrRecord dfFindIdsUniqueEuctrRecords removed installation instructions updated recently rmongodb removed CRAN","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-07","dir":"Changelog","previous_headings":"","what":"ctrdata 0.7","title":"ctrdata 0.7","text":"2016-05-29 dbGetVariablesIntoDf changed concatenate values array objects completed test adaptation travis improving perl regex checking helper applications","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-062","dir":"Changelog","previous_headings":"","what":"ctrdata 0.6.2","title":"ctrdata 0.6.2","text":"2016-04-20 add / update field “record_last_import” every imported / updated record","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-061","dir":"Changelog","previous_headings":"","what":"ctrdata 0.6.1","title":"ctrdata 0.6.1","text":"2016-04-02 changed provide vignettes","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-06","dir":"Changelog","previous_headings":"","what":"ctrdata 0.6","title":"ctrdata 0.6","text":"2016-02-25 different update mechanism EUCTR implemented corrected function name db… dfFindUniqueEuctrRecord()","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-059","dir":"Changelog","previous_headings":"","what":"ctrdata 0.5.9","title":"ctrdata 0.5.9","text":"2016-01-23 Corrected bugs Started preparation submission CRAN Preparing include package unit tests","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-05","dir":"Changelog","previous_headings":"","what":"ctrdata 0.5","title":"ctrdata 0.5","text":"2015-11-29 Published github Improved documentation","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-04","dir":"Changelog","previous_headings":"","what":"ctrdata 0.4","title":"ctrdata 0.4","text":"2015-10-08 Renamed functions consistency ease--use","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-03","dir":"Changelog","previous_headings":"","what":"ctrdata 0.3","title":"ctrdata 0.3","text":"2015-10-06 Added functionality download xml data CTGOV, includes data csv format","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-028","dir":"Changelog","previous_headings":"","what":"ctrdata 0.2.8","title":"ctrdata 0.2.8","text":"Changed extended history queries included database. New function dbCTRQueryHistory()","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-027","dir":"Changelog","previous_headings":"","what":"ctrdata 0.2.7","title":"ctrdata 0.2.7","text":"Added function merging variables different registers optionally merge values new values Note function findCTRkey renamed dbFindCTRkey acts database","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-025","dir":"Changelog","previous_headings":"","what":"ctrdata 0.2.5","title":"ctrdata 0.2.5","text":"Added function selecting preferred language versions trials EUCTR Improved use automatic proxy configuration script","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-022","dir":"Changelog","previous_headings":"","what":"ctrdata 0.2.2","title":"ctrdata 0.2.2","text":"Added proxy function improved installation cygwin MS Windows","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-02","dir":"Changelog","previous_headings":"","what":"ctrdata 0.2","title":"ctrdata 0.2","text":"2015-09-19 Now also working MS Windows","code":""},{"path":"https://rfhb.github.io/ctrdata/dev/news/index.html","id":"ctrdata-01","dir":"Changelog","previous_headings":"","what":"ctrdata 0.1","title":"ctrdata 0.1","text":"2015-09-15 First version basic functionality Limited testing Works Mac OS X (10.10.x)","code":""}]
