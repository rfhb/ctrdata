# https://github.com/r-lib/actions/tree/master/examples#standard-ci-workflow

on: [push, pull_request]

name: R-CMD-check-win-macos

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest, r: 'release'}
          - {os: macOS-latest, r: 'oldrel'}
          # error installing dependencies under devel
          #- {os: macOS-latest, r: 'devel'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      AT_HOME: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GHPAT }}

    # https://docs.github.com/en/actions/reference/software-installed-on-github-hosted-runners
    # includes on macOS 10.15 mongod 4.2.8 and Windows Server 201{6,9}:
    # Version ServiceName ServiceStatus ServiceStartType
    # 4.2.8.0 MongoDB     Running       Automatic

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@master

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install dependencies
        run: |
          install.packages(c("remotes"))
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran(c("rcmdcheck", "covr"))
          remotes::install_github("ropensci/nodbi")
        shell: Rscript {0}

      # - name: Install branch-specific dependencies
      #   if: github.ref_name == 'nodbi050'
      #   run: remotes::install_github("ropensci/nodbi", "harmoniseApi")
      #   shell: Rscript {0}

      - name: Windows change DNS
        if: runner.os == 'Windows'
        # to avoid timeouts
        run: |
          Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses 8.8.8.8
          cmd /c "ipconfig /flushdns 2>&1"
        shell: powershell

      - name: Windows install additional dependencies
        if: runner.os == 'Windows'
        # to install cygwin to provide php, sed, cat etc.
        run: |
          remotes::install_github("rfhb/ctrdata")
          ctrdata::installCygwinWindowsDoInstall()
        shell: Rscript {0}

      - name: Windows cache additional dependencies
        if: runner.os == 'Windows'
        uses: actions/cache@v2
        with:
          path: c:\cygwin
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
          ctrdatamongouri: ${{ secrets.CTRDATAMONGOURI }}
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload all check results
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-tinytest
          path: check/ctrdata.Rcheck/tests/tinytest*

      - name: Upload failed check results
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Test coverage
        if: runner.os != 'Windows' && matrix.config.r == 'release'
        # Coverage testing on Windows done from separate machine
        # covr::codecov() uses environment variable CODECOV_TOKEN
        run: covr::codecov()
        shell: Rscript {0}
