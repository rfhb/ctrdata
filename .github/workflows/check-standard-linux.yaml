# https://github.com/r-lib/actions/tree/master/examples#standard-ci-workflow
#
# note: update
# https://github.com/rfhb/ctrdata/settings/secrets/actions/CACHE_VERSION

on: [push, pull_request]

name: R-CMD-CHECK-ubuntu-postgresql-mongodb-sqlite

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-latest, r: 'devel'}
          # - {os: ubuntu-latest, r: 'release'}
          # - {os: ubuntu-latest, r: 'oldrel-1'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GHPAT }}

    services:
      mongodb:
        image: mongo:4.2
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v3

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install xclip for checks and other dependencies
        run: sudo apt-get install -y xclip libjq-dev php-cli

      - name: Install system dependencies
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install dependencies
        run: |
          install.packages(c("remotes"))
          utils::install.packages("DBI")
          utils::install.packages("duckdb", repos = "https://duckdb.r-universe.dev")
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran(c("rcmdcheck", "covr"))
          remotes::install_github("ropensci/nodbi")
          remotes::install_github("rfhb/ctrdata")
        shell: Rscript {0}

      # - uses: ankane/setup-postgres@v1
      #   with:
      #     postgres-version: 14
      #     database: test

      - name: Wait to reduce ctgov timeouts
        uses: 1itachi/sleep-random@v1.0.0
        with:
          minutes: '10'
          random: 'true'

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check

      - uses: r-lib/actions/check-r-package@v2
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
          _CURL_NO_SSL_VERIFYPEER_: true
          _R_CHECK_EXAMPLE_TIMING_THRESHOLD_: 30
          ctrdatamongouri: ${{ secrets.CTRDATAMONGOURI }}
        with:
          upload-snapshots: true

      # - name: Check
      #   env:
      #     _R_CHECK_CRAN_INCOMING_REMOTE_: false
      #     _CURL_NO_SSL_VERIFYPEER_: true
      #     _R_CHECK_EXAMPLE_TIMING_THRESHOLD_: 30
      #     ctrdatamongouri: ${{ secrets.CTRDATAMONGOURI }}
      #   run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
      #   shell: Rscript {0}
      #
      # - name: Upload check results
      #   if: failure()
      #   uses: actions/upload-artifact@main
      #   with:
      #     name: ${{ runner.os }}-r${{ matrix.config.r }}-results
      #     path: check
      #
      # - name: Upload all check results
      #   uses: actions/upload-artifact@main
      #   with:
      #     name: ${{ runner.os }}-r${{ matrix.config.r }}-tinytest
      #     path: check/ctrdata.Rcheck/tests/tinytest*
